#
# creates TCL package indexes for both the TCL-source
# and the SWIG-wrapped code. 
#
# usage:  tclsh indexTCLpackages.tcl <filenames>
#
# where <filenames> is a list of .tcl and .cc files
#
# Mildly fragile on the SWIG side--works by grepping through the C++ output
#
# The reason I can't just use TCL's pkg_mkIndex is that it 
# chokes if the .so has undefined symbols, as happens in my
# SWIG-wrapped code.
#
# JJK 6/24/02
#

#
# first, split up the items in argv into .tcl and .cc files
# to be handled separately
#

set tclfiles [list]
set ccfiles  [list]

foreach item $argv {

    if {[string match *.tcl $item]} {
	lappend tclfiles $item
    }

    if {[string match *.cc $item]} {
	lappend ccfiles $item
    }
}

#
# first, handle the TCL source
#

set cmd [format "pkg_mkIndex . %s" [join $tclfiles]]
eval $cmd

#
# now handle the CC source:
# append the pkg_mkIndex output with the SWIG-wrapped packages' info
#

set idxFile "pkgIndex.tcl"

if {[file exists $idxFile]} {
    set needsHeader 0
} else {
    set needsHeader 1
}

if { [catch {set outUnit [open $idxFile a]}] } {
    error "Error opening file $idxFile to append SWIG-wrapped packages"
}

#
# this environment vbl should be defined in the Makefile
# to identify what libraries are called on the current platform
#

if {[info exists env(LIB_SUFFIX)]} {
    set suffix $env(LIB_SUFFIX)
} else {
    set suffix so
}

foreach fname $ccfiles {

    set theLine [exec grep "define SWIGTCL_name " $fname]
    set packageName [lindex $theLine 2]

    set theLine [exec grep "define SWIGTCL_version " $fname | tail -1]
    set verNum [lindex $theLine 2]

    set cleanFileName [format "%s.%s" [file rootname [file tail $fname]] \
			   $suffix]

    set packageFiles($packageName) $cleanFileName
    set  versionNums($packageName) $verNum
}

if {$needsHeader == 1} {
    puts $outUnit "\# Tcl package index file, version 1.1"
    puts $outUnit "\# autogenerated by \$XPLOR_DIR/tcl/indexTCLPackages.tcl "
    puts $outUnit ""
}

foreach curPackageName [array names packageFiles] {

    set curFileName $packageFiles($curPackageName)
    set curVersion   $versionNums($curPackageName)

    puts $outUnit [format \
       {package ifneeded %s %s [list load [file join $dir %s] %s]} \
	  $curPackageName $curVersion $curFileName $curPackageName]
}

close $outUnit
