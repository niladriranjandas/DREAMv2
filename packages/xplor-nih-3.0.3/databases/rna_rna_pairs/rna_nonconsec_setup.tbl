!
! rna_nonconsec_setup.tbl
!
! Automatically builds RNA-RNA DELPHIC position constraints
!
! The RNA-RNA delpos surface was built with all interactions
! except those from a residue to its immediate neighbors along
! its own strand.  Thus, this setup script does the same thing.
! 
! JJK July 2001
!
!

!
! select the residues that are to be used here and
! put the selection in the store9 array
!
! eg. vector identify (store9) (resid 101:128)
!

!
! set the variable $distcut to the cutoff distance (in A)
! you want to use
!
! eg., eval ($distcut = 15)
!



set message off echo off end

!
! make sure $distcut is set, or default to 1000 A
!

evaluate ($distcut=1000.0)


!
! for every residue type "a",
!

eval ($acount = 20)
while ($acount < 24) loop acount
   eval ($acount = $acount + 1)

!
! select the appropriate atoms for each residue type
!

   if ($acount = 21) then
      vector identify (store1) (store9 and resn ade and name n7)
      vector identify (store2) (store9 and resn ade and name n6)
      vector identify (store3) (store9 and resn ade and name n3)
      eval ($aresn = "ADE")
   elseif ($acount = 22) then
      vector identify (store1) (store9 and resn gua and name n7)
      vector identify (store2) (store9 and resn gua and name o6)
      vector identify (store3) (store9 and resn gua and name n3)
      eval ($aresn = "GUA")
   elseif ($acount = 23) then
      vector identify (store1) (store9 and resn uri and name c5)
      vector identify (store2) (store9 and resn uri and name o4)
      vector identify (store3) (store9 and resn uri and name o2)
      eval ($aresn = "URI")
   elseif ($acount = 24) then
      vector identify (store1) (store9 and resn cyt and name c5)
      vector identify (store2) (store9 and resn cyt and name n4)
      vector identify (store3) (store9 and resn cyt and name o2)
      eval ($aresn = "CYT")
   elseif ($acount = 25) then
      vector identify (store1) (store9 and name c2')
      vector identify (store2) (store9 and name c3')
      vector identify (store3) (store9 and name c4')
      eval ($aresn = "RIB")
   elseif ($acount = 26) then
      vector identify (store1) (store9 and name o1p)
      vector identify (store2) (store9 and name p)
      vector identify (store3) (store9 and name o5')
      eval ($aresn = "PHS")
   else
      vector identify (store1) (store9 and resn error and name err1)
      vector identify (store2) (store9 and resn error and name err2)
      vector identify (store3) (store9 and resn error and name err3)
      eval ($aresn = "ERR")
   end if

!
! for every residue type "b", 
!

   eval ($bcount = 20)
   while ($bcount < 24) loop bcount
      eval ($bcount = $bcount + 1)

!
! select the appropriate atoms for each residue type
!

      if ($bcount = 21) then
         vector identify (store5) (store9 and resn ade and name n7)
         vector identify (store6) (store9 and resn ade and name n6)
         vector identify (store7) (store9 and resn ade and name n3)
         eval ($bresn = "ADE")
         eval ($batomname1 = "N7")
         eval ($batomname2 = "N6")
         eval ($batomname3 = "N3")
      elseif ($bcount = 22) then
         vector identify (store5) (store9 and resn gua and name n7)
         vector identify (store6) (store9 and resn gua and name o6)
         vector identify (store7) (store9 and resn gua and name n3)
         eval ($bresn = "GUA")
         eval ($batomname1 = "N7")
         eval ($batomname2 = "O6")
         eval ($batomname3 = "N3")
      elseif ($bcount = 23) then
         vector identify (store5) (store9 and resn uri and name c5)
         vector identify (store6) (store9 and resn uri and name o4)
         vector identify (store7) (store9 and resn uri and name o2)
         eval ($bresn = "URI")
         eval ($batomname1 = "C5")
         eval ($batomname2 = "O4")
         eval ($batomname3 = "O2")
      elseif ($bcount = 24) then
         vector identify (store5) (store9 and resn cyt and name c5)
         vector identify (store6) (store9 and resn cyt and name n4)
         vector identify (store7) (store9 and resn cyt and name o2)
         eval ($bresn = "CYT")
         eval ($batomname1 = "C5")
         eval ($batomname2 = "N4")
         eval ($batomname3 = "O2")
      elseif ($bcount = 25) then
         vector identify (store5) (store9 and name c2')
         vector identify (store6) (store9 and name c3')
         vector identify (store7) (store9 and name c4')
         eval ($bresn = "RIB")
         eval ($batomname1 = "C2'")
         eval ($batomname2 = "C3'")
         eval ($batomname3 = "C4'")
      elseif ($bcount = 26) then
         vector identify (store5) (store9 and name o1p)
         vector identify (store6) (store9 and name p)
         vector identify (store7) (store9 and name o5')
         eval ($bresn = "PHS")
         eval ($batomname1 = "O1P")
         eval ($batomname2 = "P")
         eval ($batomname3 = "O5'")
      else
         vector identify (store5) (store9 and resn error and name err1)
         vector identify (store6) (store9 and resn error and name err2)
         vector identify (store7) (store9 and resn error and name err3)
         eval ($bresn = "ERR")
         eval ($batomname1 = "E1")
         eval ($batomname2 = "E2")
         eval ($batomname3 = "E3")
      end if


      !
      ! enter assignments for DELPHIC positions of classes $a_$b_b1,$a_$b_b2, and $a_$b_b3
      !

      for $a in id (store1) loop a

         !
         ! get residue A number.
         !

	 vector show elem (segid) (id $a)
         eval ($asegid = $result)
	 vector show elem (resid) (id $a)
         eval ($aresid = $result)
         eval ($aresnum = decode($aresid))         

         for $b in id (store5) loop b

	    vector show elem (segid) (id $b)
            eval ($bsegid = $result)
            vector show elem (resid) (id $b)
            eval ($bresid = $result)
            eval ($bresnum = decode($bresid))

            !
            ! determine normal primary sequence distance from A to B
            !

            if ($asegid # $bsegid) then
               eval ($normpsd = 9999)
            else
               eval ($normpsd = $bresnum - $aresnum)
            end if

            !
            ! create normal-position pairings for everything 
	    ! with a normal (ie., non-Watson Crick) prim seq 
            ! dist > 1 or < -1 (ie., non-consecutive)
            !
            ! I'm not worried about the special rules for distance
            ! correction to phosphates or sugars, since I don't
            ! have surfaces for those anyway
            !

            eval ($okNormPair = "no")

            if ($normpsd > 1) then
               eval ($okNormPair = "yes")
            end if

            if ($normpsd < -1) then
               eval ($okNormPair = "yes")
            end if

            !
            ! enforce the cutoff distance rule
            !

            pick bond 
               (store2 and resid $aresid and segid $asegid)
               (store5 and resid $bresid and segid $bsegid)
            geom
            eval ($d1 = $result)

            pick bond 
               (store2 and resid $aresid and segid $asegid)
               (store6 and resid $bresid and segid $bsegid)
            geom
            eval ($d2 = $result)

            pick bond 
               (store2 and resid $aresid and segid $asegid)
               (store7 and resid $bresid and segid $bsegid)
            geom
            eval ($d3 = $result)

            eval ($okdistcutoff = "no")

            if ($d1 < $distcut) then
               eval ($okdistcutoff = "yes")
            end if

            if ($d2 < $distcut) then
               eval ($okdistcutoff = "yes")
            end if

            if ($d3 < $distcut) then
               eval ($okdistcutoff = "yes")
            end if

            if ($okdistcutoff = "no") then
               eval ($okNormPair = "no")
            end if

            if ($okNormPair = "yes") then
         
               eval ($name1 = "RNA_" + $aresn + "_" + $bresn + "_NONCONSEC_1")
               eval ($name2 = "RNA_" + $aresn + "_" + $bresn + "_NONCONSEC_2")
               eval ($name3 = "RNA_" + $aresn + "_" + $bresn + "_NONCONSEC_3")


               !
               ! syntax is:  Four selections to define the orienting and oriented atoms
               !

               orientation 
                  class $name1
                  assign (store1 and resid $aresid and segid $asegid) 
                         (store2 and resid $aresid and segid $asegid) 
                         (store3 and resid $aresid and segid $asegid) 
                         (store5 and resid $bresid and segid $bsegid) 
                  class $name2
                  assign (store1 and resid $aresid and segid $asegid)
                         (store2 and resid $aresid and segid $asegid) 
                         (store3 and resid $aresid and segid $asegid) 
                         (store6 and resid $bresid and segid $bsegid) 
                  class $name3
                  assign (store1 and resid $aresid and segid $asegid) 
                         (store2 and resid $aresid and segid $asegid) 
                         (store3 and resid $aresid and segid $asegid) 
                         (store7 and resid $bresid and segid $bsegid)
               end


            end if


         end loop b

      end loop a

   end loop bcount

end loop acount



!
! finis
!

set echo on message on end

