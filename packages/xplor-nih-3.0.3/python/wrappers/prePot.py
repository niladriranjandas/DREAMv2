# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_prePot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_prePot')
    _prePot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_prePot', [dirname(__file__)])
        except ImportError:
            import _prePot
            return _prePot
        try:
            _mod = imp.load_module('_prePot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _prePot = swig_import_helper()
    del swig_import_helper
else:
    import _prePot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _prePot.Modified_MOD_SELF
    MOD_SIMULATION = _prePot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _prePot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _prePot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _prePot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _prePot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _prePot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _prePot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _prePot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _prePot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_prePot.ModifiedBase_modified_get, _prePot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_prePot.ModifiedBase_registeredSimulations_get, _prePot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _prePot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _prePot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _prePot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _prePot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _prePot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_prePot.VarEnsWeights_ensWeights_get, _prePot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_prePot.VarEnsWeights_mult_get, _prePot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _prePot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prePot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _prePot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _prePot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _prePot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _prePot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _prePot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _prePot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _prePot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _prePot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _prePot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _prePot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _prePot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _prePot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _prePot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _prePot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _prePot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _prePot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _prePot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _prePot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _prePot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _prePot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _prePot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _prePot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _prePot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _prePot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _prePot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _prePot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prePot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _prePot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class PREPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _prePot.new_PREPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _prePot.PREPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _prePot.PREPot___ref__(self, *args, **kwargs)

    import ensembleSimulation
    def setTcType(self,val): self.setFixTauc( True if val=="fix" else False )
    def setTiType(self,val): self.setFixTaui( True if val=="fix" else False )
    def setTtType(self,val): self.setFixTaut( True if val=="fix" else False )
    def tcType(self): return "fix" if self.fixTauc() else "opt"
    def tiType(self): return "fix" if self.fixTaui() else "opt"
    def ttType(self): return "fix" if self.fixTaut() else "opt"
    def setTauC(self,val): self.setTauc(val)
    def setTauI(self,val): self.setTaui(val)
    def setTauT(self,val): self.setTaut(val)
    def force(self):
      return self.scale()
    def setForce(self,val):
      self.setScale(val)
    def tcOatom(self): return self.toAtom()
    def tcXatom(self): return self.taAtom()
    def tcYatom(self): return self.tbAtom()
    def ttOatom(self): return self.koAtom()
    def ttXatom(self): return self.kaAtom()
    def ttYatom(self): return self.kbAtom()
    def tiOatom(self): return self.ioAtom()
    def tiXatom(self): return self.iaAtom()
    def tiYatom(self): return self.ibAtom()
    def assignType(self): 
      "for backwards compatibility"
      ret="none"
      for r in self.restraints():
        if ret=="none": 
          ret = "normal" if r.isStereoAssigned() else "nonstereo"
        elif ( (ret=="normal" and not r.isStereoAssigned()) or
               (ret=="nonstereo" and  r.isStereoAssigned())   ):
          ret = "mixed";
      return ret


    def registerInstanceData(self, *args, **kwargs):
        return _prePot.PREPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _prePot.PREPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _prePot.PREPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _prePot.PREPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _prePot.PREPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _prePot.PREPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _prePot.delete_PREPot
    __del__ = lambda self: None

    def rho0(self, *args, **kwargs):
        return _prePot.PREPot_rho0(self, *args, **kwargs)

    def setRho0(self, *args, **kwargs):
        return _prePot.PREPot_setRho0(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _prePot.PREPot_addRestraints(self, *args, **kwargs)

    def mkSumRestraints(self, *args, **kwargs):
        return _prePot.PREPot_mkSumRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _prePot.PREPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _prePot.PREPot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _prePot.PREPot_energyMaybeDerivs2(self, *args, **kwargs)

    def AveSqObs(self, *args, **kwargs):
        return _prePot.PREPot_AveSqObs(self, *args, **kwargs)

    def weightedAveSqObs(self, *args, **kwargs):
        return _prePot.PREPot_weightedAveSqObs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _prePot.PREPot_rms(self, *args, **kwargs)

    def qFactor(self, *args, **kwargs):
        return _prePot.PREPot_qFactor(self, *args, **kwargs)

    def Qfactor(self, *args, **kwargs):
        return _prePot.PREPot_Qfactor(self, *args, **kwargs)

    def weightedQFactor(self, *args, **kwargs):
        return _prePot.PREPot_weightedQFactor(self, *args, **kwargs)

    def rFactor(self, *args, **kwargs):
        return _prePot.PREPot_rFactor(self, *args, **kwargs)

    def Rfactor(self, *args, **kwargs):
        return _prePot.PREPot_Rfactor(self, *args, **kwargs)

    def aveS2(self, *args, **kwargs):
        return _prePot.PREPot_aveS2(self, *args, **kwargs)

    def minS2(self, *args, **kwargs):
        return _prePot.PREPot_minS2(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _prePot.PREPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _prePot.PREPot_numRestraints(self, *args, **kwargs)
    ave_calcd = _swig_property(_prePot.PREPot_ave_calcd_get, _prePot.PREPot_ave_calcd_set)
    ave_obs = _swig_property(_prePot.PREPot_ave_obs_get, _prePot.PREPot_ave_obs_set)
    sumObs2 = _swig_property(_prePot.PREPot_sumObs2_get, _prePot.PREPot_sumObs2_set)
    sumCalcd2 = _swig_property(_prePot.PREPot_sumCalcd2_get, _prePot.PREPot_sumCalcd2_set)
    num = _swig_property(_prePot.PREPot_num_get, _prePot.PREPot_num_set)
    denom = _swig_property(_prePot.PREPot_denom_get, _prePot.PREPot_denom_set)
    corr = _swig_property(_prePot.PREPot_corr_get, _prePot.PREPot_corr_set)
    nCorr = _swig_property(_prePot.PREPot_nCorr_get, _prePot.PREPot_nCorr_set)

    def correlation(self, *args, **kwargs):
        return _prePot.PREPot_correlation(self, *args, **kwargs)

    def restraintsSize(self, *args, **kwargs):
        return _prePot.PREPot_restraintsSize(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _prePot.PREPot_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _prePot.PREPot_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _prePot.PREPot_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _prePot.PREPot_restraints(self, *args, **kwargs)

    def fixTauc(self, *args, **kwargs):
        return _prePot.PREPot_fixTauc(self, *args, **kwargs)

    def setFixTauc(self, *args, **kwargs):
        return _prePot.PREPot_setFixTauc(self, *args, **kwargs)

    def fixTaut(self, *args, **kwargs):
        return _prePot.PREPot_fixTaut(self, *args, **kwargs)

    def setFixTaut(self, *args, **kwargs):
        return _prePot.PREPot_setFixTaut(self, *args, **kwargs)

    def fixTaui(self, *args, **kwargs):
        return _prePot.PREPot_fixTaui(self, *args, **kwargs)

    def setFixTaui(self, *args, **kwargs):
        return _prePot.PREPot_setFixTaui(self, *args, **kwargs)

    def mScale(self, *args, **kwargs):
        return _prePot.PREPot_mScale(self, *args, **kwargs)

    def setMScale(self, *args, **kwargs):
        return _prePot.PREPot_setMScale(self, *args, **kwargs)

    def hardExp(self, *args, **kwargs):
        return _prePot.PREPot_hardExp(self, *args, **kwargs)

    def setHardExp(self, *args, **kwargs):
        return _prePot.PREPot_setHardExp(self, *args, **kwargs)

    def rSwitch(self, *args, **kwargs):
        return _prePot.PREPot_rSwitch(self, *args, **kwargs)

    def setRSwitch(self, *args, **kwargs):
        return _prePot.PREPot_setRSwitch(self, *args, **kwargs)

    def softExp(self, *args, **kwargs):
        return _prePot.PREPot_softExp(self, *args, **kwargs)

    def setSoftExp(self, *args, **kwargs):
        return _prePot.PREPot_setSoftExp(self, *args, **kwargs)

    def asympSlope(self, *args, **kwargs):
        return _prePot.PREPot_asympSlope(self, *args, **kwargs)

    def setAsympSlope(self, *args, **kwargs):
        return _prePot.PREPot_setAsympSlope(self, *args, **kwargs)

    def ensInterconvert(self, *args, **kwargs):
        return _prePot.PREPot_ensInterconvert(self, *args, **kwargs)

    def setEnsInterconvert(self, *args, **kwargs):
        return _prePot.PREPot_setEnsInterconvert(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _prePot.PREPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _prePot.PREPot_setVerbose(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _prePot.PREPot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _prePot.PREPot_setShowAllRestraints(self, *args, **kwargs)

    def useDistMult(self, *args, **kwargs):
        return _prePot.PREPot_useDistMult(self, *args, **kwargs)

    def setUseDistMult(self, *args, **kwargs):
        return _prePot.PREPot_setUseDistMult(self, *args, **kwargs)
    distMult_ = _swig_property(_prePot.PREPot_distMult__get, _prePot.PREPot_distMult__set)

    def distMult(self, *args, **kwargs):
        return _prePot.PREPot_distMult(self, *args, **kwargs)

    def setDistMult(self, *args, **kwargs):
        return _prePot.PREPot_setDistMult(self, *args, **kwargs)

    def npc(self, *args, **kwargs):
        return _prePot.PREPot_npc(self, *args, **kwargs)

    def setNpc(self, *args, **kwargs):
        return _prePot.PREPot_setNpc(self, *args, **kwargs)

    def expTemp(self, *args, **kwargs):
        return _prePot.PREPot_expTemp(self, *args, **kwargs)

    def setExpTemp(self, *args, **kwargs):
        return _prePot.PREPot_setExpTemp(self, *args, **kwargs)

    def taur(self, *args, **kwargs):
        return _prePot.PREPot_taur(self, *args, **kwargs)

    def setTauR(self, *args, **kwargs):
        return _prePot.PREPot_setTauR(self, *args, **kwargs)

    def tauc(self, *args, **kwargs):
        return _prePot.PREPot_tauc(self, *args, **kwargs)

    def setTauc(self, *args, **kwargs):
        return _prePot.PREPot_setTauc(self, *args, **kwargs)

    def taut(self, *args, **kwargs):
        return _prePot.PREPot_taut(self, *args, **kwargs)

    def setTaut(self, *args, **kwargs):
        return _prePot.PREPot_setTaut(self, *args, **kwargs)

    def taui(self, *args, **kwargs):
        return _prePot.PREPot_taui(self, *args, **kwargs)

    def setTaui(self, *args, **kwargs):
        return _prePot.PREPot_setTaui(self, *args, **kwargs)

    def freqI(self, *args, **kwargs):
        return _prePot.PREPot_freqI(self, *args, **kwargs)

    def setFreqI(self, *args, **kwargs):
        return _prePot.PREPot_setFreqI(self, *args, **kwargs)

    def sqn(self, *args, **kwargs):
        return _prePot.PREPot_sqn(self, *args, **kwargs)

    def setSqn(self, *args, **kwargs):
        return _prePot.PREPot_setSqn(self, *args, **kwargs)

    def gfac(self, *args, **kwargs):
        return _prePot.PREPot_gfac(self, *args, **kwargs)

    def setGfac(self, *args, **kwargs):
        return _prePot.PREPot_setGfac(self, *args, **kwargs)

    def gammaI(self, *args, **kwargs):
        return _prePot.PREPot_gammaI(self, *args, **kwargs)

    def setGammaI(self, *args, **kwargs):
        return _prePot.PREPot_setGammaI(self, *args, **kwargs)

    def aveSize(self, *args, **kwargs):
        return _prePot.PREPot_aveSize(self, *args, **kwargs)

    def setAveSize(self, *args, **kwargs):
        return _prePot.PREPot_setAveSize(self, *args, **kwargs)

    def weightMax(self, *args, **kwargs):
        return _prePot.PREPot_weightMax(self, *args, **kwargs)

    def setWeightMax(self, *args, **kwargs):
        return _prePot.PREPot_setWeightMax(self, *args, **kwargs)

    def tcMax(self, *args, **kwargs):
        return _prePot.PREPot_tcMax(self, *args, **kwargs)

    def setTcMax(self, *args, **kwargs):
        return _prePot.PREPot_setTcMax(self, *args, **kwargs)

    def tcMin(self, *args, **kwargs):
        return _prePot.PREPot_tcMin(self, *args, **kwargs)

    def setTcMin(self, *args, **kwargs):
        return _prePot.PREPot_setTcMin(self, *args, **kwargs)

    def taAtom(self, *args, **kwargs):
        return _prePot.PREPot_taAtom(self, *args, **kwargs)

    def setTaAtom(self, *args, **kwargs):
        return _prePot.PREPot_setTaAtom(self, *args, **kwargs)

    def tbAtom(self, *args, **kwargs):
        return _prePot.PREPot_tbAtom(self, *args, **kwargs)

    def setTbAtom(self, *args, **kwargs):
        return _prePot.PREPot_setTbAtom(self, *args, **kwargs)

    def toAtom(self, *args, **kwargs):
        return _prePot.PREPot_toAtom(self, *args, **kwargs)

    def setToAtom(self, *args, **kwargs):
        return _prePot.PREPot_setToAtom(self, *args, **kwargs)

    def kaAtom(self, *args, **kwargs):
        return _prePot.PREPot_kaAtom(self, *args, **kwargs)

    def setKaAtom(self, *args, **kwargs):
        return _prePot.PREPot_setKaAtom(self, *args, **kwargs)

    def kbAtom(self, *args, **kwargs):
        return _prePot.PREPot_kbAtom(self, *args, **kwargs)

    def setKbAtom(self, *args, **kwargs):
        return _prePot.PREPot_setKbAtom(self, *args, **kwargs)

    def koAtom(self, *args, **kwargs):
        return _prePot.PREPot_koAtom(self, *args, **kwargs)

    def setKoAtom(self, *args, **kwargs):
        return _prePot.PREPot_setKoAtom(self, *args, **kwargs)

    def tiMax(self, *args, **kwargs):
        return _prePot.PREPot_tiMax(self, *args, **kwargs)

    def setTiMax(self, *args, **kwargs):
        return _prePot.PREPot_setTiMax(self, *args, **kwargs)

    def tiMin(self, *args, **kwargs):
        return _prePot.PREPot_tiMin(self, *args, **kwargs)

    def setTiMin(self, *args, **kwargs):
        return _prePot.PREPot_setTiMin(self, *args, **kwargs)

    def iaAtom(self, *args, **kwargs):
        return _prePot.PREPot_iaAtom(self, *args, **kwargs)

    def setIaAtom(self, *args, **kwargs):
        return _prePot.PREPot_setIaAtom(self, *args, **kwargs)

    def ibAtom(self, *args, **kwargs):
        return _prePot.PREPot_ibAtom(self, *args, **kwargs)

    def setIbAtom(self, *args, **kwargs):
        return _prePot.PREPot_setIbAtom(self, *args, **kwargs)

    def ioAtom(self, *args, **kwargs):
        return _prePot.PREPot_ioAtom(self, *args, **kwargs)

    def setIoAtom(self, *args, **kwargs):
        return _prePot.PREPot_setIoAtom(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _prePot.PREPot_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _prePot.PREPot_setPotType(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _prePot.PREPot_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _prePot.PREPot_setAveType(self, *args, **kwargs)

    def rlxType(self, *args, **kwargs):
        return _prePot.PREPot_rlxType(self, *args, **kwargs)

    def setRlxType(self, *args, **kwargs):
        return _prePot.PREPot_setRlxType(self, *args, **kwargs)

    def funType(self, *args, **kwargs):
        return _prePot.PREPot_funType(self, *args, **kwargs)

    def setFunType(self, *args, **kwargs):
        return _prePot.PREPot_setFunType(self, *args, **kwargs)

    def sclType(self, *args, **kwargs):
        return _prePot.PREPot_sclType(self, *args, **kwargs)

    def setSclType(self, *args, **kwargs):
        return _prePot.PREPot_setSclType(self, *args, **kwargs)

    def equType(self, *args, **kwargs):
        return _prePot.PREPot_equType(self, *args, **kwargs)

    def setEquType(self, *args, **kwargs):
        return _prePot.PREPot_setEquType(self, *args, **kwargs)

    def checkClockAtoms(self, *args, **kwargs):
        return _prePot.PREPot_checkClockAtoms(self, *args, **kwargs)

    def setTaucAtoms(self, *args, **kwargs):
        return _prePot.PREPot_setTaucAtoms(self, *args, **kwargs)

    def setTautAtoms(self, *args, **kwargs):
        return _prePot.PREPot_setTautAtoms(self, *args, **kwargs)

    def showCurrentTaut(self, *args, **kwargs):
        return _prePot.PREPot_showCurrentTaut(self, *args, **kwargs)

    def setTauiAtoms(self, *args, **kwargs):
        return _prePot.PREPot_setTauiAtoms(self, *args, **kwargs)

    def showCurrentTaui(self, *args, **kwargs):
        return _prePot.PREPot_showCurrentTaui(self, *args, **kwargs)

    def sbmfType(self, *args, **kwargs):
        return _prePot.PREPot_sbmfType(self, *args, **kwargs)

    def setSbmfType(self, *args, **kwargs):
        return _prePot.PREPot_setSbmfType(self, *args, **kwargs)

    def coeff(self, *args, **kwargs):
        return _prePot.PREPot_coeff(self, *args, **kwargs)

    def coeff2(self, *args, **kwargs):
        return _prePot.PREPot_coeff2(self, *args, **kwargs)

    def kForOpt(self, *args, **kwargs):
        return _prePot.PREPot_kForOpt(self, *args, **kwargs)

    def setCoeff(self, *args, **kwargs):
        return _prePot.PREPot_setCoeff(self, *args, **kwargs)

    def tc(self, *args, **kwargs):
        return _prePot.PREPot_tc(self, *args, **kwargs)

    def tt(self, *args, **kwargs):
        return _prePot.PREPot_tt(self, *args, **kwargs)

    def ti(self, *args, **kwargs):
        return _prePot.PREPot_ti(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _prePot.PREPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _prePot.PREPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _prePot.PREPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _prePot.PREPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _prePot.PREPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _prePot.PREPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _prePot.PREPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _prePot.PREPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _prePot.PREPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _prePot.PREPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _prePot.PREPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _prePot.PREPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _prePot.PREPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _prePot.PREPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _prePot.PREPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _prePot.PREPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _prePot.PREPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _prePot.PREPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _prePot.PREPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _prePot.PREPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _prePot.PREPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _prePot.PREPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _prePot.PREPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _prePot.PREPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _prePot.PREPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _prePot.PREPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _prePot.PREPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _prePot.PREPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _prePot.PREPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _prePot.PREPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_prePot.PREPot_instanceData__get, _prePot.PREPot_instanceData__set)
    instanceDataCreate = _swig_property(_prePot.PREPot_instanceDataCreate_get, _prePot.PREPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_prePot.PREPot_instanceDataCleanup_get, _prePot.PREPot_instanceDataCleanup_set)
    modified = _swig_property(_prePot.PREPot_modified_get, _prePot.PREPot_modified_set)
    registeredSimulations = _swig_property(_prePot.PREPot_registeredSimulations_get, _prePot.PREPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _prePot.PREPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _prePot.PREPot_unRegister(self, *args, **kwargs)

class PREPotPtr(PREPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PREPot

PREPot_swigregister = _prePot.PREPot_swigregister
PREPot_swigregister(PREPot)


realPREPot = PREPot
def PREPot(*args):
    from potProxy import PotProxy
    return PotProxy( realPREPot(*args) )

class Restraint_PREPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _prePot.Restraint_PREPot_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _prePot.new_Restraint_PREPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _prePot.Restraint_PREPot_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _prePot.Restraint_PREPot_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _prePot.Restraint_PREPot_setName(self, *args, **kwargs)
    __swig_destroy__ = _prePot.delete_Restraint_PREPot
    __del__ = lambda self: None

class Restraint_PREPotPtr(Restraint_PREPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_PREPot

Restraint_PREPot_swigregister = _prePot.Restraint_PREPot_swigregister
Restraint_PREPot_swigregister(Restraint_PREPot)

class PRERestraint(Restraint_PREPot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LESS = _prePot.PRERestraint_LESS
    GREATER = _prePot.PRERestraint_GREATER
    INSIDE = _prePot.PRERestraint_INSIDE
    EM1 = _prePot.PRERestraint_EM1
    EM2 = _prePot.PRERestraint_EM2
    EM3 = _prePot.PRERestraint_EM3
    FOR_TC = _prePot.PRERestraint_FOR_TC
    FOR_TT = _prePot.PRERestraint_FOR_TT
    FOR_TI = _prePot.PRERestraint_FOR_TI
    sel1 = _swig_property(_prePot.PRERestraint_sel1_get, _prePot.PRERestraint_sel1_set)
    sel2 = _swig_property(_prePot.PRERestraint_sel2_get, _prePot.PRERestraint_sel2_set)
    sel3 = _swig_property(_prePot.PRERestraint_sel3_get, _prePot.PRERestraint_sel3_set)
    verbose = _swig_property(_prePot.PRERestraint_verbose_get, _prePot.PRERestraint_verbose_set)

    def __init__(self, *args):
        this = _prePot.new_PRERestraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prePot.delete_PRERestraint
    __del__ = lambda self: None

    def contrib(self, *args, **kwargs):
        return _prePot.PRERestraint_contrib(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _prePot.PRERestraint_calcd(self, *args, **kwargs)

    def status(self, *args, **kwargs):
        return _prePot.PRERestraint_status(self, *args, **kwargs)

    def emstatus(self, *args, **kwargs):
        return _prePot.PRERestraint_emstatus(self, *args, **kwargs)
    sumList = _swig_property(_prePot.PRERestraint_sumList_get, _prePot.PRERestraint_sumList_set)

    def setEmStatus(self, *args, **kwargs):
        return _prePot.PRERestraint_setEmStatus(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _prePot.PRERestraint_obs(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _prePot.PRERestraint_err(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _prePot.PRERestraint_setObs(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _prePot.PRERestraint_setErr(self, *args, **kwargs)

    def isStereoAssigned(self, *args, **kwargs):
        return _prePot.PRERestraint_isStereoAssigned(self, *args, **kwargs)

    def setIsStereoAssigned(self, *args, **kwargs):
        return _prePot.PRERestraint_setIsStereoAssigned(self, *args, **kwargs)

    def weight(self, *args, **kwargs):
        return _prePot.PRERestraint_weight(self, *args, **kwargs)

    def setWeight(self, *args, **kwargs):
        return _prePot.PRERestraint_setWeight(self, *args, **kwargs)

    def s2angular(self, *args, **kwargs):
        return _prePot.PRERestraint_s2angular(self, *args, **kwargs)

    def s2radial(self, *args, **kwargs):
        return _prePot.PRERestraint_s2radial(self, *args, **kwargs)

    def s2(self, *args, **kwargs):
        return _prePot.PRERestraint_s2(self, *args, **kwargs)

    def reff(self, *args, **kwargs):
        return _prePot.PRERestraint_reff(self, *args, **kwargs)

    def setMF_contrib(self, *args, **kwargs):
        return _prePot.PRERestraint_setMF_contrib(self, *args, **kwargs)

    def setMF(self, *args, **kwargs):
        return _prePot.PRERestraint_setMF(self, *args, **kwargs)

    def contribB(self, *args, **kwargs):
        return _prePot.PRERestraint_contribB(self, *args, **kwargs)

    def calcd2(self, *args, **kwargs):
        return _prePot.PRERestraint_calcd2(self, *args, **kwargs)

    def obs2(self, *args, **kwargs):
        return _prePot.PRERestraint_obs2(self, *args, **kwargs)

    def err2(self, *args, **kwargs):
        return _prePot.PRERestraint_err2(self, *args, **kwargs)

    def reffB(self, *args, **kwargs):
        return _prePot.PRERestraint_reffB(self, *args, **kwargs)

    def s2angularB(self, *args, **kwargs):
        return _prePot.PRERestraint_s2angularB(self, *args, **kwargs)

    def s2radialB(self, *args, **kwargs):
        return _prePot.PRERestraint_s2radialB(self, *args, **kwargs)

    def s2B(self, *args, **kwargs):
        return _prePot.PRERestraint_s2B(self, *args, **kwargs)

    def sumAB(self, *args, **kwargs):
        return _prePot.PRERestraint_sumAB(self, *args, **kwargs)

    def difAB(self, *args, **kwargs):
        return _prePot.PRERestraint_difAB(self, *args, **kwargs)

    def smallObs(self, *args, **kwargs):
        return _prePot.PRERestraint_smallObs(self, *args, **kwargs)

    def largeObs(self, *args, **kwargs):
        return _prePot.PRERestraint_largeObs(self, *args, **kwargs)

    def smallCalc(self, *args, **kwargs):
        return _prePot.PRERestraint_smallCalc(self, *args, **kwargs)

    def largeCalc(self, *args, **kwargs):
        return _prePot.PRERestraint_largeCalc(self, *args, **kwargs)

    def sumTerms(self, *args, **kwargs):
        return _prePot.PRERestraint_sumTerms(self, *args, **kwargs)

    def sumWeight(self, *args, **kwargs):
        return _prePot.PRERestraint_sumWeight(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _prePot.PRERestraint_comment(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _prePot.PRERestraint_calcContrib(self, *args, **kwargs)

    def calcGamma(self, *args, **kwargs):
        return _prePot.PRERestraint_calcGamma(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _prePot.PRERestraint_energy(self, *args, **kwargs)

    def energyNonStereo(self, *args, **kwargs):
        return _prePot.PRERestraint_energyNonStereo(self, *args, **kwargs)

    def kdfsb(self, *args, **kwargs):
        return _prePot.PRERestraint_kdfsb(self, *args, **kwargs)

    def dtdp(self, *args, **kwargs):
        return _prePot.PRERestraint_dtdp(self, *args, **kwargs)

    def setClockDeriv(self, *args, **kwargs):
        return _prePot.PRERestraint_setClockDeriv(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _prePot.PRERestraint_deriv(self, *args, **kwargs)

    def asString(self, *args, **kwargs):
        return _prePot.PRERestraint_asString(self, *args, **kwargs)

    def setWF(self,val): self.setWeight( val )
    def gamma(self): return self.calcd()
    def gammaB(self): return self.calcd2()
    def g(self): return self.obs()
    def gSigma(self): return self.err()
    def gB(self): return self.obs2()
    def gBSigma(self): return self.err2()


class PRERestraintPtr(PRERestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PRERestraint

PRERestraint_swigregister = _prePot.PRERestraint_swigregister
PRERestraint_swigregister(PRERestraint)

class PREPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SOFT = _prePot.PREPot_LetterClass_SOFT
    HARD = _prePot.PREPot_LetterClass_HARD
    R_6 = _prePot.PREPot_LetterClass_R_6
    SUM = _prePot.PREPot_LetterClass_SUM
    R2DD = _prePot.PREPot_LetterClass_R2DD
    R2CURIE = _prePot.PREPot_LetterClass_R2CURIE
    R2MIX = _prePot.PREPot_LetterClass_R2MIX
    R1DD = _prePot.PREPot_LetterClass_R1DD
    R1CURIE = _prePot.PREPot_LetterClass_R1CURIE
    R1MIX = _prePot.PREPot_LetterClass_R1MIX
    SQUARE = _prePot.PREPot_LetterClass_SQUARE
    HARMONIC = _prePot.PREPot_LetterClass_HARMONIC
    ONESIXTH = _prePot.PREPot_LetterClass_ONESIXTH
    CORRELATION = _prePot.PREPot_LetterClass_CORRELATION
    CONST = _prePot.PREPot_LetterClass_CONST
    SIGMA = _prePot.PREPot_LetterClass_SIGMA
    OBSIG = _prePot.PREPot_LetterClass_OBSIG
    SB = _prePot.PREPot_LetterClass_SB
    SBMF = _prePot.PREPot_LetterClass_SBMF
    TTMODE = _prePot.PREPot_LetterClass_TTMODE
    TIMODE = _prePot.PREPot_LetterClass_TIMODE
    FAST = _prePot.PREPot_LetterClass_FAST
    SLOW = _prePot.PREPot_LetterClass_SLOW

    def rho0(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_rho0(self, *args, **kwargs)

    def setRho0(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setRho0(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _prePot.new_PREPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prePot.delete_PREPot_LetterClass
    __del__ = lambda self: None

    def addRestraints(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_addRestraints(self, *args, **kwargs)

    def mkSumRestraints(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_mkSumRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_energyMaybeDerivs2(self, *args, **kwargs)

    def AveSqObs(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_AveSqObs(self, *args, **kwargs)

    def weightedAveSqObs(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_weightedAveSqObs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_rms(self, *args, **kwargs)

    def qFactor(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_qFactor(self, *args, **kwargs)

    def Qfactor(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_Qfactor(self, *args, **kwargs)

    def weightedQFactor(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_weightedQFactor(self, *args, **kwargs)

    def rFactor(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_rFactor(self, *args, **kwargs)

    def Rfactor(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_Rfactor(self, *args, **kwargs)

    def aveS2(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_aveS2(self, *args, **kwargs)

    def minS2(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_minS2(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_numRestraints(self, *args, **kwargs)
    ave_calcd = _swig_property(_prePot.PREPot_LetterClass_ave_calcd_get, _prePot.PREPot_LetterClass_ave_calcd_set)
    ave_obs = _swig_property(_prePot.PREPot_LetterClass_ave_obs_get, _prePot.PREPot_LetterClass_ave_obs_set)
    sumObs2 = _swig_property(_prePot.PREPot_LetterClass_sumObs2_get, _prePot.PREPot_LetterClass_sumObs2_set)
    sumCalcd2 = _swig_property(_prePot.PREPot_LetterClass_sumCalcd2_get, _prePot.PREPot_LetterClass_sumCalcd2_set)
    num = _swig_property(_prePot.PREPot_LetterClass_num_get, _prePot.PREPot_LetterClass_num_set)
    denom = _swig_property(_prePot.PREPot_LetterClass_denom_get, _prePot.PREPot_LetterClass_denom_set)
    corr = _swig_property(_prePot.PREPot_LetterClass_corr_get, _prePot.PREPot_LetterClass_corr_set)
    nCorr = _swig_property(_prePot.PREPot_LetterClass_nCorr_get, _prePot.PREPot_LetterClass_nCorr_set)

    def correlation(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_correlation(self, *args, **kwargs)

    def restraintsSize(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_restraintsSize(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_restraints(self, *args, **kwargs)

    def fixTauc(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_fixTauc(self, *args, **kwargs)

    def setFixTauc(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setFixTauc(self, *args, **kwargs)

    def fixTaut(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_fixTaut(self, *args, **kwargs)

    def setFixTaut(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setFixTaut(self, *args, **kwargs)

    def fixTaui(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_fixTaui(self, *args, **kwargs)

    def setFixTaui(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setFixTaui(self, *args, **kwargs)

    def mScale(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_mScale(self, *args, **kwargs)

    def setMScale(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setMScale(self, *args, **kwargs)

    def hardExp(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_hardExp(self, *args, **kwargs)

    def setHardExp(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setHardExp(self, *args, **kwargs)

    def rSwitch(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_rSwitch(self, *args, **kwargs)

    def setRSwitch(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setRSwitch(self, *args, **kwargs)

    def softExp(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_softExp(self, *args, **kwargs)

    def setSoftExp(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setSoftExp(self, *args, **kwargs)

    def asympSlope(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_asympSlope(self, *args, **kwargs)

    def setAsympSlope(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setAsympSlope(self, *args, **kwargs)

    def ensInterconvert(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_ensInterconvert(self, *args, **kwargs)

    def setEnsInterconvert(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setEnsInterconvert(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setVerbose(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def useDistMult(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_useDistMult(self, *args, **kwargs)

    def setUseDistMult(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setUseDistMult(self, *args, **kwargs)
    distMult_ = _swig_property(_prePot.PREPot_LetterClass_distMult__get, _prePot.PREPot_LetterClass_distMult__set)

    def distMult(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_distMult(self, *args, **kwargs)

    def setDistMult(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setDistMult(self, *args, **kwargs)

    def npc(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_npc(self, *args, **kwargs)

    def setNpc(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setNpc(self, *args, **kwargs)

    def expTemp(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_expTemp(self, *args, **kwargs)

    def setExpTemp(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setExpTemp(self, *args, **kwargs)

    def taur(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_taur(self, *args, **kwargs)

    def setTauR(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTauR(self, *args, **kwargs)

    def tauc(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_tauc(self, *args, **kwargs)

    def setTauc(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTauc(self, *args, **kwargs)

    def taut(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_taut(self, *args, **kwargs)

    def setTaut(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTaut(self, *args, **kwargs)

    def taui(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_taui(self, *args, **kwargs)

    def setTaui(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTaui(self, *args, **kwargs)

    def freqI(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_freqI(self, *args, **kwargs)

    def setFreqI(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setFreqI(self, *args, **kwargs)

    def sqn(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_sqn(self, *args, **kwargs)

    def setSqn(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setSqn(self, *args, **kwargs)

    def gfac(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_gfac(self, *args, **kwargs)

    def setGfac(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setGfac(self, *args, **kwargs)

    def gammaI(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_gammaI(self, *args, **kwargs)

    def setGammaI(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setGammaI(self, *args, **kwargs)

    def aveSize(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_aveSize(self, *args, **kwargs)

    def setAveSize(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setAveSize(self, *args, **kwargs)

    def weightMax(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_weightMax(self, *args, **kwargs)

    def setWeightMax(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setWeightMax(self, *args, **kwargs)

    def tcMax(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_tcMax(self, *args, **kwargs)

    def setTcMax(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTcMax(self, *args, **kwargs)

    def tcMin(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_tcMin(self, *args, **kwargs)

    def setTcMin(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTcMin(self, *args, **kwargs)

    def taAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_taAtom(self, *args, **kwargs)

    def setTaAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTaAtom(self, *args, **kwargs)

    def tbAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_tbAtom(self, *args, **kwargs)

    def setTbAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTbAtom(self, *args, **kwargs)

    def toAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_toAtom(self, *args, **kwargs)

    def setToAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setToAtom(self, *args, **kwargs)

    def kaAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_kaAtom(self, *args, **kwargs)

    def setKaAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setKaAtom(self, *args, **kwargs)

    def kbAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_kbAtom(self, *args, **kwargs)

    def setKbAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setKbAtom(self, *args, **kwargs)

    def koAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_koAtom(self, *args, **kwargs)

    def setKoAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setKoAtom(self, *args, **kwargs)

    def tiMax(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_tiMax(self, *args, **kwargs)

    def setTiMax(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTiMax(self, *args, **kwargs)

    def tiMin(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_tiMin(self, *args, **kwargs)

    def setTiMin(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTiMin(self, *args, **kwargs)

    def iaAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_iaAtom(self, *args, **kwargs)

    def setIaAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setIaAtom(self, *args, **kwargs)

    def ibAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_ibAtom(self, *args, **kwargs)

    def setIbAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setIbAtom(self, *args, **kwargs)

    def ioAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_ioAtom(self, *args, **kwargs)

    def setIoAtom(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setIoAtom(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setPotType(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setAveType(self, *args, **kwargs)

    def rlxType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_rlxType(self, *args, **kwargs)

    def setRlxType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setRlxType(self, *args, **kwargs)

    def funType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_funType(self, *args, **kwargs)

    def setFunType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setFunType(self, *args, **kwargs)

    def sclType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_sclType(self, *args, **kwargs)

    def setSclType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setSclType(self, *args, **kwargs)

    def equType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_equType(self, *args, **kwargs)

    def setEquType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setEquType(self, *args, **kwargs)

    def checkClockAtoms(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_checkClockAtoms(self, *args, **kwargs)

    def setTaucAtoms(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTaucAtoms(self, *args, **kwargs)

    def setTautAtoms(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTautAtoms(self, *args, **kwargs)

    def showCurrentTaut(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_showCurrentTaut(self, *args, **kwargs)

    def setTauiAtoms(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setTauiAtoms(self, *args, **kwargs)

    def showCurrentTaui(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_showCurrentTaui(self, *args, **kwargs)

    def sbmfType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_sbmfType(self, *args, **kwargs)

    def setSbmfType(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setSbmfType(self, *args, **kwargs)

    def coeff(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_coeff(self, *args, **kwargs)

    def coeff2(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_coeff2(self, *args, **kwargs)

    def kForOpt(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_kForOpt(self, *args, **kwargs)

    def setCoeff(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_setCoeff(self, *args, **kwargs)

    def tc(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_tc(self, *args, **kwargs)

    def tt(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_tt(self, *args, **kwargs)

    def ti(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_ti(self, *args, **kwargs)

    import ensembleSimulation
    def setTcType(self,val): self.setFixTauc( True if val=="fix" else False )
    def setTiType(self,val): self.setFixTaui( True if val=="fix" else False )
    def setTtType(self,val): self.setFixTaut( True if val=="fix" else False )
    def tcType(self): return "fix" if self.fixTauc() else "opt"
    def tiType(self): return "fix" if self.fixTaui() else "opt"
    def ttType(self): return "fix" if self.fixTaut() else "opt"
    def setTauC(self,val): self.setTauc(val)
    def setTauI(self,val): self.setTaui(val)
    def setTauT(self,val): self.setTaut(val)
    def force(self):
      return self.scale()
    def setForce(self,val):
      self.setScale(val)
    def tcOatom(self): return self.toAtom()
    def tcXatom(self): return self.taAtom()
    def tcYatom(self): return self.tbAtom()
    def ttOatom(self): return self.koAtom()
    def ttXatom(self): return self.kaAtom()
    def ttYatom(self): return self.kbAtom()
    def tiOatom(self): return self.ioAtom()
    def tiXatom(self): return self.iaAtom()
    def tiYatom(self): return self.ibAtom()
    def assignType(self): 
      "for backwards compatibility"
      ret="none"
      for r in self.restraints():
        if ret=="none": 
          ret = "normal" if r.isStereoAssigned() else "nonstereo"
        elif ( (ret=="normal" and not r.isStereoAssigned()) or
               (ret=="nonstereo" and  r.isStereoAssigned())   ):
          ret = "mixed";
      return ret


    def help(self, *args, **kwargs):
        return _prePot.PREPot_LetterClass_help(self, *args, **kwargs)

class PREPot_LetterClassPtr(PREPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PREPot_LetterClass

PREPot_LetterClass_swigregister = _prePot.PREPot_LetterClass_swigregister
PREPot_LetterClass_swigregister(PREPot_LetterClass)

class rc_ptr_PRERestraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _prePot.new_rc_ptr_PRERestraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _prePot.delete_rc_ptr_PRERestraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_release(self, *args, **kwargs)

    def setWF(self,val): self.setWeight( val )
    def gamma(self): return self.calcd()
    def gammaB(self): return self.calcd2()
    def g(self): return self.obs()
    def gSigma(self): return self.err()
    def gB(self): return self.obs2()
    def gBSigma(self): return self.err2()

    sel1 = _swig_property(_prePot.rc_ptr_PRERestraint_sel1_get, _prePot.rc_ptr_PRERestraint_sel1_set)
    sel2 = _swig_property(_prePot.rc_ptr_PRERestraint_sel2_get, _prePot.rc_ptr_PRERestraint_sel2_set)
    sel3 = _swig_property(_prePot.rc_ptr_PRERestraint_sel3_get, _prePot.rc_ptr_PRERestraint_sel3_set)
    verbose = _swig_property(_prePot.rc_ptr_PRERestraint_verbose_get, _prePot.rc_ptr_PRERestraint_verbose_set)

    def contrib(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_contrib(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_calcd(self, *args, **kwargs)

    def status(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_status(self, *args, **kwargs)

    def emstatus(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_emstatus(self, *args, **kwargs)
    sumList = _swig_property(_prePot.rc_ptr_PRERestraint_sumList_get, _prePot.rc_ptr_PRERestraint_sumList_set)

    def setEmStatus(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_setEmStatus(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_obs(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_err(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_setObs(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_setErr(self, *args, **kwargs)

    def isStereoAssigned(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_isStereoAssigned(self, *args, **kwargs)

    def setIsStereoAssigned(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_setIsStereoAssigned(self, *args, **kwargs)

    def weight(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_weight(self, *args, **kwargs)

    def setWeight(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_setWeight(self, *args, **kwargs)

    def s2angular(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_s2angular(self, *args, **kwargs)

    def s2radial(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_s2radial(self, *args, **kwargs)

    def s2(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_s2(self, *args, **kwargs)

    def reff(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_reff(self, *args, **kwargs)

    def setMF_contrib(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_setMF_contrib(self, *args, **kwargs)

    def setMF(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_setMF(self, *args, **kwargs)

    def contribB(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_contribB(self, *args, **kwargs)

    def calcd2(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_calcd2(self, *args, **kwargs)

    def obs2(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_obs2(self, *args, **kwargs)

    def err2(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_err2(self, *args, **kwargs)

    def reffB(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_reffB(self, *args, **kwargs)

    def s2angularB(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_s2angularB(self, *args, **kwargs)

    def s2radialB(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_s2radialB(self, *args, **kwargs)

    def s2B(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_s2B(self, *args, **kwargs)

    def sumAB(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_sumAB(self, *args, **kwargs)

    def difAB(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_difAB(self, *args, **kwargs)

    def smallObs(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_smallObs(self, *args, **kwargs)

    def largeObs(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_largeObs(self, *args, **kwargs)

    def smallCalc(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_smallCalc(self, *args, **kwargs)

    def largeCalc(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_largeCalc(self, *args, **kwargs)

    def sumTerms(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_sumTerms(self, *args, **kwargs)

    def sumWeight(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_sumWeight(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_comment(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_calcContrib(self, *args, **kwargs)

    def calcGamma(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_calcGamma(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_energy(self, *args, **kwargs)

    def energyNonStereo(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_energyNonStereo(self, *args, **kwargs)

    def kdfsb(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_kdfsb(self, *args, **kwargs)

    def dtdp(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_dtdp(self, *args, **kwargs)

    def setClockDeriv(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_setClockDeriv(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_deriv(self, *args, **kwargs)

    def asString(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_asString(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _prePot.rc_ptr_PRERestraint_setName(self, *args, **kwargs)

class rc_ptr_PRERestraintPtr(rc_ptr_PRERestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_PRERestraint

rc_ptr_PRERestraint_swigregister = _prePot.rc_ptr_PRERestraint_swigregister
rc_ptr_PRERestraint_swigregister(rc_ptr_PRERestraint)

class CDSList_PRERestraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _prePot.CDSList_PRERestraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _prePot.new_CDSList_PRERestraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _prePot.CDSList_PRERestraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _prePot.CDSList_PRERestraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _prePot.CDSList_PRERestraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _prePot.CDSList_PRERestraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _prePot.CDSList_PRERestraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _prePot.CDSList_PRERestraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _prePot.CDSList_PRERestraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _prePot.CDSList_PRERestraint_help(self, *args, **kwargs)
    __swig_destroy__ = _prePot.delete_CDSList_PRERestraint
    __del__ = lambda self: None

class CDSList_PRERestraintPtr(CDSList_PRERestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_PRERestraint

CDSList_PRERestraint_swigregister = _prePot.CDSList_PRERestraint_swigregister
CDSList_PRERestraint_swigregister(CDSList_PRERestraint)


pyXplorHelp = help


def help(*args):
    return _prePot.help(*args)
help = _prePot.help


