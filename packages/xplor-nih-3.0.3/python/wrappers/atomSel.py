# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_atomSel')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_atomSel')
    _atomSel = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_atomSel', [dirname(__file__)])
        except ImportError:
            import _atomSel
            return _atomSel
        try:
            _mod = imp.load_module('_atomSel', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _atomSel = swig_import_helper()
    del swig_import_helper
else:
    import _atomSel
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def intersection(*args, **kwargs):
    return _atomSel.intersection(*args, **kwargs)
intersection = _atomSel.intersection
class AtomSel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _atomSel.new_AtomSel(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def ok(self, *args, **kwargs):
        return _atomSel.AtomSel_ok(self, *args, **kwargs)

    def simulation(self, *args):
        return _atomSel.AtomSel_simulation(self, *args)

    def indices(self, *args, **kwargs):
        return _atomSel.AtomSel_indices(self, *args, **kwargs)

    def setIndices(self, *args, **kwargs):
        return _atomSel.AtomSel_setIndices(self, *args, **kwargs)

    def ordered(self, *args, **kwargs):
        return _atomSel.AtomSel_ordered(self, *args, **kwargs)

    def setOrdered(self, *args, **kwargs):
        return _atomSel.AtomSel_setOrdered(self, *args, **kwargs)

    def reevaluate(self, *args, **kwargs):
        return _atomSel.AtomSel_reevaluate(self, *args, **kwargs)

    def containsIndex(self, *args, **kwargs):
        return _atomSel.AtomSel_containsIndex(self, *args, **kwargs)

    def containsAtom(self, *args, **kwargs):
        return _atomSel.AtomSel_containsAtom(self, *args, **kwargs)

    def allValid(self, *args, **kwargs):
        return _atomSel.AtomSel_allValid(self, *args, **kwargs)

    def deleteAtoms(self, *args, **kwargs):
        return _atomSel.AtomSel_deleteAtoms(self, *args, **kwargs)

    def size(self, *args, **kwargs):
        return _atomSel.AtomSel_size(self, *args, **kwargs)

    def string(self, *args, **kwargs):
        return _atomSel.AtomSel_string(self, *args, **kwargs)

    def apply(self, *args, **kwargs):
        return _atomSel.AtomSel_apply(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        return _atomSel.AtomSel___eq__(self, *args, **kwargs)

    def begin(self, *args, **kwargs):
        return _atomSel.AtomSel_begin(self, *args, **kwargs)

    def end(self, *args, **kwargs):
        return _atomSel.AtomSel_end(self, *args, **kwargs)

    def startPos(self, *args, **kwargs):
        return _atomSel.AtomSel_startPos(self, *args, **kwargs)

    def endPos(self, *args, **kwargs):
        return _atomSel.AtomSel_endPos(self, *args, **kwargs)

    def next(self, *args, **kwargs):
        return _atomSel.AtomSel_next(self, *args, **kwargs)

    def prev(self, *args, **kwargs):
        return _atomSel.AtomSel_prev(self, *args, **kwargs)

    def __getitem__(self, *args):
        return _atomSel.AtomSel___getitem__(self, *args)

    def __len__(self, *args, **kwargs):
        return _atomSel.AtomSel___len__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _atomSel.AtomSel___getslice__(self, *args, **kwargs)

    def equals(self, *args, **kwargs):
        return _atomSel.AtomSel_equals(self, *args, **kwargs)

    def __eq__(self,other):
        if self is None and other is None: return True
        if self is None or other is None: return False
        return self.equals(other)


    def help(self, *args, **kwargs):
        return _atomSel.AtomSel_help(self, *args, **kwargs)
    __swig_destroy__ = _atomSel.delete_AtomSel
    __del__ = lambda self: None

class AtomSelPtr(AtomSel):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = AtomSel

AtomSel_swigregister = _atomSel.AtomSel_swigregister
AtomSel_swigregister(AtomSel)

def AtomSel_fromIndices(*args, **kwargs):
    val = _atomSel.new_AtomSel_fromIndices(*args, **kwargs)
    return val

def asUnion(*args, **kwargs):
    return _atomSel.asUnion(*args, **kwargs)
asUnion = _atomSel.asUnion

def notSelection(*args, **kwargs):
    return _atomSel.notSelection(*args, **kwargs)
notSelection = _atomSel.notSelection


def monomericallyEqual(*args, **kwargs):
    return _atomSel.monomericallyEqual(*args, **kwargs)
monomericallyEqual = _atomSel.monomericallyEqual

def intersect(*args, **kwargs):
    return _atomSel.intersect(*args, **kwargs)
intersect = _atomSel.intersect

def minResidDiff(*args, **kwargs):
    return _atomSel.minResidDiff(*args, **kwargs)
minResidDiff = _atomSel.minResidDiff

def AtomSel_fromPtr(*args, **kwargs):
    return _atomSel.AtomSel_fromPtr(*args, **kwargs)
AtomSel_fromPtr = _atomSel.AtomSel_fromPtr

def union(*args):
    if len(args)==2:
        return asUnion(*args)
    elif len(args)==1:
        return args[0]
    elif len(args)>2:
        args=list(args)
        ret = asUnion(*args[:2])
        args = args[2:]
        while args:
            ret = asUnion(ret,args[0])
            args = args[1:]
            pass
        return ret
    return AtomSel()

oldinit=AtomSel.__init__
def init(self,*args,**kwargs):
    if len(args)==0 or type(args[0])==type("string"):
        oldinit(self,*args,**kwargs)
    else:
        self.this = AtomSel_fromIndices(*args,**kwargs)

AtomSel.__init__=init



pyXplorHelp = help


def help(*args):
    return _atomSel.help(*args)
help = _atomSel.help


