# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hbPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hbPot')
    _hbPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hbPot', [dirname(__file__)])
        except ImportError:
            import _hbPot
            return _hbPot
        try:
            _mod = imp.load_module('_hbPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hbPot = swig_import_helper()
    del swig_import_helper
else:
    import _hbPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _hbPot.Modified_MOD_SELF
    MOD_SIMULATION = _hbPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _hbPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _hbPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _hbPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _hbPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _hbPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _hbPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _hbPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _hbPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_hbPot.ModifiedBase_modified_get, _hbPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_hbPot.ModifiedBase_registeredSimulations_get, _hbPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _hbPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _hbPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _hbPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _hbPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _hbPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class HBPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _hbPot.new_HBPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _hbPot.HBPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _hbPot.HBPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _hbPot.HBPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _hbPot.HBPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _hbPot.HBPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _hbPot.HBPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _hbPot.HBPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _hbPot.HBPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _hbPot.delete_HBPot
    __del__ = lambda self: None
    acceptors = _swig_property(_hbPot.HBPot_acceptors_get, _hbPot.HBPot_acceptors_set)
    donors = _swig_property(_hbPot.HBPot_donors_get, _hbPot.HBPot_donors_set)

    def hbonds(self, *args, **kwargs):
        return _hbPot.HBPot_hbonds(self, *args, **kwargs)

    def findAcceptorsDonors(self, *args, **kwargs):
        return _hbPot.HBPot_findAcceptorsDonors(self, *args, **kwargs)

    def genPairType(self, *args, **kwargs):
        return _hbPot.HBPot_genPairType(self, *args, **kwargs)

    def getMap(self, *args, **kwargs):
        return _hbPot.HBPot_getMap(self, *args, **kwargs)

    def getMapString(self, *args, **kwargs):
        return _hbPot.HBPot_getMapString(self, *args, **kwargs)

    def getMapping(self, *args, **kwargs):
        return _hbPot.HBPot_getMapping(self, *args, **kwargs)

    def movedTooMuch(self, *args, **kwargs):
        return _hbPot.HBPot_movedTooMuch(self, *args, **kwargs)

    def updateNeighborList(self, *args, **kwargs):
        return _hbPot.HBPot_updateNeighborList(self, *args, **kwargs)
    neighbors = _swig_property(_hbPot.HBPot_neighbors_get, _hbPot.HBPot_neighbors_set)

    def thresholdStr(self, *args, **kwargs):
        return _hbPot.HBPot_thresholdStr(self, *args, **kwargs)

    def setThresholdStr(self, *args, **kwargs):
        return _hbPot.HBPot_setThresholdStr(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _hbPot.HBPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _hbPot.HBPot_setVerbose(self, *args, **kwargs)

    def rMax(self, *args, **kwargs):
        return _hbPot.HBPot_rMax(self, *args, **kwargs)

    def setRMax(self, *args, **kwargs):
        return _hbPot.HBPot_setRMax(self, *args, **kwargs)

    def rOn(self, *args, **kwargs):
        return _hbPot.HBPot_rOn(self, *args, **kwargs)

    def setROn(self, *args, **kwargs):
        return _hbPot.HBPot_setROn(self, *args, **kwargs)

    def moveTol(self, *args, **kwargs):
        return _hbPot.HBPot_moveTol(self, *args, **kwargs)

    def setMoveTol(self, *args, **kwargs):
        return _hbPot.HBPot_setMoveTol(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _hbPot.HBPot_selection(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _hbPot.HBPot_info(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _hbPot.HBPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _hbPot.HBPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _hbPot.HBPot_rms(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _hbPot.HBPot_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _hbPot.HBPot_deriv(self, *args, **kwargs)

    def getGeom(self, *args, **kwargs):
        return _hbPot.HBPot_getGeom(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _hbPot.HBPot_violated(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _hbPot.HBPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _hbPot.HBPot_numRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _hbPot.HBPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _hbPot.HBPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _hbPot.HBPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _hbPot.HBPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _hbPot.HBPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _hbPot.HBPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _hbPot.HBPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _hbPot.HBPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _hbPot.HBPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _hbPot.HBPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _hbPot.HBPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_hbPot.HBPot_instanceData__get, _hbPot.HBPot_instanceData__set)
    instanceDataCreate = _swig_property(_hbPot.HBPot_instanceDataCreate_get, _hbPot.HBPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_hbPot.HBPot_instanceDataCleanup_get, _hbPot.HBPot_instanceDataCleanup_set)
    modified = _swig_property(_hbPot.HBPot_modified_get, _hbPot.HBPot_modified_set)
    registeredSimulations = _swig_property(_hbPot.HBPot_registeredSimulations_get, _hbPot.HBPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _hbPot.HBPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _hbPot.HBPot_unRegister(self, *args, **kwargs)

class HBPotPtr(HBPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = HBPot

HBPot_swigregister = _hbPot.HBPot_swigregister
HBPot_swigregister(HBPot)


realHBPot = HBPot
def HBPot(*args):
    from potProxy import PotProxy
    return PotProxy( realHBPot(*args) )

class HBPot_DAType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    num = _swig_property(_hbPot.HBPot_DAType_num_get, _hbPot.HBPot_DAType_num_set)
    typeStr = _swig_property(_hbPot.HBPot_DAType_typeStr_get, _hbPot.HBPot_DAType_typeStr_set)
    sel = _swig_property(_hbPot.HBPot_DAType_sel_get, _hbPot.HBPot_DAType_sel_set)
    nextSel = _swig_property(_hbPot.HBPot_DAType_nextSel_get, _hbPot.HBPot_DAType_nextSel_set)

    def __init__(self, *args, **kwargs):
        this = _hbPot.new_HBPot_DAType(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hbPot.delete_HBPot_DAType
    __del__ = lambda self: None

class HBPot_DATypePtr(HBPot_DAType):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = HBPot_DAType

HBPot_DAType_swigregister = _hbPot.HBPot_DAType_swigregister
HBPot_DAType_swigregister(HBPot_DAType)

class HBPot_TypeInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    aType = _swig_property(_hbPot.HBPot_TypeInfo_aType_get, _hbPot.HBPot_TypeInfo_aType_set)
    dType = _swig_property(_hbPot.HBPot_TypeInfo_dType_get, _hbPot.HBPot_TypeInfo_dType_set)
    deltaResid = _swig_property(_hbPot.HBPot_TypeInfo_deltaResid_get, _hbPot.HBPot_TypeInfo_deltaResid_set)

    def __init__(self, *args, **kwargs):
        this = _hbPot.new_HBPot_TypeInfo(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hbPot.delete_HBPot_TypeInfo
    __del__ = lambda self: None

class HBPot_TypeInfoPtr(HBPot_TypeInfo):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = HBPot_TypeInfo

HBPot_TypeInfo_swigregister = _hbPot.HBPot_TypeInfo_swigregister
HBPot_TypeInfo_swigregister(HBPot_TypeInfo)
cvar = _hbPot.cvar
aTypeBits = cvar.aTypeBits
dTypeBits = cvar.dTypeBits
deltaResidBits = cvar.deltaResidBits

class HBPot_MapType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    typePair = _swig_property(_hbPot.HBPot_MapType_typePair_get, _hbPot.HBPot_MapType_typePair_set)
    filename = _swig_property(_hbPot.HBPot_MapType_filename_get, _hbPot.HBPot_MapType_filename_set)
    deltaResid = _swig_property(_hbPot.HBPot_MapType_deltaResid_get, _hbPot.HBPot_MapType_deltaResid_set)
    scale = _swig_property(_hbPot.HBPot_MapType_scale_get, _hbPot.HBPot_MapType_scale_set)
    id = _swig_property(_hbPot.HBPot_MapType_id_get, _hbPot.HBPot_MapType_id_set)
    surf = _swig_property(_hbPot.HBPot_MapType_surf_get, _hbPot.HBPot_MapType_surf_set)

    def __init__(self, *args, **kwargs):
        this = _hbPot.new_HBPot_MapType(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hbPot.delete_HBPot_MapType
    __del__ = lambda self: None

class HBPot_MapTypePtr(HBPot_MapType):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = HBPot_MapType

HBPot_MapType_swigregister = _hbPot.HBPot_MapType_swigregister
HBPot_MapType_swigregister(HBPot_MapType)

class HBPot_DA(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    atom = _swig_property(_hbPot.HBPot_DA_atom_get, _hbPot.HBPot_DA_atom_set)
    nextAtom = _swig_property(_hbPot.HBPot_DA_nextAtom_get, _hbPot.HBPot_DA_nextAtom_set)
    typeNum = _swig_property(_hbPot.HBPot_DA_typeNum_get, _hbPot.HBPot_DA_typeNum_set)

    def __init__(self, *args):
        this = _hbPot.new_HBPot_DA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hbPot.delete_HBPot_DA
    __del__ = lambda self: None

class HBPot_DAPtr(HBPot_DA):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = HBPot_DA

HBPot_DA_swigregister = _hbPot.HBPot_DA_swigregister
HBPot_DA_swigregister(HBPot_DA)

class HBPot_Geom(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    r = _swig_property(_hbPot.HBPot_Geom_r_get, _hbPot.HBPot_Geom_r_set)
    theta = _swig_property(_hbPot.HBPot_Geom_theta_get, _hbPot.HBPot_Geom_theta_set)
    phi = _swig_property(_hbPot.HBPot_Geom_phi_get, _hbPot.HBPot_Geom_phi_set)

    def __init__(self, *args, **kwargs):
        this = _hbPot.new_HBPot_Geom(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hbPot.delete_HBPot_Geom
    __del__ = lambda self: None

class HBPot_GeomPtr(HBPot_Geom):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = HBPot_Geom

HBPot_Geom_swigregister = _hbPot.HBPot_Geom_swigregister
HBPot_Geom_swigregister(HBPot_Geom)

class HBPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _hbPot.new_HBPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _hbPot.delete_HBPot_LetterClass
    __del__ = lambda self: None
    acceptors = _swig_property(_hbPot.HBPot_LetterClass_acceptors_get, _hbPot.HBPot_LetterClass_acceptors_set)
    donors = _swig_property(_hbPot.HBPot_LetterClass_donors_get, _hbPot.HBPot_LetterClass_donors_set)

    def hbonds(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_hbonds(self, *args, **kwargs)

    def findAcceptorsDonors(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_findAcceptorsDonors(self, *args, **kwargs)

    def genPairType(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_genPairType(self, *args, **kwargs)

    def getMap(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_getMap(self, *args, **kwargs)

    def getMapString(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_getMapString(self, *args, **kwargs)

    def getMapping(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_getMapping(self, *args, **kwargs)

    def movedTooMuch(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_movedTooMuch(self, *args, **kwargs)

    def updateNeighborList(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_updateNeighborList(self, *args, **kwargs)
    neighbors = _swig_property(_hbPot.HBPot_LetterClass_neighbors_get, _hbPot.HBPot_LetterClass_neighbors_set)

    def thresholdStr(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_thresholdStr(self, *args, **kwargs)

    def setThresholdStr(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_setThresholdStr(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_setVerbose(self, *args, **kwargs)

    def rMax(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_rMax(self, *args, **kwargs)

    def setRMax(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_setRMax(self, *args, **kwargs)

    def rOn(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_rOn(self, *args, **kwargs)

    def setROn(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_setROn(self, *args, **kwargs)

    def moveTol(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_moveTol(self, *args, **kwargs)

    def setMoveTol(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_setMoveTol(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_selection(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_info(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_rms(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_deriv(self, *args, **kwargs)

    def getGeom(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_getGeom(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_violated(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_numRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _hbPot.HBPot_LetterClass_help(self, *args, **kwargs)

class HBPot_LetterClassPtr(HBPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = HBPot_LetterClass

HBPot_LetterClass_swigregister = _hbPot.HBPot_LetterClass_swigregister
HBPot_LetterClass_swigregister(HBPot_LetterClass)

class CDSList_DAType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _hbPot.CDSList_DAType___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _hbPot.new_CDSList_DAType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _hbPot.CDSList_DAType___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _hbPot.CDSList_DAType___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _hbPot.CDSList_DAType_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _hbPot.CDSList_DAType_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _hbPot.CDSList_DAType_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _hbPot.CDSList_DAType___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _hbPot.CDSList_DAType___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _hbPot.CDSList_DAType_help(self, *args, **kwargs)
    __swig_destroy__ = _hbPot.delete_CDSList_DAType
    __del__ = lambda self: None

class CDSList_DATypePtr(CDSList_DAType):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_DAType

CDSList_DAType_swigregister = _hbPot.CDSList_DAType_swigregister
CDSList_DAType_swigregister(CDSList_DAType)

class CDSList_MapType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _hbPot.CDSList_MapType___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _hbPot.new_CDSList_MapType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _hbPot.CDSList_MapType___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _hbPot.CDSList_MapType___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _hbPot.CDSList_MapType_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _hbPot.CDSList_MapType_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _hbPot.CDSList_MapType_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _hbPot.CDSList_MapType___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _hbPot.CDSList_MapType___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _hbPot.CDSList_MapType_help(self, *args, **kwargs)
    __swig_destroy__ = _hbPot.delete_CDSList_MapType
    __del__ = lambda self: None

class CDSList_MapTypePtr(CDSList_MapType):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_MapType

CDSList_MapType_swigregister = _hbPot.CDSList_MapType_swigregister
CDSList_MapType_swigregister(CDSList_MapType)

class CDSList_CDSList_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _hbPot.CDSList_CDSList_int___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _hbPot.new_CDSList_CDSList_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _hbPot.CDSList_CDSList_int___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _hbPot.CDSList_CDSList_int___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _hbPot.CDSList_CDSList_int_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _hbPot.CDSList_CDSList_int_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _hbPot.CDSList_CDSList_int_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _hbPot.CDSList_CDSList_int___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _hbPot.CDSList_CDSList_int___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _hbPot.CDSList_CDSList_int_help(self, *args, **kwargs)
    __swig_destroy__ = _hbPot.delete_CDSList_CDSList_int
    __del__ = lambda self: None

class CDSList_CDSList_intPtr(CDSList_CDSList_int):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_CDSList_int

CDSList_CDSList_int_swigregister = _hbPot.CDSList_CDSList_int_swigregister
CDSList_CDSList_int_swigregister(CDSList_CDSList_int)

class CDSList_DA(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _hbPot.CDSList_DA___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _hbPot.new_CDSList_DA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _hbPot.CDSList_DA___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _hbPot.CDSList_DA___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _hbPot.CDSList_DA_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _hbPot.CDSList_DA_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _hbPot.CDSList_DA_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _hbPot.CDSList_DA___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _hbPot.CDSList_DA___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _hbPot.CDSList_DA_help(self, *args, **kwargs)
    __swig_destroy__ = _hbPot.delete_CDSList_DA
    __del__ = lambda self: None

class CDSList_DAPtr(CDSList_DA):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_DA

CDSList_DA_swigregister = _hbPot.CDSList_DA_swigregister
CDSList_DA_swigregister(CDSList_DA)

class CDSList_Pair_int_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _hbPot.CDSList_Pair_int_int___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _hbPot.new_CDSList_Pair_int_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _hbPot.CDSList_Pair_int_int___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _hbPot.CDSList_Pair_int_int___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _hbPot.CDSList_Pair_int_int_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _hbPot.CDSList_Pair_int_int_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _hbPot.CDSList_Pair_int_int_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _hbPot.CDSList_Pair_int_int___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _hbPot.CDSList_Pair_int_int___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _hbPot.CDSList_Pair_int_int_help(self, *args, **kwargs)
    __swig_destroy__ = _hbPot.delete_CDSList_Pair_int_int
    __del__ = lambda self: None

class CDSList_Pair_int_intPtr(CDSList_Pair_int_int):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Pair_int_int

CDSList_Pair_int_int_swigregister = _hbPot.CDSList_Pair_int_int_swigregister
CDSList_Pair_int_int_swigregister(CDSList_Pair_int_int)

class Pair_int_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    a = _swig_property(_hbPot.Pair_int_int_a_get, _hbPot.Pair_int_int_a_set)
    b = _swig_property(_hbPot.Pair_int_int_b_get, _hbPot.Pair_int_int_b_set)

    def __init__(self, *args):
        this = _hbPot.new_Pair_int_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args, **kwargs):
        return _hbPot.Pair_int_int___eq__(self, *args, **kwargs)
    __swig_destroy__ = _hbPot.delete_Pair_int_int
    __del__ = lambda self: None

class Pair_int_intPtr(Pair_int_int):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Pair_int_int

Pair_int_int_swigregister = _hbPot.Pair_int_int_swigregister
Pair_int_int_swigregister(Pair_int_int)


import cdsList
import hbSurf


pyXplorHelp = help


def help(*args):
    return _hbPot.help(*args)
help = _hbPot.help


