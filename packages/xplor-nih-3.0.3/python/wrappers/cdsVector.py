# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cdsVector')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cdsVector')
    _cdsVector = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cdsVector', [dirname(__file__)])
        except ImportError:
            import _cdsVector
            return _cdsVector
        try:
            _mod = imp.load_module('_cdsVector', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cdsVector = swig_import_helper()
    del swig_import_helper
else:
    import _cdsVector
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class CDSVector_bool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___len__(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool_resize(self, *args, **kwargs)

    def set(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool_set(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsVector.new_CDSVector_bool(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool_get(self, *args, **kwargs)

    def fromList(s,l):
        s.resize(len(l)) 
        for i in range( len(s) ):
            s[i] = l[i]
        return s


    def __setitem__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___getslice__(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        arg = args[0]
        if type(arg) is slice:
            if not (arg.step==None or arg.step==1):
                raise Exception("slice step!=1 not supported: " +
                                str(arg.step))
            start=arg.start if arg.start!=None else 0
            stop=arg.stop if arg.stop!=None else len(self)
            return self.__getslice__(start,stop)
        else:
            return self.get(arg)


    def __pow__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___pow__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool_help(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool_scale(self, *args, **kwargs)

    def __add__(self, *args):
        return _cdsVector.CDSVector_bool___add__(self, *args)

    def __radd__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___radd__(self, *args, **kwargs)

    def __sub__(self, *args):
        return _cdsVector.CDSVector_bool___sub__(self, *args)

    def __rsub__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___rsub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _cdsVector.CDSVector_bool___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___rmul__(self, *args, **kwargs)

    def __truediv__(self, *args):
        return _cdsVector.CDSVector_bool___truediv__(self, *args)

    def __rtruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___rtruediv__(self, *args, **kwargs)

    def __imul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___imul__(self, *args, **kwargs)

    def __itruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___itruediv__(self, *args, **kwargs)

    def __iadd__(self, *args):
        return _cdsVector.CDSVector_bool___iadd__(self, *args)

    def __isub__(self, *args):
        return _cdsVector.CDSVector_bool___isub__(self, *args)

    def __neg__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___neg__(self, *args, **kwargs)

    def __str__(self, *args, **kwargs):
        return _cdsVector.CDSVector_bool___str__(self, *args, **kwargs)
    __swig_destroy__ = _cdsVector.delete_CDSVector_bool
    __del__ = lambda self: None

class CDSVector_boolPtr(CDSVector_bool):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSVector_bool

CDSVector_bool_swigregister = _cdsVector.CDSVector_bool_swigregister
CDSVector_bool_swigregister(CDSVector_bool)

class CDSVector_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___len__(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _cdsVector.CDSVector_int_resize(self, *args, **kwargs)

    def set(self, *args, **kwargs):
        return _cdsVector.CDSVector_int_set(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsVector.new_CDSVector_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args, **kwargs):
        return _cdsVector.CDSVector_int_get(self, *args, **kwargs)

    def fromList(s,l):
        s.resize(len(l)) 
        for i in range( len(s) ):
            s[i] = l[i]
        return s


    def __setitem__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___getslice__(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        arg = args[0]
        if type(arg) is slice:
            if not (arg.step==None or arg.step==1):
                raise Exception("slice step!=1 not supported: " +
                                str(arg.step))
            start=arg.start if arg.start!=None else 0
            stop=arg.stop if arg.stop!=None else len(self)
            return self.__getslice__(start,stop)
        else:
            return self.get(arg)


    def __pow__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___pow__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsVector.CDSVector_int_help(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _cdsVector.CDSVector_int_scale(self, *args, **kwargs)

    def __add__(self, *args):
        return _cdsVector.CDSVector_int___add__(self, *args)

    def __radd__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___radd__(self, *args, **kwargs)

    def __sub__(self, *args):
        return _cdsVector.CDSVector_int___sub__(self, *args)

    def __rsub__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___rsub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _cdsVector.CDSVector_int___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___rmul__(self, *args, **kwargs)

    def __truediv__(self, *args):
        return _cdsVector.CDSVector_int___truediv__(self, *args)

    def __rtruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___rtruediv__(self, *args, **kwargs)

    def __imul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___imul__(self, *args, **kwargs)

    def __itruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___itruediv__(self, *args, **kwargs)

    def __iadd__(self, *args):
        return _cdsVector.CDSVector_int___iadd__(self, *args)

    def __isub__(self, *args):
        return _cdsVector.CDSVector_int___isub__(self, *args)

    def __neg__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___neg__(self, *args, **kwargs)

    def __str__(self, *args, **kwargs):
        return _cdsVector.CDSVector_int___str__(self, *args, **kwargs)
    __swig_destroy__ = _cdsVector.delete_CDSVector_int
    __del__ = lambda self: None

class CDSVector_intPtr(CDSVector_int):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSVector_int

CDSVector_int_swigregister = _cdsVector.CDSVector_int_swigregister
CDSVector_int_swigregister(CDSVector_int)

class CDSVector_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___len__(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _cdsVector.CDSVector_double_resize(self, *args, **kwargs)

    def set(self, *args, **kwargs):
        return _cdsVector.CDSVector_double_set(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsVector.new_CDSVector_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args, **kwargs):
        return _cdsVector.CDSVector_double_get(self, *args, **kwargs)

    def fromList(s,l):
        s.resize(len(l)) 
        for i in range( len(s) ):
            s[i] = l[i]
        return s


    def __setitem__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___getslice__(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        arg = args[0]
        if type(arg) is slice:
            if not (arg.step==None or arg.step==1):
                raise Exception("slice step!=1 not supported: " +
                                str(arg.step))
            start=arg.start if arg.start!=None else 0
            stop=arg.stop if arg.stop!=None else len(self)
            return self.__getslice__(start,stop)
        else:
            return self.get(arg)


    def __pow__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___pow__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsVector.CDSVector_double_help(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _cdsVector.CDSVector_double_scale(self, *args, **kwargs)

    def __add__(self, *args):
        return _cdsVector.CDSVector_double___add__(self, *args)

    def __radd__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___radd__(self, *args, **kwargs)

    def __sub__(self, *args):
        return _cdsVector.CDSVector_double___sub__(self, *args)

    def __rsub__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___rsub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _cdsVector.CDSVector_double___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___rmul__(self, *args, **kwargs)

    def __truediv__(self, *args):
        return _cdsVector.CDSVector_double___truediv__(self, *args)

    def __rtruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___rtruediv__(self, *args, **kwargs)

    def __imul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___imul__(self, *args, **kwargs)

    def __itruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___itruediv__(self, *args, **kwargs)

    def __iadd__(self, *args):
        return _cdsVector.CDSVector_double___iadd__(self, *args)

    def __isub__(self, *args):
        return _cdsVector.CDSVector_double___isub__(self, *args)

    def __neg__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___neg__(self, *args, **kwargs)

    def __str__(self, *args, **kwargs):
        return _cdsVector.CDSVector_double___str__(self, *args, **kwargs)
    __swig_destroy__ = _cdsVector.delete_CDSVector_double
    __del__ = lambda self: None

class CDSVector_doublePtr(CDSVector_double):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSVector_double

CDSVector_double_swigregister = _cdsVector.CDSVector_double_swigregister
CDSVector_double_swigregister(CDSVector_double)

class CDSVector_Vec3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___len__(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3_resize(self, *args, **kwargs)

    def set(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3_set(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsVector.new_CDSVector_Vec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3_get(self, *args, **kwargs)

    def fromList(s,l):
        s.resize(len(l)) 
        for i in range( len(s) ):
            s[i] = l[i]
        return s


    def __setitem__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___getslice__(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        arg = args[0]
        if type(arg) is slice:
            if not (arg.step==None or arg.step==1):
                raise Exception("slice step!=1 not supported: " +
                                str(arg.step))
            start=arg.start if arg.start!=None else 0
            stop=arg.stop if arg.stop!=None else len(self)
            return self.__getslice__(start,stop)
        else:
            return self.get(arg)


    def __pow__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___pow__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3_help(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3_scale(self, *args, **kwargs)

    def __add__(self, *args):
        return _cdsVector.CDSVector_Vec3___add__(self, *args)

    def __radd__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___radd__(self, *args, **kwargs)

    def __sub__(self, *args):
        return _cdsVector.CDSVector_Vec3___sub__(self, *args)

    def __rsub__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___rsub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _cdsVector.CDSVector_Vec3___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___rmul__(self, *args, **kwargs)

    def __truediv__(self, *args):
        return _cdsVector.CDSVector_Vec3___truediv__(self, *args)

    def __rtruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___rtruediv__(self, *args, **kwargs)

    def __imul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___imul__(self, *args, **kwargs)

    def __itruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___itruediv__(self, *args, **kwargs)

    def __iadd__(self, *args):
        return _cdsVector.CDSVector_Vec3___iadd__(self, *args)

    def __isub__(self, *args):
        return _cdsVector.CDSVector_Vec3___isub__(self, *args)

    def __neg__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___neg__(self, *args, **kwargs)

    def __str__(self, *args, **kwargs):
        return _cdsVector.CDSVector_Vec3___str__(self, *args, **kwargs)
    __swig_destroy__ = _cdsVector.delete_CDSVector_Vec3
    __del__ = lambda self: None

class CDSVector_Vec3Ptr(CDSVector_Vec3):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSVector_Vec3

CDSVector_Vec3_swigregister = _cdsVector.CDSVector_Vec3_swigregister
CDSVector_Vec3_swigregister(CDSVector_Vec3)

class CDSVector_DComplex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___len__(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex_resize(self, *args, **kwargs)

    def set(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex_set(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsVector.new_CDSVector_DComplex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex_get(self, *args, **kwargs)

    def fromList(s,l):
        s.resize(len(l)) 
        for i in range( len(s) ):
            s[i] = l[i]
        return s


    def __setitem__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___getslice__(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        arg = args[0]
        if type(arg) is slice:
            if not (arg.step==None or arg.step==1):
                raise Exception("slice step!=1 not supported: " +
                                str(arg.step))
            start=arg.start if arg.start!=None else 0
            stop=arg.stop if arg.stop!=None else len(self)
            return self.__getslice__(start,stop)
        else:
            return self.get(arg)


    def __pow__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___pow__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex_help(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex_scale(self, *args, **kwargs)

    def __add__(self, *args):
        return _cdsVector.CDSVector_DComplex___add__(self, *args)

    def __radd__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___radd__(self, *args, **kwargs)

    def __sub__(self, *args):
        return _cdsVector.CDSVector_DComplex___sub__(self, *args)

    def __rsub__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___rsub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _cdsVector.CDSVector_DComplex___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___rmul__(self, *args, **kwargs)

    def __truediv__(self, *args):
        return _cdsVector.CDSVector_DComplex___truediv__(self, *args)

    def __rtruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___rtruediv__(self, *args, **kwargs)

    def __imul__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___imul__(self, *args, **kwargs)

    def __itruediv__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___itruediv__(self, *args, **kwargs)

    def __iadd__(self, *args):
        return _cdsVector.CDSVector_DComplex___iadd__(self, *args)

    def __isub__(self, *args):
        return _cdsVector.CDSVector_DComplex___isub__(self, *args)

    def __neg__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___neg__(self, *args, **kwargs)

    def __str__(self, *args, **kwargs):
        return _cdsVector.CDSVector_DComplex___str__(self, *args, **kwargs)
    __swig_destroy__ = _cdsVector.delete_CDSVector_DComplex
    __del__ = lambda self: None

class CDSVector_DComplexPtr(CDSVector_DComplex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSVector_DComplex

CDSVector_DComplex_swigregister = _cdsVector.CDSVector_DComplex_swigregister
CDSVector_DComplex_swigregister(CDSVector_DComplex)


def min(*args):
    return _cdsVector.min(*args)
min = _cdsVector.min

def max(*args):
    return _cdsVector.max(*args)
max = _cdsVector.max

def sum(*args):
    return _cdsVector.sum(*args)
sum = _cdsVector.sum

def cat(*args):
    return _cdsVector.cat(*args)
cat = _cdsVector.cat

def cat3(*args):
    return _cdsVector.cat3(*args)
cat3 = _cdsVector.cat3

def cat4(*args):
    return _cdsVector.cat4(*args)
cat4 = _cdsVector.cat4

def dot(*args):
    return _cdsVector.dot(*args)
dot = _cdsVector.dot

def sqrt(*args, **kwargs):
    return _cdsVector.sqrt(*args, **kwargs)
sqrt = _cdsVector.sqrt

def log(*args, **kwargs):
    return _cdsVector.log(*args, **kwargs)
log = _cdsVector.log

def norm(*args, **kwargs):
    return _cdsVector.norm(*args, **kwargs)
norm = _cdsVector.norm

def sort(*args, **kwargs):
    return _cdsVector.sort(*args, **kwargs)
sort = _cdsVector.sort

def vec_norm(*args, **kwargs):
    return _cdsVector.vec_norm(*args, **kwargs)
vec_norm = _cdsVector.vec_norm

#temporary code s.t. CDSVectors_doubles and Vec3s can be mixed 
oldadd=CDSVector_double.__add__
def newadd(s,x):
  import vec3
  if type(x)==type(vec3.Vec3(0,0,0)):
     v=CDSVector_double(3)
     v.fromList(list(x))
     x=v
     pass
  return oldadd(s,x)
CDSVector_double.__add__ = newadd.__get__(None,
					  CDSVector_double)


pyXplorHelp = help


def help(*args):
    return _cdsVector.help(*args)
help = _cdsVector.help


