# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_solnScatPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_solnScatPot')
    _solnScatPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_solnScatPot', [dirname(__file__)])
        except ImportError:
            import _solnScatPot
            return _solnScatPot
        try:
            _mod = imp.load_module('_solnScatPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _solnScatPot = swig_import_helper()
    del swig_import_helper
else:
    import _solnScatPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _solnScatPot.Modified_MOD_SELF
    MOD_SIMULATION = _solnScatPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _solnScatPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _solnScatPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _solnScatPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _solnScatPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _solnScatPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _solnScatPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _solnScatPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _solnScatPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_solnScatPot.ModifiedBase_modified_get, _solnScatPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_solnScatPot.ModifiedBase_registeredSimulations_get, _solnScatPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _solnScatPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _solnScatPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _solnScatPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _solnScatPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _solnScatPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_solnScatPot.VarEnsWeights_ensWeights_get, _solnScatPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_solnScatPot.VarEnsWeights_mult_get, _solnScatPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _solnScatPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _solnScatPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _solnScatPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _solnScatPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _solnScatPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _solnScatPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _solnScatPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _solnScatPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _solnScatPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _solnScatPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class SolnScatPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _solnScatPot.new_SolnScatPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot___ref__(self, *args, **kwargs)

    def calcGlobCorrect(s,arg="current"):
        """
         swig can't handle the enumtypemap with this overridden method:
         we must do it manually"""
        if type(arg)==type("string"):
          return s.calcGlobCorrect_calcType(arg)
        else:
          return s.calcGlobCorrect_vec(arg)


    def registerInstanceData(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)


    def get_weights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_get_weights(self, *args, **kwargs)

    def set_weights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_set_weights(self, *args, **kwargs)

    def weights(self):
        return self.get_weights();
    def setWeights(self,v):
        if len(v)!=len(self.qValues()):
            raise Exception("vector has incorrect length")
        self.set_weights(v)

    __swig_destroy__ = _solnScatPot.delete_SolnScatPot
    __del__ = lambda self: None
    globCorrectCalcType_ = _swig_property(_solnScatPot.SolnScatPot_globCorrectCalcType__get, _solnScatPot.SolnScatPot_globCorrectCalcType__set)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_energyMaybeDerivs2(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_numRestraints(self, *args, **kwargs)

    def simulation(self, *args):
        return _solnScatPot.SolnScatPot_simulation(self, *args)

    def info(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_info(self, *args, **kwargs)

    def qValuesExpt(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_qValuesExpt(self, *args, **kwargs)

    def expt(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_expt(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcd(self, *args, **kwargs)

    def splined(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_splined(self, *args, **kwargs)

    def setQValues(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setQValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_updateDelta(self, *args, **kwargs)

    def weights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_weights(self, *args, **kwargs)

    def setWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setWeights(self, *args, **kwargs)

    def setExpt(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setExpt(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setVerbose(self, *args, **kwargs)

    def cmpType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_cmpType(self, *args, **kwargs)

    def setCmpType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setCmpType(self, *args, **kwargs)

    def normalizeIndex(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_normalizeIndex(self, *args, **kwargs)

    def setNormalizeIndex(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setNormalizeIndex(self, *args, **kwargs)

    def exptScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_exptScale(self, *args, **kwargs)

    def calcdScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcdScale(self, *args, **kwargs)

    def I_contrib(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_I_contrib(self, *args, **kwargs)

    def globCorrectCalcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_globCorrectCalcType(self, *args, **kwargs)

    def setGlobCorrectCalcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setGlobCorrectCalcType(self, *args, **kwargs)

    def calcDerivs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcDerivs(self, *args, **kwargs)

    def calcGlobCorrect_calcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcGlobCorrect_calcType(self, *args, **kwargs)

    def calcGlobCorrect_vec(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcGlobCorrect_vec(self, *args, **kwargs)

    def updateGlobCorrect(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_updateGlobCorrect(self, *args, **kwargs)

    def globCorrectReference(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_globCorrectReference(self, *args, **kwargs)

    def setGlobCorrectReference(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setGlobCorrectReference(self, *args, **kwargs)

    def globCorrectNeedsUpdating(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_globCorrectNeedsUpdating(self, *args, **kwargs)

    def setGlobCorrectNeedsUpdating(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setGlobCorrectNeedsUpdating(self, *args, **kwargs)

    def globCorrectSteps(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_globCorrectSteps(self, *args, **kwargs)

    def setGlobCorrectSteps(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setGlobCorrectSteps(self, *args, **kwargs)

    def globCorrectMovement(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_globCorrectMovement(self, *args, **kwargs)

    def setGlobCorrectMovement(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setGlobCorrectMovement(self, *args, **kwargs)
    globCorrect = _swig_property(_solnScatPot.SolnScatPot_globCorrect_get, _solnScatPot.SolnScatPot_globCorrect_set)
    dIs_dI = _swig_property(_solnScatPot.SolnScatPot_dIs_dI_get, _solnScatPot.SolnScatPot_dIs_dI_set)

    def boundaryI(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_boundaryI(self, *args, **kwargs)

    def bg(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_bg(self, *args, **kwargs)

    def setBG(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setBG(self, *args, **kwargs)

    def solnScat(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_solnScat(self, *args, **kwargs)

    def convertFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_convertFormFactors(self, *args, **kwargs)

    def qValues(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_qValues(self, *args, **kwargs)

    def formFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_formFactors(self, *args, **kwargs)

    def iFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_iFormFactors(self, *args, **kwargs)

    def radii(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_radii(self, *args, **kwargs)

    def aveRadius(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_aveRadius(self, *args, **kwargs)

    def aveVolume(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_aveVolume(self, *args, **kwargs)

    def setFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setFormFactors(self, *args, **kwargs)

    def setIFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setIFormFactors(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_selection(self, *args, **kwargs)

    def radiusScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_radiusScale(self, *args, **kwargs)

    def setRadiusScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setRadiusScale(self, *args, **kwargs)

    def volumeScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_volumeScale(self, *args, **kwargs)

    def setVolumeScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setVolumeScale(self, *args, **kwargs)

    def radiusType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_radiusType(self, *args, **kwargs)

    def setRadiusType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setRadiusType(self, *args, **kwargs)

    def rho0(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_rho0(self, *args, **kwargs)

    def setRho0(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setRho0(self, *args, **kwargs)

    def formScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_formScale(self, *args, **kwargs)

    def setFormScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setFormScale(self, *args, **kwargs)

    def numAngles(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_numAngles(self, *args, **kwargs)

    def setNumAngles(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setNumAngles(self, *args, **kwargs)

    def lMax(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_lMax(self, *args, **kwargs)

    def setLMax(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setLMax(self, *args, **kwargs)

    def calcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcType(self, *args, **kwargs)

    def setCalcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setCalcType(self, *args, **kwargs)

    def angleType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_angleType(self, *args, **kwargs)

    def setAngleType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setAngleType(self, *args, **kwargs)

    def setGlobs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setGlobs(self, *args, **kwargs)

    def useGlobs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_useGlobs(self, *args, **kwargs)

    def setUseGlobs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setUseGlobs(self, *args, **kwargs)

    def getF(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_getF(self, *args, **kwargs)

    def rhob(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_rhob(self, *args, **kwargs)

    def setRhob(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setRhob(self, *args, **kwargs)

    def calcBoundary(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcBoundary(self, *args, **kwargs)

    def setCalcBoundary(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setCalcBoundary(self, *args, **kwargs)

    def boundaryThickness(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_boundaryThickness(self, *args, **kwargs)

    def setBoundaryThickness(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setBoundaryThickness(self, *args, **kwargs)

    def solventRadius(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_solventRadius(self, *args, **kwargs)

    def setSolventRadius(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setSolventRadius(self, *args, **kwargs)

    def boundaryVol(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_boundaryVol(self, *args, **kwargs)

    def calcBoundaryPoints(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcBoundaryPoints(self, *args, **kwargs)

    def addRigidRegion(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_addRigidRegion(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def ensWeight(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_updateValues(self, *args, **kwargs)
    instanceData_ = _swig_property(_solnScatPot.SolnScatPot_instanceData__get, _solnScatPot.SolnScatPot_instanceData__set)
    instanceDataCreate = _swig_property(_solnScatPot.SolnScatPot_instanceDataCreate_get, _solnScatPot.SolnScatPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_solnScatPot.SolnScatPot_instanceDataCleanup_get, _solnScatPot.SolnScatPot_instanceDataCleanup_set)
    modified = _swig_property(_solnScatPot.SolnScatPot_modified_get, _solnScatPot.SolnScatPot_modified_set)
    registeredSimulations = _swig_property(_solnScatPot.SolnScatPot_registeredSimulations_get, _solnScatPot.SolnScatPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_unRegister(self, *args, **kwargs)

class SolnScatPotPtr(SolnScatPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SolnScatPot

SolnScatPot_swigregister = _solnScatPot.SolnScatPot_swigregister
SolnScatPot_swigregister(SolnScatPot)


realSolnScatPot = SolnScatPot
def SolnScatPot(*args):
    from potProxy import PotProxy
    return PotProxy( realSolnScatPot(*args) )


def fromPy(*args, **kwargs):
    return _solnScatPot.fromPy(*args, **kwargs)
fromPy = _solnScatPot.fromPy

import cdsVector
import cdsMatrix


def pairDistribution(*args, **kwargs):
    return _solnScatPot.pairDistribution(*args, **kwargs)
pairDistribution = _solnScatPot.pairDistribution

def volContrib(*args, **kwargs):
    return _solnScatPot.volContrib(*args, **kwargs)
volContrib = _solnScatPot.volContrib

def calcIfromF(*args, **kwargs):
    return _solnScatPot.calcIfromF(*args, **kwargs)
calcIfromF = _solnScatPot.calcIfromF

def calc_dIdrhob(*args, **kwargs):
    return _solnScatPot.calc_dIdrhob(*args, **kwargs)
calc_dIdrhob = _solnScatPot.calc_dIdrhob
ANGLE_RANDOM = _solnScatPot.ANGLE_RANDOM
ANGLE_FIBONACCI = _solnScatPot.ANGLE_FIBONACCI
ANGLE_SPIRAL = _solnScatPot.ANGLE_SPIRAL

def pointsOnSphere(*args, **kwargs):
    return _solnScatPot.pointsOnSphere(*args, **kwargs)
pointsOnSphere = _solnScatPot.pointsOnSphere
class SolnScat_FracElec_SelIndex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fracElec = _swig_property(_solnScatPot.SolnScat_FracElec_SelIndex_fracElec_get, _solnScatPot.SolnScat_FracElec_SelIndex_fracElec_set)
    selIndex = _swig_property(_solnScatPot.SolnScat_FracElec_SelIndex_selIndex_get, _solnScatPot.SolnScat_FracElec_SelIndex_selIndex_set)

    def __init__(self, *args, **kwargs):
        this = _solnScatPot.new_SolnScat_FracElec_SelIndex(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _solnScatPot.delete_SolnScat_FracElec_SelIndex
    __del__ = lambda self: None

class SolnScat_FracElec_SelIndexPtr(SolnScat_FracElec_SelIndex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SolnScat_FracElec_SelIndex

SolnScat_FracElec_SelIndex_swigregister = _solnScatPot.SolnScat_FracElec_SelIndex_swigregister
SolnScat_FracElec_SelIndex_swigregister(SolnScat_FracElec_SelIndex)

class Voxel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    v1 = _swig_property(_solnScatPot.Voxel_v1_get, _solnScatPot.Voxel_v1_set)
    v2 = _swig_property(_solnScatPot.Voxel_v2_get, _solnScatPot.Voxel_v2_set)
    v3 = _swig_property(_solnScatPot.Voxel_v3_get, _solnScatPot.Voxel_v3_set)
    v1i = _swig_property(_solnScatPot.Voxel_v1i_get, _solnScatPot.Voxel_v1i_set)
    v2i = _swig_property(_solnScatPot.Voxel_v2i_get, _solnScatPot.Voxel_v2i_set)
    v3i = _swig_property(_solnScatPot.Voxel_v3i_get, _solnScatPot.Voxel_v3i_set)
    vol = _swig_property(_solnScatPot.Voxel_vol_get, _solnScatPot.Voxel_vol_set)

    def __init__(self, *args, **kwargs):
        this = _solnScatPot.new_Voxel(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _solnScatPot.delete_Voxel
    __del__ = lambda self: None

class VoxelPtr(Voxel):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Voxel

Voxel_swigregister = _solnScatPot.Voxel_swigregister
Voxel_swigregister(Voxel)

class SolnScat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CALC_N2 = _solnScatPot.SolnScat_CALC_N2
    CALC_N = _solnScatPot.SolnScat_CALC_N
    CALC_UNIFORM = _solnScatPot.SolnScat_CALC_UNIFORM
    CALC_MULTIPOLE = _solnScatPot.SolnScat_CALC_MULTIPOLE
    CALC_CURRENT = _solnScatPot.SolnScat_CALC_CURRENT
    CALC_REFERENCE = _solnScatPot.SolnScat_CALC_REFERENCE
    CALC_NONE = _solnScatPot.SolnScat_CALC_NONE
    RADIUS = _solnScatPot.SolnScat_RADIUS
    VOLUME = _solnScatPot.SolnScat_VOLUME

    def __init__(self, *args, **kwargs):
        this = _solnScatPot.new_SolnScat(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    F = _swig_property(_solnScatPot.SolnScat_F_get, _solnScatPot.SolnScat_F_set)

    def convertFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScat_convertFormFactors(self, *args, **kwargs)

    def qValues(self, *args, **kwargs):
        return _solnScatPot.SolnScat_qValues(self, *args, **kwargs)

    def setQValues(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setQValues(self, *args, **kwargs)

    def formFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScat_formFactors(self, *args, **kwargs)

    def iFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScat_iFormFactors(self, *args, **kwargs)

    def radii(self, *args, **kwargs):
        return _solnScatPot.SolnScat_radii(self, *args, **kwargs)

    def aveRadius(self, *args, **kwargs):
        return _solnScatPot.SolnScat_aveRadius(self, *args, **kwargs)

    def aveVolume(self, *args, **kwargs):
        return _solnScatPot.SolnScat_aveVolume(self, *args, **kwargs)

    def setFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setFormFactors(self, *args, **kwargs)

    def setIFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setIFormFactors(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _solnScatPot.SolnScat_selection(self, *args, **kwargs)

    def radiusScale(self, *args, **kwargs):
        return _solnScatPot.SolnScat_radiusScale(self, *args, **kwargs)

    def setRadiusScale(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setRadiusScale(self, *args, **kwargs)

    def volumeScale(self, *args, **kwargs):
        return _solnScatPot.SolnScat_volumeScale(self, *args, **kwargs)

    def setVolumeScale(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setVolumeScale(self, *args, **kwargs)

    def radiusType(self, *args, **kwargs):
        return _solnScatPot.SolnScat_radiusType(self, *args, **kwargs)

    def setRadiusType(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setRadiusType(self, *args, **kwargs)

    def rho0(self, *args, **kwargs):
        return _solnScatPot.SolnScat_rho0(self, *args, **kwargs)

    def setRho0(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setRho0(self, *args, **kwargs)

    def formScale(self, *args, **kwargs):
        return _solnScatPot.SolnScat_formScale(self, *args, **kwargs)

    def setFormScale(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setFormScale(self, *args, **kwargs)

    def calc_g(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calc_g(self, *args, **kwargs)

    def numAngles(self, *args, **kwargs):
        return _solnScatPot.SolnScat_numAngles(self, *args, **kwargs)

    def setNumAngles(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setNumAngles(self, *args, **kwargs)
    QValues = _swig_property(_solnScatPot.SolnScat_QValues_get, _solnScatPot.SolnScat_QValues_set)

    def lMax(self, *args, **kwargs):
        return _solnScatPot.SolnScat_lMax(self, *args, **kwargs)

    def setLMax(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setLMax(self, *args, **kwargs)

    def calcType(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcType(self, *args, **kwargs)

    def setCalcType(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setCalcType(self, *args, **kwargs)

    def angleType(self, *args, **kwargs):
        return _solnScatPot.SolnScat_angleType(self, *args, **kwargs)

    def setAngleType(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setAngleType(self, *args, **kwargs)

    def calcI(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcI(self, *args, **kwargs)

    def calcIFromPos(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcIFromPos(self, *args, **kwargs)

    def calcI_N2(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcI_N2(self, *args, **kwargs)

    def calcI_N(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcI_N(self, *args, **kwargs)

    def calcI_uniform(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcI_uniform(self, *args, **kwargs)

    def calcI_multipole(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcI_multipole(self, *args, **kwargs)

    def calcDerivs(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcDerivs(self, *args, **kwargs)
    fValues = _swig_property(_solnScatPot.SolnScat_fValues_get, _solnScatPot.SolnScat_fValues_set)

    def globs(self, *args, **kwargs):
        return _solnScatPot.SolnScat_globs(self, *args, **kwargs)

    def setGlobs(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setGlobs(self, *args, **kwargs)

    def useGlobs(self, *args, **kwargs):
        return _solnScatPot.SolnScat_useGlobs(self, *args, **kwargs)

    def setUseGlobs(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setUseGlobs(self, *args, **kwargs)

    def calcPosGlob(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcPosGlob(self, *args, **kwargs)

    def calcFGlob(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcFGlob(self, *args, **kwargs)
    posGlob = _swig_property(_solnScatPot.SolnScat_posGlob_get, _solnScatPot.SolnScat_posGlob_set)
    posCenter = _swig_property(_solnScatPot.SolnScat_posCenter_get, _solnScatPot.SolnScat_posCenter_set)
    fGlob = _swig_property(_solnScatPot.SolnScat_fGlob_get, _solnScatPot.SolnScat_fGlob_set)

    def getF(self, *args, **kwargs):
        return _solnScatPot.SolnScat_getF(self, *args, **kwargs)
    boundaryI_ = _swig_property(_solnScatPot.SolnScat_boundaryI__get, _solnScatPot.SolnScat_boundaryI__set)

    def boundaryI(self, *args, **kwargs):
        return _solnScatPot.SolnScat_boundaryI(self, *args, **kwargs)

    def rhob(self, *args, **kwargs):
        return _solnScatPot.SolnScat_rhob(self, *args, **kwargs)

    def setRhob(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setRhob(self, *args, **kwargs)

    def calcBoundary(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcBoundary(self, *args, **kwargs)

    def setCalcBoundary(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setCalcBoundary(self, *args, **kwargs)

    def boundaryThickness(self, *args, **kwargs):
        return _solnScatPot.SolnScat_boundaryThickness(self, *args, **kwargs)

    def setBoundaryThickness(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setBoundaryThickness(self, *args, **kwargs)

    def solventRadius(self, *args, **kwargs):
        return _solnScatPot.SolnScat_solventRadius(self, *args, **kwargs)

    def setSolventRadius(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setSolventRadius(self, *args, **kwargs)
    surfaceAreaFraction = _swig_property(_solnScatPot.SolnScat_surfaceAreaFraction_get, _solnScatPot.SolnScat_surfaceAreaFraction_set)
    badVoxelFraction = _swig_property(_solnScatPot.SolnScat_badVoxelFraction_get, _solnScatPot.SolnScat_badVoxelFraction_set)

    def boundaryVol(self, *args, **kwargs):
        return _solnScatPot.SolnScat_boundaryVol(self, *args, **kwargs)

    def calcBoundaryPoints(self, *args, **kwargs):
        return _solnScatPot.SolnScat_calcBoundaryPoints(self, *args, **kwargs)
    boundaryPoints = _swig_property(_solnScatPot.SolnScat_boundaryPoints_get, _solnScatPot.SolnScat_boundaryPoints_set)
    boundaryF = _swig_property(_solnScatPot.SolnScat_boundaryF_get, _solnScatPot.SolnScat_boundaryF_set)

    def verbose(self, *args, **kwargs):
        return _solnScatPot.SolnScat_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setVerbose(self, *args, **kwargs)
    rigidRegions = _swig_property(_solnScatPot.SolnScat_rigidRegions_get, _solnScatPot.SolnScat_rigidRegions_set)
    rigidRegionModified = _swig_property(_solnScatPot.SolnScat_rigidRegionModified_get, _solnScatPot.SolnScat_rigidRegionModified_set)

    def rigidRegion(self, *args, **kwargs):
        return _solnScatPot.SolnScat_rigidRegion(self, *args, **kwargs)

    def numRigidRegions(self, *args, **kwargs):
        return _solnScatPot.SolnScat_numRigidRegions(self, *args, **kwargs)

    def addRigidRegion(self, *args, **kwargs):
        return _solnScatPot.SolnScat_addRigidRegion(self, *args, **kwargs)

    def freeSurfVoxels(self, *args, **kwargs):
        return _solnScatPot.SolnScat_freeSurfVoxels(self, *args, **kwargs)

    def setFreeSurfVoxels(self, *args, **kwargs):
        return _solnScatPot.SolnScat_setFreeSurfVoxels(self, *args, **kwargs)
    surfVoxelsP = _swig_property(_solnScatPot.SolnScat_surfVoxelsP_get, _solnScatPot.SolnScat_surfVoxelsP_set)

    def surfVoxels(self, *args, **kwargs):
        return _solnScatPot.SolnScat_surfVoxels(self, *args, **kwargs)
    __swig_destroy__ = _solnScatPot.delete_SolnScat
    __del__ = lambda self: None

class SolnScatPtr(SolnScat):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SolnScat

SolnScat_swigregister = _solnScatPot.SolnScat_swigregister
SolnScat_swigregister(SolnScat)

class SolnScatRigid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _solnScatPot.new_SolnScatRigid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _solnScatPot.delete_SolnScatRigid
    __del__ = lambda self: None
    sphereInterp = _swig_property(_solnScatPot.SolnScatRigid_sphereInterp_get, _solnScatPot.SolnScatRigid_sphereInterp_set)
    fitter = _swig_property(_solnScatPot.SolnScatRigid_fitter_get, _solnScatPot.SolnScatRigid_fitter_set)
    F = _swig_property(_solnScatPot.SolnScatRigid_F_get, _solnScatPot.SolnScatRigid_F_set)
    relAtomIndices = _swig_property(_solnScatPot.SolnScatRigid_relAtomIndices_get, _solnScatPot.SolnScatRigid_relAtomIndices_set)
    relGlobIndices = _swig_property(_solnScatPot.SolnScatRigid_relGlobIndices_get, _solnScatPot.SolnScatRigid_relGlobIndices_set)

    def update(self, *args, **kwargs):
        return _solnScatPot.SolnScatRigid_update(self, *args, **kwargs)

    def calcFContrib(self, *args, **kwargs):
        return _solnScatPot.SolnScatRigid_calcFContrib(self, *args, **kwargs)

    def derivContrib(self, *args, **kwargs):
        return _solnScatPot.SolnScatRigid_derivContrib(self, *args, **kwargs)

    def calcFatQ(self, *args, **kwargs):
        return _solnScatPot.SolnScatRigid_calcFatQ(self, *args, **kwargs)

class SolnScatRigidPtr(SolnScatRigid):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SolnScatRigid

SolnScatRigid_swigregister = _solnScatPot.SolnScatRigid_swigregister
SolnScatRigid_swigregister(SolnScatRigid)

class SolnScatPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CMP_LOG = _solnScatPot.SolnScatPot_LetterClass_CMP_LOG
    CMP_PLAIN = _solnScatPot.SolnScatPot_LetterClass_CMP_PLAIN

    def __init__(self, *args, **kwargs):
        this = _solnScatPot.new_SolnScatPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    globCorrectCalcType_ = _swig_property(_solnScatPot.SolnScatPot_LetterClass_globCorrectCalcType__get, _solnScatPot.SolnScatPot_LetterClass_globCorrectCalcType__set)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_energyMaybeDerivs2(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_numRestraints(self, *args, **kwargs)

    def simulation(self, *args):
        return _solnScatPot.SolnScatPot_LetterClass_simulation(self, *args)

    def info(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_info(self, *args, **kwargs)

    def qValuesExpt(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_qValuesExpt(self, *args, **kwargs)

    def expt(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_expt(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_calcd(self, *args, **kwargs)

    def splined(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_splined(self, *args, **kwargs)

    def setQValues(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setQValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_updateDelta(self, *args, **kwargs)

    def weights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_weights(self, *args, **kwargs)

    def setWeights(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setWeights(self, *args, **kwargs)

    def setExpt(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setExpt(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setVerbose(self, *args, **kwargs)

    def cmpType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_cmpType(self, *args, **kwargs)

    def setCmpType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setCmpType(self, *args, **kwargs)

    def normalizeIndex(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_normalizeIndex(self, *args, **kwargs)

    def setNormalizeIndex(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setNormalizeIndex(self, *args, **kwargs)

    def exptScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_exptScale(self, *args, **kwargs)

    def calcdScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_calcdScale(self, *args, **kwargs)

    def I_contrib(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_I_contrib(self, *args, **kwargs)

    def globCorrectCalcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_globCorrectCalcType(self, *args, **kwargs)

    def setGlobCorrectCalcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setGlobCorrectCalcType(self, *args, **kwargs)

    def calcDerivs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_calcDerivs(self, *args, **kwargs)

    def calcGlobCorrect_calcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_calcGlobCorrect_calcType(self, *args, **kwargs)

    def calcGlobCorrect_vec(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_calcGlobCorrect_vec(self, *args, **kwargs)

    def updateGlobCorrect(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_updateGlobCorrect(self, *args, **kwargs)

    def globCorrectReference(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_globCorrectReference(self, *args, **kwargs)

    def setGlobCorrectReference(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setGlobCorrectReference(self, *args, **kwargs)

    def globCorrectNeedsUpdating(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_globCorrectNeedsUpdating(self, *args, **kwargs)

    def setGlobCorrectNeedsUpdating(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setGlobCorrectNeedsUpdating(self, *args, **kwargs)

    def globCorrectSteps(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_globCorrectSteps(self, *args, **kwargs)

    def setGlobCorrectSteps(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setGlobCorrectSteps(self, *args, **kwargs)

    def globCorrectMovement(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_globCorrectMovement(self, *args, **kwargs)

    def setGlobCorrectMovement(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setGlobCorrectMovement(self, *args, **kwargs)
    globCorrect = _swig_property(_solnScatPot.SolnScatPot_LetterClass_globCorrect_get, _solnScatPot.SolnScatPot_LetterClass_globCorrect_set)
    dIs_dI = _swig_property(_solnScatPot.SolnScatPot_LetterClass_dIs_dI_get, _solnScatPot.SolnScatPot_LetterClass_dIs_dI_set)

    def boundaryI(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_boundaryI(self, *args, **kwargs)

    def bg(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_bg(self, *args, **kwargs)

    def setBG(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setBG(self, *args, **kwargs)

    def solnScat(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_solnScat(self, *args, **kwargs)

    def convertFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_convertFormFactors(self, *args, **kwargs)

    def qValues(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_qValues(self, *args, **kwargs)

    def formFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_formFactors(self, *args, **kwargs)

    def iFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_iFormFactors(self, *args, **kwargs)

    def radii(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_radii(self, *args, **kwargs)

    def aveRadius(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_aveRadius(self, *args, **kwargs)

    def aveVolume(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_aveVolume(self, *args, **kwargs)

    def setFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setFormFactors(self, *args, **kwargs)

    def setIFormFactors(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setIFormFactors(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_selection(self, *args, **kwargs)

    def radiusScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_radiusScale(self, *args, **kwargs)

    def setRadiusScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setRadiusScale(self, *args, **kwargs)

    def volumeScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_volumeScale(self, *args, **kwargs)

    def setVolumeScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setVolumeScale(self, *args, **kwargs)

    def radiusType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_radiusType(self, *args, **kwargs)

    def setRadiusType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setRadiusType(self, *args, **kwargs)

    def rho0(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_rho0(self, *args, **kwargs)

    def setRho0(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setRho0(self, *args, **kwargs)

    def formScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_formScale(self, *args, **kwargs)

    def setFormScale(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setFormScale(self, *args, **kwargs)

    def numAngles(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_numAngles(self, *args, **kwargs)

    def setNumAngles(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setNumAngles(self, *args, **kwargs)

    def lMax(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_lMax(self, *args, **kwargs)

    def setLMax(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setLMax(self, *args, **kwargs)

    def calcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_calcType(self, *args, **kwargs)

    def setCalcType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setCalcType(self, *args, **kwargs)

    def angleType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_angleType(self, *args, **kwargs)

    def setAngleType(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setAngleType(self, *args, **kwargs)

    def setGlobs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setGlobs(self, *args, **kwargs)

    def useGlobs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_useGlobs(self, *args, **kwargs)

    def setUseGlobs(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setUseGlobs(self, *args, **kwargs)

    def getF(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_getF(self, *args, **kwargs)

    def rhob(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_rhob(self, *args, **kwargs)

    def setRhob(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setRhob(self, *args, **kwargs)

    def calcBoundary(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_calcBoundary(self, *args, **kwargs)

    def setCalcBoundary(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setCalcBoundary(self, *args, **kwargs)

    def boundaryThickness(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_boundaryThickness(self, *args, **kwargs)

    def setBoundaryThickness(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setBoundaryThickness(self, *args, **kwargs)

    def solventRadius(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_solventRadius(self, *args, **kwargs)

    def setSolventRadius(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_setSolventRadius(self, *args, **kwargs)

    def boundaryVol(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_boundaryVol(self, *args, **kwargs)

    def calcBoundaryPoints(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_calcBoundaryPoints(self, *args, **kwargs)

    def addRigidRegion(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_addRigidRegion(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _solnScatPot.SolnScatPot_LetterClass_help(self, *args, **kwargs)
    __swig_destroy__ = _solnScatPot.delete_SolnScatPot_LetterClass
    __del__ = lambda self: None

class SolnScatPot_LetterClassPtr(SolnScatPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SolnScatPot_LetterClass

SolnScatPot_LetterClass_swigregister = _solnScatPot.SolnScatPot_LetterClass_swigregister
SolnScatPot_LetterClass_swigregister(SolnScatPot_LetterClass)

class CDSVector_CDSVector_Complex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___len__(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex_resize(self, *args, **kwargs)

    def set(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex_set(self, *args, **kwargs)

    def __init__(self, *args):
        this = _solnScatPot.new_CDSVector_CDSVector_Complex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex_get(self, *args, **kwargs)

    def fromList(s,l):
        s.resize(len(l)) 
        for i in range( len(s) ):
            s[i] = l[i]
        return s


    def __setitem__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___getslice__(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        arg = args[0]
        if type(arg) is slice:
            if not (arg.step==None or arg.step==1):
                raise Exception("slice step!=1 not supported: " +
                                str(arg.step))
            start=arg.start if arg.start!=None else 0
            stop=arg.stop if arg.stop!=None else len(self)
            return self.__getslice__(start,stop)
        else:
            return self.get(arg)


    def __pow__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___pow__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex_help(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex_scale(self, *args, **kwargs)

    def __add__(self, *args):
        return _solnScatPot.CDSVector_CDSVector_Complex___add__(self, *args)

    def __radd__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___radd__(self, *args, **kwargs)

    def __sub__(self, *args):
        return _solnScatPot.CDSVector_CDSVector_Complex___sub__(self, *args)

    def __rsub__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___rsub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _solnScatPot.CDSVector_CDSVector_Complex___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___rmul__(self, *args, **kwargs)

    def __truediv__(self, *args):
        return _solnScatPot.CDSVector_CDSVector_Complex___truediv__(self, *args)

    def __rtruediv__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___rtruediv__(self, *args, **kwargs)

    def __imul__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___imul__(self, *args, **kwargs)

    def __itruediv__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___itruediv__(self, *args, **kwargs)

    def __iadd__(self, *args):
        return _solnScatPot.CDSVector_CDSVector_Complex___iadd__(self, *args)

    def __isub__(self, *args):
        return _solnScatPot.CDSVector_CDSVector_Complex___isub__(self, *args)

    def __neg__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___neg__(self, *args, **kwargs)

    def __str__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_CDSVector_Complex___str__(self, *args, **kwargs)
    __swig_destroy__ = _solnScatPot.delete_CDSVector_CDSVector_Complex
    __del__ = lambda self: None

class CDSVector_CDSVector_ComplexPtr(CDSVector_CDSVector_Complex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSVector_CDSVector_Complex

CDSVector_CDSVector_Complex_swigregister = _solnScatPot.CDSVector_CDSVector_Complex_swigregister
CDSVector_CDSVector_Complex_swigregister(CDSVector_CDSVector_Complex)

class CDSList_FloatPair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _solnScatPot.CDSList_FloatPair___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _solnScatPot.new_CDSList_FloatPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _solnScatPot.CDSList_FloatPair___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _solnScatPot.CDSList_FloatPair___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _solnScatPot.CDSList_FloatPair_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _solnScatPot.CDSList_FloatPair_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _solnScatPot.CDSList_FloatPair_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _solnScatPot.CDSList_FloatPair___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _solnScatPot.CDSList_FloatPair___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _solnScatPot.CDSList_FloatPair_help(self, *args, **kwargs)
    __swig_destroy__ = _solnScatPot.delete_CDSList_FloatPair
    __del__ = lambda self: None

class CDSList_FloatPairPtr(CDSList_FloatPair):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_FloatPair

CDSList_FloatPair_swigregister = _solnScatPot.CDSList_FloatPair_swigregister
CDSList_FloatPair_swigregister(CDSList_FloatPair)

class CDSList_Voxel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _solnScatPot.CDSList_Voxel___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _solnScatPot.new_CDSList_Voxel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _solnScatPot.CDSList_Voxel___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _solnScatPot.CDSList_Voxel___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _solnScatPot.CDSList_Voxel_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _solnScatPot.CDSList_Voxel_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _solnScatPot.CDSList_Voxel_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _solnScatPot.CDSList_Voxel___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _solnScatPot.CDSList_Voxel___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _solnScatPot.CDSList_Voxel_help(self, *args, **kwargs)
    __swig_destroy__ = _solnScatPot.delete_CDSList_Voxel
    __del__ = lambda self: None

class CDSList_VoxelPtr(CDSList_Voxel):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Voxel

CDSList_Voxel_swigregister = _solnScatPot.CDSList_Voxel_swigregister
CDSList_Voxel_swigregister(CDSList_Voxel)

class InterpSphere_CDSVector_complex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __call__(self, *args, **kwargs):
        return _solnScatPot.InterpSphere_CDSVector_complex___call__(self, *args, **kwargs)

    def derivs(self, *args, **kwargs):
        return _solnScatPot.InterpSphere_CDSVector_complex_derivs(self, *args, **kwargs)

    def valAndDerivs(self, *args, **kwargs):
        return _solnScatPot.InterpSphere_CDSVector_complex_valAndDerivs(self, *args, **kwargs)
    __swig_destroy__ = _solnScatPot.delete_InterpSphere_CDSVector_complex
    __del__ = lambda self: None

class InterpSphere_CDSVector_complexPtr(InterpSphere_CDSVector_complex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = InterpSphere_CDSVector_complex

InterpSphere_CDSVector_complex_swigregister = _solnScatPot.InterpSphere_CDSVector_complex_swigregister
InterpSphere_CDSVector_complex_swigregister(InterpSphere_CDSVector_complex)

class CDSVector_complex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___len__(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex_resize(self, *args, **kwargs)

    def set(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex_set(self, *args, **kwargs)

    def __init__(self, *args):
        this = _solnScatPot.new_CDSVector_complex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex_get(self, *args, **kwargs)

    def fromList(s,l):
        s.resize(len(l)) 
        for i in range( len(s) ):
            s[i] = l[i]
        return s


    def __setitem__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___getslice__(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        arg = args[0]
        if type(arg) is slice:
            if not (arg.step==None or arg.step==1):
                raise Exception("slice step!=1 not supported: " +
                                str(arg.step))
            start=arg.start if arg.start!=None else 0
            stop=arg.stop if arg.stop!=None else len(self)
            return self.__getslice__(start,stop)
        else:
            return self.get(arg)


    def __pow__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___pow__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex_help(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex_scale(self, *args, **kwargs)

    def __add__(self, *args):
        return _solnScatPot.CDSVector_complex___add__(self, *args)

    def __radd__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___radd__(self, *args, **kwargs)

    def __sub__(self, *args):
        return _solnScatPot.CDSVector_complex___sub__(self, *args)

    def __rsub__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___rsub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _solnScatPot.CDSVector_complex___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___rmul__(self, *args, **kwargs)

    def __truediv__(self, *args):
        return _solnScatPot.CDSVector_complex___truediv__(self, *args)

    def __rtruediv__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___rtruediv__(self, *args, **kwargs)

    def __imul__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___imul__(self, *args, **kwargs)

    def __itruediv__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___itruediv__(self, *args, **kwargs)

    def __iadd__(self, *args):
        return _solnScatPot.CDSVector_complex___iadd__(self, *args)

    def __isub__(self, *args):
        return _solnScatPot.CDSVector_complex___isub__(self, *args)

    def __neg__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___neg__(self, *args, **kwargs)

    def __str__(self, *args, **kwargs):
        return _solnScatPot.CDSVector_complex___str__(self, *args, **kwargs)
    __swig_destroy__ = _solnScatPot.delete_CDSVector_complex
    __del__ = lambda self: None

class CDSVector_complexPtr(CDSVector_complex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSVector_complex

CDSVector_complex_swigregister = _solnScatPot.CDSVector_complex_swigregister
CDSVector_complex_swigregister(CDSVector_complex)


pyXplorHelp = help


def help(*args):
    return _solnScatPot.help(*args)
help = _solnScatPot.help


