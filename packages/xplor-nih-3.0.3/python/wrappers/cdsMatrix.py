# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cdsMatrix')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cdsMatrix')
    _cdsMatrix = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cdsMatrix', [dirname(__file__)])
        except ImportError:
            import _cdsMatrix
            return _cdsMatrix
        try:
            _mod = imp.load_module('_cdsMatrix', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cdsMatrix = swig_import_helper()
    del swig_import_helper
else:
    import _cdsMatrix
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


__sthead_hh__ = _cdsMatrix.__sthead_hh__

def omp_get_thread_num(*args):
    return _cdsMatrix.omp_get_thread_num(*args)
omp_get_thread_num = _cdsMatrix.omp_get_thread_num

def omp_get_max_threads(*args):
    return _cdsMatrix.omp_get_max_threads(*args)
omp_get_max_threads = _cdsMatrix.omp_get_max_threads
FALSE = _cdsMatrix.FALSE
TRUE = _cdsMatrix.TRUE
PI = _cdsMatrix.PI
class Mat3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cdsMatrix.new_Mat3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cdsMatrix.delete_Mat3
    __del__ = lambda self: None

class Mat3Ptr(Mat3):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Mat3

Mat3_swigregister = _cdsMatrix.Mat3_swigregister
Mat3_swigregister(Mat3)


def outerProd(*args, **kwargs):
    return _cdsMatrix.outerProd(*args, **kwargs)
outerProd = _cdsMatrix.outerProd

def crossMat(*args, **kwargs):
    return _cdsMatrix.crossMat(*args, **kwargs)
crossMat = _cdsMatrix.crossMat

def rotVector(*args, **kwargs):
    return _cdsMatrix.rotVector(*args, **kwargs)
rotVector = _cdsMatrix.rotVector
class CDSList_DComplex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_DComplex___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsMatrix.new_CDSList_DComplex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cdsMatrix.CDSList_DComplex___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_DComplex___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cdsMatrix.CDSList_DComplex_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cdsMatrix.CDSList_DComplex_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cdsMatrix.CDSList_DComplex_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_DComplex___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_DComplex___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsMatrix.CDSList_DComplex_help(self, *args, **kwargs)
    __swig_destroy__ = _cdsMatrix.delete_CDSList_DComplex
    __del__ = lambda self: None

class CDSList_DComplexPtr(CDSList_DComplex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_DComplex

CDSList_DComplex_swigregister = _cdsMatrix.CDSList_DComplex_swigregister
CDSList_DComplex_swigregister(CDSList_DComplex)

class CDSList_EigenPair_DComplex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_DComplex___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsMatrix.new_CDSList_EigenPair_DComplex(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cdsMatrix.CDSList_EigenPair_DComplex___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_DComplex___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_DComplex_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_DComplex_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_DComplex_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_DComplex___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_DComplex___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_DComplex_help(self, *args, **kwargs)
    __swig_destroy__ = _cdsMatrix.delete_CDSList_EigenPair_DComplex
    __del__ = lambda self: None

class CDSList_EigenPair_DComplexPtr(CDSList_EigenPair_DComplex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_EigenPair_DComplex

CDSList_EigenPair_DComplex_swigregister = _cdsMatrix.CDSList_EigenPair_DComplex_swigregister
CDSList_EigenPair_DComplex_swigregister(CDSList_EigenPair_DComplex)

class CDSList_EigenPair_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_double___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsMatrix.new_CDSList_EigenPair_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cdsMatrix.CDSList_EigenPair_double___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_double___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_double_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_double_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_double_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_double___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_double___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsMatrix.CDSList_EigenPair_double_help(self, *args, **kwargs)
    __swig_destroy__ = _cdsMatrix.delete_CDSList_EigenPair_double
    __del__ = lambda self: None

class CDSList_EigenPair_doublePtr(CDSList_EigenPair_double):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_EigenPair_double

CDSList_EigenPair_double_swigregister = _cdsMatrix.CDSList_EigenPair_double_swigregister
CDSList_EigenPair_double_swigregister(CDSList_EigenPair_double)

class EigenPair_DComplex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cdsMatrix.new_EigenPair_DComplex(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self, *args, **kwargs):
        return _cdsMatrix.EigenPair_DComplex_value(self, *args, **kwargs)

    def vector(self, *args, **kwargs):
        return _cdsMatrix.EigenPair_DComplex_vector(self, *args, **kwargs)
    value_ = _swig_property(_cdsMatrix.EigenPair_DComplex_value__get, _cdsMatrix.EigenPair_DComplex_value__set)
    vector_ = _swig_property(_cdsMatrix.EigenPair_DComplex_vector__get, _cdsMatrix.EigenPair_DComplex_vector__set)
    __swig_destroy__ = _cdsMatrix.delete_EigenPair_DComplex
    __del__ = lambda self: None

class EigenPair_DComplexPtr(EigenPair_DComplex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EigenPair_DComplex

EigenPair_DComplex_swigregister = _cdsMatrix.EigenPair_DComplex_swigregister
EigenPair_DComplex_swigregister(EigenPair_DComplex)

class EigenPair_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cdsMatrix.new_EigenPair_double(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self, *args, **kwargs):
        return _cdsMatrix.EigenPair_double_value(self, *args, **kwargs)

    def vector(self, *args, **kwargs):
        return _cdsMatrix.EigenPair_double_vector(self, *args, **kwargs)
    value_ = _swig_property(_cdsMatrix.EigenPair_double_value__get, _cdsMatrix.EigenPair_double_value__set)
    vector_ = _swig_property(_cdsMatrix.EigenPair_double_vector__get, _cdsMatrix.EigenPair_double_vector__set)
    __swig_destroy__ = _cdsMatrix.delete_EigenPair_double
    __del__ = lambda self: None

class EigenPair_doublePtr(EigenPair_double):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EigenPair_double

EigenPair_double_swigregister = _cdsMatrix.EigenPair_double_swigregister
EigenPair_double_swigregister(EigenPair_double)


def eigen(*args):
    return _cdsMatrix.eigen(*args)
eigen = _cdsMatrix.eigen
class CDSMatrix_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def rows(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double_rows(self, *args, **kwargs)

    def cols(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double_cols(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double_resize(self, *args, **kwargs)

    def setDiag(self, *args):
        return _cdsMatrix.CDSMatrix_double_setDiag(self, *args)

    def scale(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double_scale(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsMatrix.new_CDSMatrix_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double___str__(self, *args, **kwargs)

    def __repr__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double___repr__(self, *args, **kwargs)

    def get(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double_get(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double___getitem__(self, *args, **kwargs)

    def set(self, *args):
        return _cdsMatrix.CDSMatrix_double_set(self, *args)

    def __setitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double___setitem__(self, *args, **kwargs)

    def fromList(s,l):
       for i in range( s.rows() ):
         for j in range( s.cols() ):
           s[i,j] =  l[i][j]
       return s


    def __add__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double___add__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double___iadd__(self, *args, **kwargs)

    def __sub__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double___sub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _cdsMatrix.CDSMatrix_double___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double___rmul__(self, *args, **kwargs)

    def __neg__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_double___neg__(self, *args, **kwargs)
    __swig_destroy__ = _cdsMatrix.delete_CDSMatrix_double
    __del__ = lambda self: None

class CDSMatrix_doublePtr(CDSMatrix_double):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSMatrix_double

CDSMatrix_double_swigregister = _cdsMatrix.CDSMatrix_double_swigregister
CDSMatrix_double_swigregister(CDSMatrix_double)

class CDSMatrix_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def rows(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int_rows(self, *args, **kwargs)

    def cols(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int_cols(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int_resize(self, *args, **kwargs)

    def setDiag(self, *args):
        return _cdsMatrix.CDSMatrix_int_setDiag(self, *args)

    def scale(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int_scale(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsMatrix.new_CDSMatrix_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int___str__(self, *args, **kwargs)

    def __repr__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int___repr__(self, *args, **kwargs)

    def get(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int_get(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int___getitem__(self, *args, **kwargs)

    def set(self, *args):
        return _cdsMatrix.CDSMatrix_int_set(self, *args)

    def __setitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int___setitem__(self, *args, **kwargs)

    def fromList(s,l):
       for i in range( s.rows() ):
         for j in range( s.cols() ):
           s[i,j] =  l[i][j]
       return s


    def __add__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int___add__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int___iadd__(self, *args, **kwargs)

    def __sub__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int___sub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _cdsMatrix.CDSMatrix_int___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int___rmul__(self, *args, **kwargs)

    def __neg__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_int___neg__(self, *args, **kwargs)
    __swig_destroy__ = _cdsMatrix.delete_CDSMatrix_int
    __del__ = lambda self: None

class CDSMatrix_intPtr(CDSMatrix_int):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSMatrix_int

CDSMatrix_int_swigregister = _cdsMatrix.CDSMatrix_int_swigregister
CDSMatrix_int_swigregister(CDSMatrix_int)

class CDSMatrix_DComplex2(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def rows(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2_rows(self, *args, **kwargs)

    def cols(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2_cols(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2_resize(self, *args, **kwargs)

    def setDiag(self, *args):
        return _cdsMatrix.CDSMatrix_DComplex2_setDiag(self, *args)

    def scale(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2_scale(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsMatrix.new_CDSMatrix_DComplex2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2___str__(self, *args, **kwargs)

    def __repr__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2___repr__(self, *args, **kwargs)

    def get(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2_get(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2___getitem__(self, *args, **kwargs)

    def set(self, *args):
        return _cdsMatrix.CDSMatrix_DComplex2_set(self, *args)

    def __setitem__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2___setitem__(self, *args, **kwargs)

    def fromList(s,l):
       for i in range( s.rows() ):
         for j in range( s.cols() ):
           s[i,j] =  l[i][j]
       return s


    def __add__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2___add__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2___iadd__(self, *args, **kwargs)

    def __sub__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2___sub__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _cdsMatrix.CDSMatrix_DComplex2___mul__(self, *args)

    def __rmul__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2___rmul__(self, *args, **kwargs)

    def __neg__(self, *args, **kwargs):
        return _cdsMatrix.CDSMatrix_DComplex2___neg__(self, *args, **kwargs)
    __swig_destroy__ = _cdsMatrix.delete_CDSMatrix_DComplex2
    __del__ = lambda self: None

class CDSMatrix_DComplex2Ptr(CDSMatrix_DComplex2):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSMatrix_DComplex2

CDSMatrix_DComplex2_swigregister = _cdsMatrix.CDSMatrix_DComplex2_swigregister
CDSMatrix_DComplex2_swigregister(CDSMatrix_DComplex2)


def fast_min(*args):
    return _cdsMatrix.fast_min(*args)
fast_min = _cdsMatrix.fast_min

def fast_max(*args):
    return _cdsMatrix.fast_max(*args)
fast_max = _cdsMatrix.fast_max
class SymMatrix_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def rows(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double_rows(self, *args, **kwargs)

    def cols(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double_cols(self, *args, **kwargs)

    def setDiag(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double_setDiag(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double_scale(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsMatrix.new_SymMatrix_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __str__(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double___str__(self, *args, **kwargs)

    def __repr__(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double___repr__(self, *args, **kwargs)

    def __getitem__(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double___getitem__(self, *args, **kwargs)

    def set(self, *args):
        return _cdsMatrix.SymMatrix_double_set(self, *args)

    def __setitem__(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double___setitem__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double___add__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double___iadd__(self, *args, **kwargs)

    def __sub__(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double___sub__(self, *args, **kwargs)

    def __rmul__(self, *args, **kwargs):
        return _cdsMatrix.SymMatrix_double___rmul__(self, *args, **kwargs)

    def __mul__(self, *args):
        return _cdsMatrix.SymMatrix_double___mul__(self, *args)
    __swig_destroy__ = _cdsMatrix.delete_SymMatrix_double
    __del__ = lambda self: None

class SymMatrix_doublePtr(SymMatrix_double):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SymMatrix_double

SymMatrix_double_swigregister = _cdsMatrix.SymMatrix_double_swigregister
SymMatrix_double_swigregister(SymMatrix_double)


def transpose(*args):
    return _cdsMatrix.transpose(*args)
transpose = _cdsMatrix.transpose

import cdsList


def min(*args):
 try:
   return fast_min(*args)
 except:
   import builtins
   return builtins.min(*args)
def max(*args):
 try:
   return fast_max(*args)
 except:
   import builtins
   return builtins.max(*args)
RMat = CDSMatrix_double	


def trace(m):
    ret=0
    for cnt in range(m.cols()):
        ret += m[cnt,cnt]
    return ret

def det(m):
    """ return the determinate of matrix m
    """
    vl = eigen(m)
    ret=1
    for v in vl:
        ret *= v.value()
        pass
    return ret

CDSMatrix_complex = CDSMatrix_DComplex2


def svd(*args):
    return _cdsMatrix.svd(*args)
svd = _cdsMatrix.svd

def inverse(*args):
    return _cdsMatrix.inverse(*args)
inverse = _cdsMatrix.inverse

def getRow(*args, **kwargs):
    return _cdsMatrix.getRow(*args, **kwargs)
getRow = _cdsMatrix.getRow

def getColumn(*args, **kwargs):
    return _cdsMatrix.getColumn(*args, **kwargs)
getColumn = _cdsMatrix.getColumn
class SVDResults_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    u = _swig_property(_cdsMatrix.SVDResults_double_u_get, _cdsMatrix.SVDResults_double_u_set)
    vT = _swig_property(_cdsMatrix.SVDResults_double_vT_get, _cdsMatrix.SVDResults_double_vT_set)
    sigma = _swig_property(_cdsMatrix.SVDResults_double_sigma_get, _cdsMatrix.SVDResults_double_sigma_set)

    def __init__(self, *args, **kwargs):
        this = _cdsMatrix.new_SVDResults_double(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cdsMatrix.delete_SVDResults_double
    __del__ = lambda self: None

class SVDResults_doublePtr(SVDResults_double):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SVDResults_double

SVDResults_double_swigregister = _cdsMatrix.SVDResults_double_swigregister
SVDResults_double_swigregister(SVDResults_double)


pyXplorHelp = help


def help(*args):
    return _cdsMatrix.help(*args)
help = _cdsMatrix.help


