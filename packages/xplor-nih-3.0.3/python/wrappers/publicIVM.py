# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_publicIVM')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_publicIVM')
    _publicIVM = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_publicIVM', [dirname(__file__)])
        except ImportError:
            import _publicIVM
            return _publicIVM
        try:
            _mod = imp.load_module('_publicIVM', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _publicIVM = swig_import_helper()
    del swig_import_helper
else:
    import _publicIVM
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class PyConvert_Exception(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arg2):
        this = _publicIVM.new_PyConvert_Exception(arg2)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _publicIVM.delete_PyConvert_Exception
    __del__ = lambda self: None

class PyConvert_ExceptionPtr(PyConvert_Exception):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PyConvert_Exception

PyConvert_Exception_swigregister = _publicIVM.PyConvert_Exception_swigregister
PyConvert_Exception_swigregister(PyConvert_Exception)


from _publicIVM import IVMError

class CDSList_PublicNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _publicIVM.CDSList_PublicNode___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _publicIVM.new_CDSList_PublicNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _publicIVM.CDSList_PublicNode___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _publicIVM.CDSList_PublicNode___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _publicIVM.CDSList_PublicNode_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _publicIVM.CDSList_PublicNode_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _publicIVM.CDSList_PublicNode_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _publicIVM.CDSList_PublicNode___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _publicIVM.CDSList_PublicNode___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _publicIVM.CDSList_PublicNode_help(self, *args, **kwargs)
    __swig_destroy__ = _publicIVM.delete_CDSList_PublicNode
    __del__ = lambda self: None

class CDSList_PublicNodePtr(CDSList_PublicNode):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_PublicNode

CDSList_PublicNode_swigregister = _publicIVM.CDSList_PublicNode_swigregister
CDSList_PublicNode_swigregister(CDSList_PublicNode)

class PublicIVM(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _publicIVM.new_PublicIVM(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _publicIVM.delete_PublicIVM
    __del__ = lambda self: None

    def simulation(self, *args, **kwargs):
        return _publicIVM.PublicIVM_simulation(self, *args, **kwargs)

    def init(self, *args, **kwargs):
        return _publicIVM.PublicIVM_init(self, *args, **kwargs)

    def initDynamics(self, *args, **kwargs):
        return _publicIVM.PublicIVM_initDynamics(self, *args, **kwargs)

    def step(self, *args, **kwargs):
        return _publicIVM.PublicIVM_step(self, *args, **kwargs)

    def groupTorsion(self, *args, **kwargs):
        return _publicIVM.PublicIVM_groupTorsion(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _publicIVM.PublicIVM_calcEnergy(self, *args, **kwargs)

    def calcTemperature(self, *args, **kwargs):
        return _publicIVM.PublicIVM_calcTemperature(self, *args, **kwargs)

    def forceRecalc(self, *args, **kwargs):
        return _publicIVM.PublicIVM_forceRecalc(self, *args, **kwargs)

    def clearRecalc(self, *args, **kwargs):
        return _publicIVM.PublicIVM_clearRecalc(self, *args, **kwargs)

    def eCountReset(self, *args, **kwargs):
        return _publicIVM.PublicIVM_eCountReset(self, *args, **kwargs)

    def resetCM(self, *args, **kwargs):
        return _publicIVM.PublicIVM_resetCM(self, *args, **kwargs)

    def idAtom(self, *args, **kwargs):
        return _publicIVM.PublicIVM_idAtom(self, *args, **kwargs)

    def setBondExclude(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setBondExclude(self, *args, **kwargs)

    def setGroupList(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setGroupList(self, *args, **kwargs)

    def setConstraintList(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setConstraintList(self, *args, **kwargs)

    def setOldBaseAtoms(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setOldBaseAtoms(self, *args, **kwargs)

    def setPos(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setPos(self, *args, **kwargs)

    def setVel(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setVel(self, *args, **kwargs)

    def nodeList(self, *args, **kwargs):
        return _publicIVM.PublicIVM_nodeList(self, *args, **kwargs)

    def setHingeList(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setHingeList(self, *args, **kwargs)

    def velFromCartesian(self, *args, **kwargs):
        return _publicIVM.PublicIVM_velFromCartesian(self, *args, **kwargs)

    def bondExclude(self, *args, **kwargs):
        return _publicIVM.PublicIVM_bondExclude(self, *args, **kwargs)

    def groupList(self, *args, **kwargs):
        return _publicIVM.PublicIVM_groupList(self, *args, **kwargs)

    def constraintList(self, *args, **kwargs):
        return _publicIVM.PublicIVM_constraintList(self, *args, **kwargs)

    def oldBaseAtoms(self, *args, **kwargs):
        return _publicIVM.PublicIVM_oldBaseAtoms(self, *args, **kwargs)

    def hingeList(self, *args, **kwargs):
        return _publicIVM.PublicIVM_hingeList(self, *args, **kwargs)

    def pos(self, *args, **kwargs):
        return _publicIVM.PublicIVM_pos(self, *args, **kwargs)

    def vel(self, *args, **kwargs):
        return _publicIVM.PublicIVM_vel(self, *args, **kwargs)

    def simulationGroupList(self, *args, **kwargs):
        return _publicIVM.PublicIVM_simulationGroupList(self, *args, **kwargs)

    def saveState(self, *args, **kwargs):
        return _publicIVM.PublicIVM_saveState(self, *args, **kwargs)

    def restoreState(self, *args, **kwargs):
        return _publicIVM.PublicIVM_restoreState(self, *args, **kwargs)

    def recenterLargeDispl(self, *args, **kwargs):
        return _publicIVM.PublicIVM_recenterLargeDispl(self, *args, **kwargs)

    def setRecenterLargeDispl(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setRecenterLargeDispl(self, *args, **kwargs)

    def dof(self, *args, **kwargs):
        return _publicIVM.PublicIVM_dof(self, *args, **kwargs)

    def dim(self, *args, **kwargs):
        return _publicIVM.PublicIVM_dim(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _publicIVM.PublicIVM_verbose(self, *args, **kwargs)

    def minimization(self, *args, **kwargs):
        return _publicIVM.PublicIVM_minimization(self, *args, **kwargs)

    def eCount(self, *args, **kwargs):
        return _publicIVM.PublicIVM_eCount(self, *args, **kwargs)

    def bathTemp(self, *args, **kwargs):
        return _publicIVM.PublicIVM_bathTemp(self, *args, **kwargs)

    def currentTemp(self, *args, **kwargs):
        return _publicIVM.PublicIVM_currentTemp(self, *args, **kwargs)

    def Etotal(self, *args, **kwargs):
        return _publicIVM.PublicIVM_Etotal(self, *args, **kwargs)

    def Epotential(self, *args, **kwargs):
        return _publicIVM.PublicIVM_Epotential(self, *args, **kwargs)

    def Ekinetic(self, *args, **kwargs):
        return _publicIVM.PublicIVM_Ekinetic(self, *args, **kwargs)

    def gradMagnitude(self, *args, **kwargs):
        return _publicIVM.PublicIVM_gradMagnitude(self, *args, **kwargs)

    def eTolerance(self, *args, **kwargs):
        return _publicIVM.PublicIVM_eTolerance(self, *args, **kwargs)

    def gTolerance(self, *args, **kwargs):
        return _publicIVM.PublicIVM_gTolerance(self, *args, **kwargs)

    def cTolerance(self, *args, **kwargs):
        return _publicIVM.PublicIVM_cTolerance(self, *args, **kwargs)

    def dEpred(self, *args, **kwargs):
        return _publicIVM.PublicIVM_dEpred(self, *args, **kwargs)

    def responseTime(self, *args, **kwargs):
        return _publicIVM.PublicIVM_responseTime(self, *args, **kwargs)

    def frictionCoeff(self, *args, **kwargs):
        return _publicIVM.PublicIVM_frictionCoeff(self, *args, **kwargs)

    def kBoltzmann(self, *args, **kwargs):
        return _publicIVM.PublicIVM_kBoltzmann(self, *args, **kwargs)

    def maxCalls(self, *args, **kwargs):
        return _publicIVM.PublicIVM_maxCalls(self, *args, **kwargs)

    def constrainLengths(self, *args, **kwargs):
        return _publicIVM.PublicIVM_constrainLengths(self, *args, **kwargs)

    def adjustStepsize(self, *args, **kwargs):
        return _publicIVM.PublicIVM_adjustStepsize(self, *args, **kwargs)

    def scaleVel(self, *args, **kwargs):
        return _publicIVM.PublicIVM_scaleVel(self, *args, **kwargs)

    def maxTSFactor(self, *args, **kwargs):
        return _publicIVM.PublicIVM_maxTSFactor(self, *args, **kwargs)

    def maxDeltaE(self, *args, **kwargs):
        return _publicIVM.PublicIVM_maxDeltaE(self, *args, **kwargs)

    def minStepSize(self, *args, **kwargs):
        return _publicIVM.PublicIVM_minStepSize(self, *args, **kwargs)

    def stepType(self, *args, **kwargs):
        return _publicIVM.PublicIVM_stepType(self, *args, **kwargs)

    def potList(self, *args):
        return _publicIVM.PublicIVM_potList(self, *args)

    def setVerbose(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setVerbose(self, *args, **kwargs)

    def setConstrainLengths(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setConstrainLengths(self, *args, **kwargs)

    def setStepType(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setStepType(self, *args, **kwargs)

    def setBathTemp(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setBathTemp(self, *args, **kwargs)

    def setETolerance(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setETolerance(self, *args, **kwargs)

    def setGTolerance(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setGTolerance(self, *args, **kwargs)

    def setCTolerance(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setCTolerance(self, *args, **kwargs)

    def setDEpred(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setDEpred(self, *args, **kwargs)

    def setResponseTime(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setResponseTime(self, *args, **kwargs)

    def setFrictionCoeff(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setFrictionCoeff(self, *args, **kwargs)

    def setMaxCalls(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setMaxCalls(self, *args, **kwargs)

    def setAdjustStepsize(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setAdjustStepsize(self, *args, **kwargs)

    def setScaleVel(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setScaleVel(self, *args, **kwargs)

    def setMaxTSFactor(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setMaxTSFactor(self, *args, **kwargs)

    def setMaxDeltaE(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setMaxDeltaE(self, *args, **kwargs)

    def setMinStepSize(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setMinStepSize(self, *args, **kwargs)

    def setPotList(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setPotList(self, *args, **kwargs)

    def printStepDetails(self, *args, **kwargs):
        return _publicIVM.PublicIVM_printStepDetails(self, *args, **kwargs)
    printCoords = _publicIVM.PublicIVM_printCoords
    printResetCM = _publicIVM.PublicIVM_printResetCM
    printVelFromCartCost = _publicIVM.PublicIVM_printVelFromCartCost
    printTemperature = _publicIVM.PublicIVM_printTemperature
    printEnergy = _publicIVM.PublicIVM_printEnergy
    printCMVel = _publicIVM.PublicIVM_printCMVel
    printNodeForce = _publicIVM.PublicIVM_printNodeForce
    printNodePos = _publicIVM.PublicIVM_printNodePos
    printNodeTheta = _publicIVM.PublicIVM_printNodeTheta
    printStepDebug = _publicIVM.PublicIVM_printStepDebug
    printStepInfo = _publicIVM.PublicIVM_printStepInfo
    printNodeDef = _publicIVM.PublicIVM_printNodeDef
    printLoopDebug = _publicIVM.PublicIVM_printLoopDebug
    printLoopInfo = _publicIVM.PublicIVM_printLoopInfo
    printNodeKE = _publicIVM.PublicIVM_printNodeKE

    def setRVecSize(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setRVecSize(self, *args, **kwargs)

    def setRVecProd(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setRVecProd(self, *args, **kwargs)

    def setVecVec3Size(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setVecVec3Size(self, *args, **kwargs)

    def setVecVec3Prod(self, *args, **kwargs):
        return _publicIVM.PublicIVM_setVecVec3Prod(self, *args, **kwargs)

    def breakAllBondsIn(self, *args, **kwargs):
        return _publicIVM.PublicIVM_breakAllBondsIn(self, *args, **kwargs)

class PublicIVMPtr(PublicIVM):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PublicIVM

PublicIVM_swigregister = _publicIVM.PublicIVM_swigregister
PublicIVM_swigregister(PublicIVM)

class PublicNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def dim(self, *args, **kwargs):
        return _publicIVM.PublicNode_dim(self, *args, **kwargs)

    def setDim(self, *args, **kwargs):
        return _publicIVM.PublicNode_setDim(self, *args, **kwargs)

    def startIndex(self, *args, **kwargs):
        return _publicIVM.PublicNode_startIndex(self, *args, **kwargs)

    def setStartIndex(self, *args, **kwargs):
        return _publicIVM.PublicNode_setStartIndex(self, *args, **kwargs)

    def parentAtom(self, *args, **kwargs):
        return _publicIVM.PublicNode_parentAtom(self, *args, **kwargs)

    def setParentAtom(self, *args, **kwargs):
        return _publicIVM.PublicNode_setParentAtom(self, *args, **kwargs)

    def type(self, *args, **kwargs):
        return _publicIVM.PublicNode_type(self, *args, **kwargs)

    def atoms(self, *args, **kwargs):
        return _publicIVM.PublicNode_atoms(self, *args, **kwargs)

    def setType(self, *args, **kwargs):
        return _publicIVM.PublicNode_setType(self, *args, **kwargs)

    def setAtoms(self, *args, **kwargs):
        return _publicIVM.PublicNode_setAtoms(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _publicIVM.new_PublicNode(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _publicIVM.delete_PublicNode
    __del__ = lambda self: None

class PublicNodePtr(PublicNode):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PublicNode

PublicNode_swigregister = _publicIVM.PublicNode_swigregister
PublicNode_swigregister(PublicNode)


pyXplorHelp = help


def help(*args):
    return _publicIVM.help(*args)
help = _publicIVM.help


