# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gyrPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gyrPot')
    _gyrPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gyrPot', [dirname(__file__)])
        except ImportError:
            import _gyrPot
            return _gyrPot
        try:
            _mod = imp.load_module('_gyrPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _gyrPot = swig_import_helper()
    del swig_import_helper
else:
    import _gyrPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _gyrPot.Modified_MOD_SELF
    MOD_SIMULATION = _gyrPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _gyrPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _gyrPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _gyrPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _gyrPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _gyrPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _gyrPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _gyrPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _gyrPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_gyrPot.ModifiedBase_modified_get, _gyrPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_gyrPot.ModifiedBase_registeredSimulations_get, _gyrPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _gyrPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _gyrPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _gyrPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _gyrPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _gyrPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_gyrPot.VarEnsWeights_ensWeights_get, _gyrPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_gyrPot.VarEnsWeights_mult_get, _gyrPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _gyrPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gyrPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _gyrPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gyrPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _gyrPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _gyrPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _gyrPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _gyrPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gyrPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _gyrPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class CDSList_EigenPair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _gyrPot.CDSList_EigenPair___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _gyrPot.new_CDSList_EigenPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _gyrPot.CDSList_EigenPair___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _gyrPot.CDSList_EigenPair___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _gyrPot.CDSList_EigenPair_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _gyrPot.CDSList_EigenPair_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _gyrPot.CDSList_EigenPair_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _gyrPot.CDSList_EigenPair___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _gyrPot.CDSList_EigenPair___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _gyrPot.CDSList_EigenPair_help(self, *args, **kwargs)
    __swig_destroy__ = _gyrPot.delete_CDSList_EigenPair
    __del__ = lambda self: None

class CDSList_EigenPairPtr(CDSList_EigenPair):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_EigenPair

CDSList_EigenPair_swigregister = _gyrPot.CDSList_EigenPair_swigregister
CDSList_EigenPair_swigregister(CDSList_EigenPair)

class GyrPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _gyrPot.new_GyrPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _gyrPot.GyrPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _gyrPot.GyrPot___ref__(self, *args, **kwargs)

    def valuesVectors(self, *args, **kwargs):
        return _gyrPot.GyrPot_valuesVectors(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _gyrPot.GyrPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _gyrPot.GyrPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _gyrPot.GyrPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _gyrPot.GyrPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _gyrPot.GyrPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _gyrPot.GyrPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _gyrPot.delete_GyrPot
    __del__ = lambda self: None

    def updateValues(self, *args, **kwargs):
        return _gyrPot.GyrPot_updateValues(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _gyrPot.GyrPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _gyrPot.GyrPot_energyMaybeDerivs1(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _gyrPot.GyrPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _gyrPot.GyrPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _gyrPot.GyrPot_numRestraints(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _gyrPot.GyrPot_selection(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _gyrPot.GyrPot_info(self, *args, **kwargs)

    def targetType(self, *args, **kwargs):
        return _gyrPot.GyrPot_targetType(self, *args, **kwargs)

    def setTargetType(self, *args, **kwargs):
        return _gyrPot.GyrPot_setTargetType(self, *args, **kwargs)

    def rTarget(self, *args, **kwargs):
        return _gyrPot.GyrPot_rTarget(self, *args, **kwargs)

    def setRTarget(self, *args, **kwargs):
        return _gyrPot.GyrPot_setRTarget(self, *args, **kwargs)

    def rRange(self, *args, **kwargs):
        return _gyrPot.GyrPot_rRange(self, *args, **kwargs)

    def setRRange(self, *args, **kwargs):
        return _gyrPot.GyrPot_setRRange(self, *args, **kwargs)

    def volTarget(self, *args, **kwargs):
        return _gyrPot.GyrPot_volTarget(self, *args, **kwargs)

    def setVolTarget(self, *args, **kwargs):
        return _gyrPot.GyrPot_setVolTarget(self, *args, **kwargs)

    def volRange(self, *args, **kwargs):
        return _gyrPot.GyrPot_volRange(self, *args, **kwargs)

    def setVolRange(self, *args, **kwargs):
        return _gyrPot.GyrPot_setVolRange(self, *args, **kwargs)

    def gyrWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_gyrWeights(self, *args, **kwargs)

    def setGyrWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_setGyrWeights(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _gyrPot.GyrPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _gyrPot.GyrPot_setVerbose(self, *args, **kwargs)

    def eigenPairs(self, *args, **kwargs):
        return _gyrPot.GyrPot_eigenPairs(self, *args, **kwargs)

    def volume(self, *args, **kwargs):
        return _gyrPot.GyrPot_volume(self, *args, **kwargs)

    def Rg(self, *args, **kwargs):
        return _gyrPot.GyrPot_Rg(self, *args, **kwargs)

    def qc(self, *args, **kwargs):
        return _gyrPot.GyrPot_qc(self, *args, **kwargs)

    def gyrTensor(self, *args, **kwargs):
        return _gyrPot.GyrPot_gyrTensor(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _gyrPot.GyrPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _gyrPot.GyrPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _gyrPot.GyrPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _gyrPot.GyrPot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _gyrPot.GyrPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _gyrPot.GyrPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _gyrPot.GyrPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _gyrPot.GyrPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _gyrPot.GyrPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _gyrPot.GyrPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _gyrPot.GyrPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _gyrPot.GyrPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _gyrPot.GyrPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _gyrPot.GyrPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _gyrPot.GyrPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _gyrPot.GyrPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _gyrPot.GyrPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _gyrPot.GyrPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _gyrPot.GyrPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _gyrPot.GyrPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _gyrPot.GyrPot_setThreshold(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _gyrPot.GyrPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_gyrPot.GyrPot_instanceData__get, _gyrPot.GyrPot_instanceData__set)
    instanceDataCreate = _swig_property(_gyrPot.GyrPot_instanceDataCreate_get, _gyrPot.GyrPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_gyrPot.GyrPot_instanceDataCleanup_get, _gyrPot.GyrPot_instanceDataCleanup_set)
    modified = _swig_property(_gyrPot.GyrPot_modified_get, _gyrPot.GyrPot_modified_set)
    registeredSimulations = _swig_property(_gyrPot.GyrPot_registeredSimulations_get, _gyrPot.GyrPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _gyrPot.GyrPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _gyrPot.GyrPot_unRegister(self, *args, **kwargs)

class GyrPotPtr(GyrPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = GyrPot

GyrPot_swigregister = _gyrPot.GyrPot_swigregister
GyrPot_swigregister(GyrPot)


realGyrPot = GyrPot
def GyrPot(*args):
    from potProxy import PotProxy
    return PotProxy( realGyrPot(*args) )

class GyrPot_EigenPair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_gyrPot.GyrPot_EigenPair_value_get, _gyrPot.GyrPot_EigenPair_value_set)
    vector = _swig_property(_gyrPot.GyrPot_EigenPair_vector_get, _gyrPot.GyrPot_EigenPair_vector_set)

    def __init__(self, *args, **kwargs):
        this = _gyrPot.new_GyrPot_EigenPair(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gyrPot.delete_GyrPot_EigenPair
    __del__ = lambda self: None

class GyrPot_EigenPairPtr(GyrPot_EigenPair):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = GyrPot_EigenPair

GyrPot_EigenPair_swigregister = _gyrPot.GyrPot_EigenPair_swigregister
GyrPot_EigenPair_swigregister(GyrPot_EigenPair)

class GyrPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def updateValues(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_updateValues(self, *args, **kwargs)
    RADIUS = _gyrPot.GyrPot_LetterClass_RADIUS
    VOLUME = _gyrPot.GyrPot_LetterClass_VOLUME

    def __init__(self, *args, **kwargs):
        this = _gyrPot.new_GyrPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _gyrPot.delete_GyrPot_LetterClass
    __del__ = lambda self: None

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_numRestraints(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_selection(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_info(self, *args, **kwargs)

    def targetType(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_targetType(self, *args, **kwargs)

    def setTargetType(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_setTargetType(self, *args, **kwargs)

    def rTarget(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_rTarget(self, *args, **kwargs)

    def setRTarget(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_setRTarget(self, *args, **kwargs)

    def rRange(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_rRange(self, *args, **kwargs)

    def setRRange(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_setRRange(self, *args, **kwargs)

    def volTarget(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_volTarget(self, *args, **kwargs)

    def setVolTarget(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_setVolTarget(self, *args, **kwargs)

    def volRange(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_volRange(self, *args, **kwargs)

    def setVolRange(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_setVolRange(self, *args, **kwargs)

    def gyrWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_gyrWeights(self, *args, **kwargs)

    def setGyrWeights(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_setGyrWeights(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_setVerbose(self, *args, **kwargs)

    def eigenPairs(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_eigenPairs(self, *args, **kwargs)

    def volume(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_volume(self, *args, **kwargs)

    def Rg(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_Rg(self, *args, **kwargs)

    def qc(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_qc(self, *args, **kwargs)

    def gyrTensor(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_gyrTensor(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _gyrPot.GyrPot_LetterClass_help(self, *args, **kwargs)

class GyrPot_LetterClassPtr(GyrPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = GyrPot_LetterClass

GyrPot_LetterClass_swigregister = _gyrPot.GyrPot_LetterClass_swigregister
GyrPot_LetterClass_swigregister(GyrPot_LetterClass)


pyXplorHelp = help


def help(*args):
    return _gyrPot.help(*args)
help = _gyrPot.help


