# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cif')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cif')
    _cif = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cif', [dirname(__file__)])
        except ImportError:
            import _cif
            return _cif
        try:
            _mod = imp.load_module('_cif', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cif = swig_import_helper()
    del swig_import_helper
else:
    import _cif
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class CifCategory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def size(self, *args, **kwargs):
        return _cif.CifCategory_size(self, *args, **kwargs)

    def getValues(self, *args, **kwargs):
        return _cif.CifCategory_getValues(self, *args, **kwargs)

    def keys(self, *args, **kwargs):
        return _cif.CifCategory_keys(self, *args, **kwargs)

    def asTable(self, *args, **kwargs):
        return _cif.CifCategory_asTable(self, *args, **kwargs)

    def addKey(self, *args, **kwargs):
        return _cif.CifCategory_addKey(self, *args, **kwargs)

    def addValue(self, *args, **kwargs):
        return _cif.CifCategory_addValue(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _cif.CifCategory_clear(self, *args, **kwargs)

    def clearValues(self, *args, **kwargs):
        return _cif.CifCategory_clearValues(self, *args, **kwargs)

    def __getitem__(s,key):
        if not key in s.keys():
            raise IndexError;
        return s.getValues(key);
    def __setitem__(s,key,val):
        s.addKey(key)
        s.addValue(key,val)
        return
    def __getattr__(s,attr):
#special case for "this" member
        if attr=="this":
            if attr in dir(s):
                return s.this
            else:
                raise AttributeError("%r object has no attribute %r" %
                                     (s.__class__, attr))
            pass
        if attr in s.keys():
            return s.getValues(attr)
        raise AttributeError("%r object has no attribute %r" %
                             (s.__class__, attr))
        return
    def __contains__(s,attr):
        if attr in s.keys():
            return True
        else:
            return False
        return


    def __init__(self, *args, **kwargs):
        this = _cif.new_CifCategory(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cif.delete_CifCategory
    __del__ = lambda self: None

class CifCategoryPtr(CifCategory):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CifCategory

CifCategory_swigregister = _cif.CifCategory_swigregister
CifCategory_swigregister(CifCategory)

class CifDatablock(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cif.new_CifDatablock(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self, *args, **kwargs):
        return _cif.CifDatablock_size(self, *args, **kwargs)

    def getCategory(self, *args, **kwargs):
        return _cif.CifDatablock_getCategory(self, *args, **kwargs)

    def keys(self, *args, **kwargs):
        return _cif.CifDatablock_keys(self, *args, **kwargs)

    def isSaveframe(self, *args, **kwargs):
        return _cif.CifDatablock_isSaveframe(self, *args, **kwargs)

    def setIsSaveframe(self, *args, **kwargs):
        return _cif.CifDatablock_setIsSaveframe(self, *args, **kwargs)

    def addCategory(self, *args, **kwargs):
        return _cif.CifDatablock_addCategory(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _cif.CifDatablock_clear(self, *args, **kwargs)

    def __getitem__(s,key):
        if not key in s.keys():
            raise IndexError;
        return s.getCategory(key);
    def __setitem__(s,key,val):
        return s.addCategory(key,val);
    def __getattr__(s,attr):
#special case for "this" member
        if attr=="this":
            if attr in dir(s):
                return s.this
            else:
                raise AttributeError("%r object has no attribute %r" %
                                     (s.__class__, attr))
            pass
        if attr in s.keys():
            return s.getCategory(attr)
        raise AttributeError("%r object has no attribute %r" %
                             (s.__class__, attr))
        return
    def __contains__(s,attr):
        if attr in s.keys():
            return True
        else:
            return False
        return

    __swig_destroy__ = _cif.delete_CifDatablock
    __del__ = lambda self: None

class CifDatablockPtr(CifDatablock):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CifDatablock

CifDatablock_swigregister = _cif.CifDatablock_swigregister
CifDatablock_swigregister(CifDatablock)

class Cif(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cif.new_Cif(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def size(self, *args, **kwargs):
        return _cif.Cif_size(self, *args, **kwargs)

    def getDatablock(self, *args, **kwargs):
        return _cif.Cif_getDatablock(self, *args, **kwargs)

    def keys(self, *args, **kwargs):
        return _cif.Cif_keys(self, *args, **kwargs)

    def addDatablock(self, *args, **kwargs):
        return _cif.Cif_addDatablock(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _cif.Cif_clear(self, *args, **kwargs)

    def parse(self, *args):
        return _cif.Cif_parse(self, *args)

    def write(self, *args, **kwargs):
        return _cif.Cif_write(self, *args, **kwargs)

    def asString(self, *args, **kwargs):
        return _cif.Cif_asString(self, *args, **kwargs)

    def formatBlock(self, *args, **kwargs):
        return _cif.Cif_formatBlock(self, *args, **kwargs)

    def formatCategory(self, *args, **kwargs):
        return _cif.Cif_formatCategory(self, *args, **kwargs)

    def quoteData(self, *args, **kwargs):
        return _cif.Cif_quoteData(self, *args, **kwargs)
    getCategory = staticmethod(_cif.Cif_getCategory)
    getItem = staticmethod(_cif.Cif_getItem)
    datablocksToRead = _swig_property(_cif.Cif_datablocksToRead_get, _cif.Cif_datablocksToRead_set)
    categoriesToRead = _swig_property(_cif.Cif_categoriesToRead_get, _cif.Cif_categoriesToRead_set)

    def numDatablocksToRead(self, *args, **kwargs):
        return _cif.Cif_numDatablocksToRead(self, *args, **kwargs)

    def setNumDatablocksToRead(self, *args, **kwargs):
        return _cif.Cif_setNumDatablocksToRead(self, *args, **kwargs)

    def modelToRead(self, *args, **kwargs):
        return _cif.Cif_modelToRead(self, *args, **kwargs)

    def setModelToRead(self, *args, **kwargs):
        return _cif.Cif_setModelToRead(self, *args, **kwargs)

    def useTrailingPound(self, *args, **kwargs):
        return _cif.Cif_useTrailingPound(self, *args, **kwargs)

    def setUseTrailingPound(self, *args, **kwargs):
        return _cif.Cif_setUseTrailingPound(self, *args, **kwargs)

    def useTrailingStop(self, *args, **kwargs):
        return _cif.Cif_useTrailingStop(self, *args, **kwargs)

    def setUseTrailingStop(self, *args, **kwargs):
        return _cif.Cif_setUseTrailingStop(self, *args, **kwargs)

    def useTrailingSave(self, *args, **kwargs):
        return _cif.Cif_useTrailingSave(self, *args, **kwargs)

    def setUseTrailingSave(self, *args, **kwargs):
        return _cif.Cif_setUseTrailingSave(self, *args, **kwargs)

    def okDatablock(self, *args, **kwargs):
        return _cif.Cif_okDatablock(self, *args, **kwargs)

    def okBlockAndCategory(self, *args, **kwargs):
        return _cif.Cif_okBlockAndCategory(self, *args, **kwargs)

    def __getitem__(s,key):
        if not key in s.keys():
            raise IndexError;
        return s.getDatablock(key);
    def __setitem__(s,key,val):
        return s.addDatablock(key,val);
    def __getattr__(s,attr):
#special case for "this" member
        if attr=="this":
            if attr in dir(s):
                return s.this
            else:
                raise AttributeError("%r object has no attribute %r" %
                                     (s.__class__, attr))
            pass
        if attr in s.keys():
            return s.getDatablock(attr)
        raise AttributeError("%r object has no attribute %r" %
                             (s.__class__, attr))
        return
    def __contains__(s,attr):
        if attr in s.keys():
            return True
        else:
            return False
        return


    def help(self, *args, **kwargs):
        return _cif.Cif_help(self, *args, **kwargs)
    __swig_destroy__ = _cif.delete_Cif
    __del__ = lambda self: None

class CifPtr(Cif):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Cif

Cif_swigregister = _cif.Cif_swigregister
Cif_swigregister(Cif)

def Cif_getCategory(*args, **kwargs):
    return _cif.Cif_getCategory(*args, **kwargs)
Cif_getCategory = _cif.Cif_getCategory

def Cif_getItem(*args, **kwargs):
    return _cif.Cif_getItem(*args, **kwargs)
Cif_getItem = _cif.Cif_getItem
cvar = _cif.cvar
Cif.unknownValue = _cif.cvar.Cif_unknownValue
Cif.inapplicableValue = _cif.cvar.Cif_inapplicableValue


def unknownValue(*args):
    return _cif.unknownValue(*args)
unknownValue = _cif.unknownValue

def inapplicableValue(*args):
    return _cif.inapplicableValue(*args)
inapplicableValue = _cif.inapplicableValue
class CDSList_CDSList_String(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cif.CDSList_CDSList_String___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cif.new_CDSList_CDSList_String(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cif.CDSList_CDSList_String___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cif.CDSList_CDSList_String___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cif.CDSList_CDSList_String_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cif.CDSList_CDSList_String_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cif.CDSList_CDSList_String_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cif.CDSList_CDSList_String___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cif.CDSList_CDSList_String___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cif.CDSList_CDSList_String_help(self, *args, **kwargs)
    __swig_destroy__ = _cif.delete_CDSList_CDSList_String
    __del__ = lambda self: None

class CDSList_CDSList_StringPtr(CDSList_CDSList_String):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_CDSList_String

CDSList_CDSList_String_swigregister = _cif.CDSList_CDSList_String_swigregister
CDSList_CDSList_String_swigregister(CDSList_CDSList_String)


pyXplorHelp = help


def help(*args):
    return _cif.help(*args)
help = _cif.help


