# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cminpack')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cminpack')
    _cminpack = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cminpack', [dirname(__file__)])
        except ImportError:
            import _cminpack
            return _cminpack
        try:
            _mod = imp.load_module('_cminpack', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cminpack = swig_import_helper()
    del swig_import_helper
else:
    import _cminpack
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def wfunc(*args, **kwargs):
    return _cminpack.wfunc(*args, **kwargs)
wfunc = _cminpack.wfunc

def leastsq(*args, **kwargs):
    return _cminpack.leastsq(*args, **kwargs)
leastsq = _cminpack.leastsq

import cdsVector


def lmdif1(*args, **kwargs):
    return _cminpack.lmdif1(*args, **kwargs)
lmdif1 = _cminpack.lmdif1

def lmdif(*args, **kwargs):
    return _cminpack.lmdif(*args, **kwargs)
lmdif = _cminpack.lmdif

def lmder1(*args, **kwargs):
    return _cminpack.lmder1(*args, **kwargs)
lmder1 = _cminpack.lmder1

def lmder(*args, **kwargs):
    return _cminpack.lmder(*args, **kwargs)
lmder = _cminpack.lmder

def dpmpar(*args, **kwargs):
    return _cminpack.dpmpar(*args, **kwargs)
dpmpar = _cminpack.dpmpar

def enorm(*args, **kwargs):
    return _cminpack.enorm(*args, **kwargs)
enorm = _cminpack.enorm

def qrfac(*args, **kwargs):
    return _cminpack.qrfac(*args, **kwargs)
qrfac = _cminpack.qrfac

def qrsolv(*args, **kwargs):
    return _cminpack.qrsolv(*args, **kwargs)
qrsolv = _cminpack.qrsolv

def lmpar(*args, **kwargs):
    return _cminpack.lmpar(*args, **kwargs)
lmpar = _cminpack.lmpar

def covar(*args, **kwargs):
    return _cminpack.covar(*args, **kwargs)
covar = _cminpack.covar

pyXplorHelp = help


def help(*args):
    return _cminpack.help(*args)
help = _cminpack.help


