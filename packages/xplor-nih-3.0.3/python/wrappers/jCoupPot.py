# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_jCoupPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_jCoupPot')
    _jCoupPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_jCoupPot', [dirname(__file__)])
        except ImportError:
            import _jCoupPot
            return _jCoupPot
        try:
            _mod = imp.load_module('_jCoupPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _jCoupPot = swig_import_helper()
    del swig_import_helper
else:
    import _jCoupPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _jCoupPot.Modified_MOD_SELF
    MOD_SIMULATION = _jCoupPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _jCoupPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _jCoupPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _jCoupPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _jCoupPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _jCoupPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _jCoupPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _jCoupPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _jCoupPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_jCoupPot.ModifiedBase_modified_get, _jCoupPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_jCoupPot.ModifiedBase_registeredSimulations_get, _jCoupPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _jCoupPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _jCoupPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _jCoupPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _jCoupPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _jCoupPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_jCoupPot.VarEnsWeights_ensWeights_get, _jCoupPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_jCoupPot.VarEnsWeights_mult_get, _jCoupPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _jCoupPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jCoupPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _jCoupPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _jCoupPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _jCoupPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _jCoupPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _jCoupPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _jCoupPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jCoupPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _jCoupPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class JCoupPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _jCoupPot.new_JCoupPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _jCoupPot.JCoupPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _jCoupPot.JCoupPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _jCoupPot.delete_JCoupPot
    __del__ = lambda self: None

    def addRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_addRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_energyMaybeDerivs2(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_rms(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_deviation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_numRestraints(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_restraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_showViolations(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setVerbose(self, *args, **kwargs)

    def A(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_A(self, *args, **kwargs)

    def setA(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setA(self, *args, **kwargs)

    def B(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_B(self, *args, **kwargs)

    def setB(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setB(self, *args, **kwargs)

    def C(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_C(self, *args, **kwargs)

    def setC(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setC(self, *args, **kwargs)
    phaseInRadians = _swig_property(_jCoupPot.JCoupPot_phaseInRadians_get, _jCoupPot.JCoupPot_phaseInRadians_set)

    def phase(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_phase(self, *args, **kwargs)

    def setPhase(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setPhase(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setPotType(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setShowAllRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _jCoupPot.JCoupPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_jCoupPot.JCoupPot_instanceData__get, _jCoupPot.JCoupPot_instanceData__set)
    instanceDataCreate = _swig_property(_jCoupPot.JCoupPot_instanceDataCreate_get, _jCoupPot.JCoupPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_jCoupPot.JCoupPot_instanceDataCleanup_get, _jCoupPot.JCoupPot_instanceDataCleanup_set)
    modified = _swig_property(_jCoupPot.JCoupPot_modified_get, _jCoupPot.JCoupPot_modified_set)
    registeredSimulations = _swig_property(_jCoupPot.JCoupPot_registeredSimulations_get, _jCoupPot.JCoupPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_unRegister(self, *args, **kwargs)

class JCoupPotPtr(JCoupPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = JCoupPot

JCoupPot_swigregister = _jCoupPot.JCoupPot_swigregister
JCoupPot_swigregister(JCoupPot)


realJCoupPot = JCoupPot
def JCoupPot(*args):
    from potProxy import PotProxy
    return PotProxy( realJCoupPot(*args) )

class Restraint_JCoupPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _jCoupPot.Restraint_JCoupPot_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _jCoupPot.new_Restraint_JCoupPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _jCoupPot.Restraint_JCoupPot_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _jCoupPot.Restraint_JCoupPot_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _jCoupPot.Restraint_JCoupPot_setName(self, *args, **kwargs)
    __swig_destroy__ = _jCoupPot.delete_Restraint_JCoupPot
    __del__ = lambda self: None

class Restraint_JCoupPotPtr(Restraint_JCoupPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_JCoupPot

Restraint_JCoupPot_swigregister = _jCoupPot.Restraint_JCoupPot_swigregister
Restraint_JCoupPot_swigregister(Restraint_JCoupPot)

class JCoupPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HARMONIC = _jCoupPot.JCoupPot_LetterClass_HARMONIC
    SQUARE = _jCoupPot.JCoupPot_LetterClass_SQUARE

    def __init__(self, *args, **kwargs):
        this = _jCoupPot.new_JCoupPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jCoupPot.delete_JCoupPot_LetterClass
    __del__ = lambda self: None

    def addRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_addRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_energyMaybeDerivs2(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_rms(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_deviation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_numRestraints(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_restraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_showViolations(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_setVerbose(self, *args, **kwargs)

    def A(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_A(self, *args, **kwargs)

    def setA(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_setA(self, *args, **kwargs)

    def B(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_B(self, *args, **kwargs)

    def setB(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_setB(self, *args, **kwargs)

    def C(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_C(self, *args, **kwargs)

    def setC(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_setC(self, *args, **kwargs)
    phaseInRadians = _swig_property(_jCoupPot.JCoupPot_LetterClass_phaseInRadians_get, _jCoupPot.JCoupPot_LetterClass_phaseInRadians_set)

    def phase(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_phase(self, *args, **kwargs)

    def setPhase(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_setPhase(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_setPotType(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _jCoupPot.JCoupPot_LetterClass_help(self, *args, **kwargs)

class JCoupPot_LetterClassPtr(JCoupPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = JCoupPot_LetterClass

JCoupPot_LetterClass_swigregister = _jCoupPot.JCoupPot_LetterClass_swigregister
JCoupPot_LetterClass_swigregister(JCoupPot_LetterClass)

class JCoup_Restraint(Restraint_JCoupPot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    verbose = _swig_property(_jCoupPot.JCoup_Restraint_verbose_get, _jCoupPot.JCoup_Restraint_verbose_set)

    def __init__(self, *args, **kwargs):
        this = _jCoupPot.new_JCoup_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jCoupPot.delete_JCoup_Restraint
    __del__ = lambda self: None

    def ok(self, *args, **kwargs):
        return _jCoupPot.JCoup_Restraint_ok(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _jCoupPot.JCoup_Restraint_calcContrib(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _jCoupPot.JCoup_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _jCoupPot.JCoup_Restraint_deriv(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _jCoupPot.JCoup_Restraint_name(self, *args, **kwargs)
    contrib = _swig_property(_jCoupPot.JCoup_Restraint_contrib_get, _jCoupPot.JCoup_Restraint_contrib_set)

class JCoup_RestraintPtr(JCoup_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = JCoup_Restraint

JCoup_Restraint_swigregister = _jCoupPot.JCoup_Restraint_swigregister
JCoup_Restraint_swigregister(JCoup_Restraint)

class rc_ptr_JCoup_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _jCoupPot.new_rc_ptr_JCoup_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _jCoupPot.delete_rc_ptr_JCoup_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_release(self, *args, **kwargs)
    verbose = _swig_property(_jCoupPot.rc_ptr_JCoup_Restraint_verbose_get, _jCoupPot.rc_ptr_JCoup_Restraint_verbose_set)

    def ok(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_ok(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_calcContrib(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_deriv(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_name(self, *args, **kwargs)
    contrib = _swig_property(_jCoupPot.rc_ptr_JCoup_Restraint_contrib_get, _jCoupPot.rc_ptr_JCoup_Restraint_contrib_set)

    def diff(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_violated(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _jCoupPot.rc_ptr_JCoup_Restraint_setName(self, *args, **kwargs)

class rc_ptr_JCoup_RestraintPtr(rc_ptr_JCoup_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_JCoup_Restraint

rc_ptr_JCoup_Restraint_swigregister = _jCoupPot.rc_ptr_JCoup_Restraint_swigregister
rc_ptr_JCoup_Restraint_swigregister(rc_ptr_JCoup_Restraint)

class CDSList_JCoup_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _jCoupPot.CDSList_JCoup_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _jCoupPot.new_CDSList_JCoup_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _jCoupPot.CDSList_JCoup_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _jCoupPot.CDSList_JCoup_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _jCoupPot.CDSList_JCoup_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _jCoupPot.CDSList_JCoup_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _jCoupPot.CDSList_JCoup_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _jCoupPot.CDSList_JCoup_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _jCoupPot.CDSList_JCoup_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _jCoupPot.CDSList_JCoup_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _jCoupPot.delete_CDSList_JCoup_Restraint
    __del__ = lambda self: None

class CDSList_JCoup_RestraintPtr(CDSList_JCoup_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_JCoup_Restraint

CDSList_JCoup_Restraint_swigregister = _jCoupPot.CDSList_JCoup_Restraint_swigregister
CDSList_JCoup_Restraint_swigregister(CDSList_JCoup_Restraint)


pyXplorHelp = help


def help(*args):
    return _jCoupPot.help(*args)
help = _jCoupPot.help


