# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_camshift')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_camshift')
    _camshift = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_camshift', [dirname(__file__)])
        except ImportError:
            import _camshift
            return _camshift
        try:
            _mod = imp.load_module('_camshift', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _camshift = swig_import_helper()
    del swig_import_helper
else:
    import _camshift
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class CamShift(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    N = _camshift.CamShift_N
    HN = _camshift.CamShift_HN
    CA = _camshift.CamShift_CA
    HA = _camshift.CamShift_HA
    C = _camshift.CamShift_C
    O = _camshift.CamShift_O
    CB = _camshift.CamShift_CB
    AtomTypeSize = _camshift.CamShift_AtomTypeSize
    TERM_PREV = _camshift.CamShift_TERM_PREV
    TERM_CURR = _camshift.CamShift_TERM_CURR
    TERM_NEXT = _camshift.CamShift_TERM_NEXT
    TERM_SIDE = _camshift.CamShift_TERM_SIDE
    TERM_EXTRA = _camshift.CamShift_TERM_EXTRA
    TERM_NBOND = _camshift.CamShift_TERM_NBOND
    TERM_RING = _camshift.CamShift_TERM_RING
    TERM_DIHE = _camshift.CamShift_TERM_DIHE
    TERM_HBOND = _camshift.CamShift_TERM_HBOND
    TERM_DISULF = _camshift.CamShift_TERM_DISULF
    TERM_CONST = _camshift.CamShift_TERM_CONST

    def selection(self, *args, **kwargs):
        return _camshift.CamShift_selection(self, *args, **kwargs)

    def calcDerivs(self, *args, **kwargs):
        return _camshift.CamShift_calcDerivs(self, *args, **kwargs)

    def setCalcDerivs(self, *args, **kwargs):
        return _camshift.CamShift_setCalcDerivs(self, *args, **kwargs)

    def termsUsed(self, *args, **kwargs):
        return _camshift.CamShift_termsUsed(self, *args, **kwargs)

    def setTermsUsed(self, *args, **kwargs):
        return _camshift.CamShift_setTermsUsed(self, *args, **kwargs)

    def chemicalShifts(self, *args, **kwargs):
        return _camshift.CamShift_chemicalShifts(self, *args, **kwargs)

    def chemicalShift(self, *args, **kwargs):
        return _camshift.CamShift_chemicalShift(self, *args, **kwargs)

    def getDerivative(self, *args, **kwargs):
        return _camshift.CamShift_getDerivative(self, *args, **kwargs)
    stringToType = staticmethod(_camshift.CamShift_stringToType)
    typeToString = staticmethod(_camshift.CamShift_typeToString)
    generator = staticmethod(_camshift.CamShift_generator)
    __swig_destroy__ = _camshift.delete_CamShift
    __del__ = lambda self: None

class CamShiftPtr(CamShift):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CamShift

CamShift_swigregister = _camshift.CamShift_swigregister
CamShift_swigregister(CamShift)

def CamShift_stringToType(*args, **kwargs):
    return _camshift.CamShift_stringToType(*args, **kwargs)
CamShift_stringToType = _camshift.CamShift_stringToType

def CamShift_typeToString(*args, **kwargs):
    return _camshift.CamShift_typeToString(*args, **kwargs)
CamShift_typeToString = _camshift.CamShift_typeToString

def CamShift_generator(*args, **kwargs):
    return _camshift.CamShift_generator(*args, **kwargs)
CamShift_generator = _camshift.CamShift_generator

class DeriveData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = _swig_property(_camshift.DeriveData_data_get, _camshift.DeriveData_data_set)
    atomnum = _swig_property(_camshift.DeriveData_atomnum_get, _camshift.DeriveData_atomnum_set)
    restraint_residue_number = _swig_property(_camshift.DeriveData_restraint_residue_number_get, _camshift.DeriveData_restraint_residue_number_set)

    def __init__(self, *args, **kwargs):
        this = _camshift.new_DeriveData(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _camshift.delete_DeriveData
    __del__ = lambda self: None

class DeriveDataPtr(DeriveData):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = DeriveData

DeriveData_swigregister = _camshift.DeriveData_swigregister
DeriveData_swigregister(DeriveData)

class CamShift1(CamShift):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _camshift.CamShift1_x
    y = _camshift.CamShift1_y
    z = _camshift.CamShift1_z

    def init(self, *args, **kwargs):
        return _camshift.CamShift1_init(self, *args, **kwargs)

    def reserveMem(self, *args, **kwargs):
        return _camshift.CamShift1_reserveMem(self, *args, **kwargs)

    def addResidue(self, *args, **kwargs):
        return _camshift.CamShift1_addResidue(self, *args, **kwargs)

    def setObservedChemicalShift(self, *args, **kwargs):
        return _camshift.CamShift1_setObservedChemicalShift(self, *args, **kwargs)

    def addObservedChemicalShift(self, *args, **kwargs):
        return _camshift.CamShift1_addObservedChemicalShift(self, *args, **kwargs)

    def testCompleteness(self, *args, **kwargs):
        return _camshift.CamShift1_testCompleteness(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _camshift.new_CamShift1(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _camshift.delete_CamShift1
    __del__ = lambda self: None

    def isSP2(self, *args, **kwargs):
        return _camshift.CamShift1_isSP2(self, *args, **kwargs)

    def assignCloseAtoms(self, *args, **kwargs):
        return _camshift.CamShift1_assignCloseAtoms(self, *args, **kwargs)

    def assignAllCloseAtoms(self, *args, **kwargs):
        return _camshift.CamShift1_assignAllCloseAtoms(self, *args, **kwargs)

    def movedTooMuch(self, *args, **kwargs):
        return _camshift.CamShift1_movedTooMuch(self, *args, **kwargs)

    def flatBottomConst(self, *args, **kwargs):
        return _camshift.CamShift1_flatBottomConst(self, *args, **kwargs)

    def setFlatBottomConst(self, *args, **kwargs):
        return _camshift.CamShift1_setFlatBottomConst(self, *args, **kwargs)

    def maxShiftDevMult(self, *args, **kwargs):
        return _camshift.CamShift1_maxShiftDevMult(self, *args, **kwargs)

    def setMaxShiftDevMult(self, *args, **kwargs):
        return _camshift.CamShift1_setMaxShiftDevMult(self, *args, **kwargs)

    def nTerminus(self, *args, **kwargs):
        return _camshift.CamShift1_nTerminus(self, *args, **kwargs)

    def cTerminus(self, *args, **kwargs):
        return _camshift.CamShift1_cTerminus(self, *args, **kwargs)

    def set_shiftcutoff(self, *args, **kwargs):
        return _camshift.CamShift1_set_shiftcutoff(self, *args, **kwargs)

    def get_shiftcutoff(self, *args, **kwargs):
        return _camshift.CamShift1_get_shiftcutoff(self, *args, **kwargs)

    def set_debugatoms(self, *args, **kwargs):
        return _camshift.CamShift1_set_debugatoms(self, *args, **kwargs)

    def get_debugatom1(self, *args, **kwargs):
        return _camshift.CamShift1_get_debugatom1(self, *args, **kwargs)

    def get_debugatom2(self, *args, **kwargs):
        return _camshift.CamShift1_get_debugatom2(self, *args, **kwargs)

    def set_forcecutoff(self, *args, **kwargs):
        return _camshift.CamShift1_set_forcecutoff(self, *args, **kwargs)

    def get_forcecutoff(self, *args, **kwargs):
        return _camshift.CamShift1_get_forcecutoff(self, *args, **kwargs)

    def set_distcutoff(self, *args, **kwargs):
        return _camshift.CamShift1_set_distcutoff(self, *args, **kwargs)

    def get_distcutoff(self, *args, **kwargs):
        return _camshift.CamShift1_get_distcutoff(self, *args, **kwargs)

    def set_lambda(self, *args, **kwargs):
        return _camshift.CamShift1_set_lambda(self, *args, **kwargs)

    def _lambda(self, *args, **kwargs):
        return _camshift.CamShift1__lambda(self, *args, **kwargs)

    def fullPredictor(self, *args, **kwargs):
        return _camshift.CamShift1_fullPredictor(self, *args, **kwargs)

    def setFullPredictor(self, *args, **kwargs):
        return _camshift.CamShift1_setFullPredictor(self, *args, **kwargs)

    def printChemicalShifts(self, *args, **kwargs):
        return _camshift.CamShift1_printChemicalShifts(self, *args, **kwargs)

    def printEnergy(self, *args, **kwargs):
        return _camshift.CamShift1_printEnergy(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _camshift.CamShift1_energy(self, *args, **kwargs)

    def getAtomChemicalShifts(self, *args, **kwargs):
        return _camshift.CamShift1_getAtomChemicalShifts(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _camshift.CamShift1_updateValues(self, *args, **kwargs)

    def getAllChemicalShifts(self, *args, **kwargs):
        return _camshift.CamShift1_getAllChemicalShifts(self, *args, **kwargs)

class CamShift1Ptr(CamShift1):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CamShift1

CamShift1_swigregister = _camshift.CamShift1_swigregister
CamShift1_swigregister(CamShift1)


def CamShift(*args):
 if len(args)>=3 and type(args[0][0]) == type(args[1][0]) == type("string"):
   return CamShift1(*args)
 else:
   raise Exception("argument deduction failed")


pyXplorHelp = help


def help(*args):
    return _camshift.help(*args)
help = _camshift.help


