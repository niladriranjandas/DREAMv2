# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_atomSelLang')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_atomSelLang')
    _atomSelLang = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_atomSelLang', [dirname(__file__)])
        except ImportError:
            import _atomSelLang
            return _atomSelLang
        try:
            _mod = imp.load_module('_atomSelLang', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _atomSelLang = swig_import_helper()
    del swig_import_helper
else:
    import _atomSelLang
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class AtomSelLang(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    select = staticmethod(_atomSelLang.AtomSelLang_select)
    selectArray = staticmethod(_atomSelLang.AtomSelLang_selectArray)
    clearCache = staticmethod(_atomSelLang.AtomSelLang_clearCache)
    cachedNameValues = _swig_property(_atomSelLang.AtomSelLang_cachedNameValues_get, _atomSelLang.AtomSelLang_cachedNameValues_set)
    cachedResidValues = _swig_property(_atomSelLang.AtomSelLang_cachedResidValues_get, _atomSelLang.AtomSelLang_cachedResidValues_set)
    cachedSegmentNameValues = _swig_property(_atomSelLang.AtomSelLang_cachedSegmentNameValues_get, _atomSelLang.AtomSelLang_cachedSegmentNameValues_set)
    BOOLVEC = _atomSelLang.AtomSelLang_BOOLVEC
    INTLIST = _atomSelLang.AtomSelLang_INTLIST
    resultType = _swig_property(_atomSelLang.AtomSelLang_resultType_get, _atomSelLang.AtomSelLang_resultType_set)
    result = _swig_property(_atomSelLang.AtomSelLang_result_get, _atomSelLang.AtomSelLang_result_set)
    convertToFloat = staticmethod(_atomSelLang.AtomSelLang_convertToFloat)
    andArr = staticmethod(_atomSelLang.AtomSelLang_andArr)
    orArr = staticmethod(_atomSelLang.AtomSelLang_orArr)
    notArr = staticmethod(_atomSelLang.AtomSelLang_notArr)
    all = staticmethod(_atomSelLang.AtomSelLang_all)
    known = staticmethod(_atomSelLang.AtomSelLang_known)
    tag = staticmethod(_atomSelLang.AtomSelLang_tag)
    pseudo = staticmethod(_atomSelLang.AtomSelLang_pseudo)
    getNamedSelection = staticmethod(_atomSelLang.AtomSelLang_getNamedSelection)
    setUseSegmentCase = staticmethod(_atomSelLang.AtomSelLang_setUseSegmentCase)
    setNamedSelection = staticmethod(_atomSelLang.AtomSelLang_setNamedSelection)
    initAttributes = staticmethod(_atomSelLang.AtomSelLang_initAttributes)
    addAttribute = staticmethod(_atomSelLang.AtomSelLang_addAttribute)
    addAbbreviation = staticmethod(_atomSelLang.AtomSelLang_addAbbreviation)
    abbreviations = staticmethod(_atomSelLang.AtomSelLang_abbreviations)
    attributes = staticmethod(_atomSelLang.AtomSelLang_attributes)
    getAttribute = staticmethod(_atomSelLang.AtomSelLang_getAttribute)
    processOneProperty = staticmethod(_atomSelLang.AtomSelLang_processOneProperty)
    prop = staticmethod(_atomSelLang.AtomSelLang_prop)
    propList = staticmethod(_atomSelLang.AtomSelLang_propList)
    atom = staticmethod(_atomSelLang.AtomSelLang_atom)
    bondedTo = staticmethod(_atomSelLang.AtomSelLang_bondedTo)
    byRes = staticmethod(_atomSelLang.AtomSelLang_byRes)
    point = staticmethod(_atomSelLang.AtomSelLang_point)
    around = staticmethod(_atomSelLang.AtomSelLang_around)
    attribute = staticmethod(_atomSelLang.AtomSelLang_attribute)
    setRecallSelection = staticmethod(_atomSelLang.AtomSelLang_setRecallSelection)

    def help(self, *args, **kwargs):
        return _atomSelLang.AtomSelLang_help(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _atomSelLang.new_AtomSelLang(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _atomSelLang.delete_AtomSelLang
    __del__ = lambda self: None

class AtomSelLangPtr(AtomSelLang):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = AtomSelLang

AtomSelLang_swigregister = _atomSelLang.AtomSelLang_swigregister
AtomSelLang_swigregister(AtomSelLang)

def AtomSelLang_select(*args, **kwargs):
    return _atomSelLang.AtomSelLang_select(*args, **kwargs)
AtomSelLang_select = _atomSelLang.AtomSelLang_select

def AtomSelLang_selectArray(*args, **kwargs):
    return _atomSelLang.AtomSelLang_selectArray(*args, **kwargs)
AtomSelLang_selectArray = _atomSelLang.AtomSelLang_selectArray

def AtomSelLang_clearCache(*args, **kwargs):
    return _atomSelLang.AtomSelLang_clearCache(*args, **kwargs)
AtomSelLang_clearCache = _atomSelLang.AtomSelLang_clearCache
cvar = _atomSelLang.cvar

def AtomSelLang_convertToFloat(*args, **kwargs):
    return _atomSelLang.AtomSelLang_convertToFloat(*args, **kwargs)
AtomSelLang_convertToFloat = _atomSelLang.AtomSelLang_convertToFloat

def AtomSelLang_andArr(*args, **kwargs):
    return _atomSelLang.AtomSelLang_andArr(*args, **kwargs)
AtomSelLang_andArr = _atomSelLang.AtomSelLang_andArr

def AtomSelLang_orArr(*args, **kwargs):
    return _atomSelLang.AtomSelLang_orArr(*args, **kwargs)
AtomSelLang_orArr = _atomSelLang.AtomSelLang_orArr

def AtomSelLang_notArr(*args, **kwargs):
    return _atomSelLang.AtomSelLang_notArr(*args, **kwargs)
AtomSelLang_notArr = _atomSelLang.AtomSelLang_notArr

def AtomSelLang_all(*args):
    return _atomSelLang.AtomSelLang_all(*args)
AtomSelLang_all = _atomSelLang.AtomSelLang_all

def AtomSelLang_known(*args):
    return _atomSelLang.AtomSelLang_known(*args)
AtomSelLang_known = _atomSelLang.AtomSelLang_known

def AtomSelLang_tag(*args):
    return _atomSelLang.AtomSelLang_tag(*args)
AtomSelLang_tag = _atomSelLang.AtomSelLang_tag

def AtomSelLang_pseudo(*args):
    return _atomSelLang.AtomSelLang_pseudo(*args)
AtomSelLang_pseudo = _atomSelLang.AtomSelLang_pseudo

def AtomSelLang_getNamedSelection(*args, **kwargs):
    return _atomSelLang.AtomSelLang_getNamedSelection(*args, **kwargs)
AtomSelLang_getNamedSelection = _atomSelLang.AtomSelLang_getNamedSelection

def AtomSelLang_setUseSegmentCase(*args, **kwargs):
    return _atomSelLang.AtomSelLang_setUseSegmentCase(*args, **kwargs)
AtomSelLang_setUseSegmentCase = _atomSelLang.AtomSelLang_setUseSegmentCase

def AtomSelLang_setNamedSelection(*args, **kwargs):
    return _atomSelLang.AtomSelLang_setNamedSelection(*args, **kwargs)
AtomSelLang_setNamedSelection = _atomSelLang.AtomSelLang_setNamedSelection

def AtomSelLang_initAttributes(*args, **kwargs):
    return _atomSelLang.AtomSelLang_initAttributes(*args, **kwargs)
AtomSelLang_initAttributes = _atomSelLang.AtomSelLang_initAttributes

def AtomSelLang_addAttribute(*args, **kwargs):
    return _atomSelLang.AtomSelLang_addAttribute(*args, **kwargs)
AtomSelLang_addAttribute = _atomSelLang.AtomSelLang_addAttribute

def AtomSelLang_addAbbreviation(*args, **kwargs):
    return _atomSelLang.AtomSelLang_addAbbreviation(*args, **kwargs)
AtomSelLang_addAbbreviation = _atomSelLang.AtomSelLang_addAbbreviation

def AtomSelLang_abbreviations(*args):
    return _atomSelLang.AtomSelLang_abbreviations(*args)
AtomSelLang_abbreviations = _atomSelLang.AtomSelLang_abbreviations

def AtomSelLang_attributes(*args, **kwargs):
    return _atomSelLang.AtomSelLang_attributes(*args, **kwargs)
AtomSelLang_attributes = _atomSelLang.AtomSelLang_attributes

def AtomSelLang_getAttribute(*args, **kwargs):
    return _atomSelLang.AtomSelLang_getAttribute(*args, **kwargs)
AtomSelLang_getAttribute = _atomSelLang.AtomSelLang_getAttribute

def AtomSelLang_processOneProperty(*args, **kwargs):
    return _atomSelLang.AtomSelLang_processOneProperty(*args, **kwargs)
AtomSelLang_processOneProperty = _atomSelLang.AtomSelLang_processOneProperty

def AtomSelLang_prop(*args, **kwargs):
    return _atomSelLang.AtomSelLang_prop(*args, **kwargs)
AtomSelLang_prop = _atomSelLang.AtomSelLang_prop

def AtomSelLang_propList(*args, **kwargs):
    return _atomSelLang.AtomSelLang_propList(*args, **kwargs)
AtomSelLang_propList = _atomSelLang.AtomSelLang_propList

def AtomSelLang_atom(*args, **kwargs):
    return _atomSelLang.AtomSelLang_atom(*args, **kwargs)
AtomSelLang_atom = _atomSelLang.AtomSelLang_atom

def AtomSelLang_bondedTo(*args, **kwargs):
    return _atomSelLang.AtomSelLang_bondedTo(*args, **kwargs)
AtomSelLang_bondedTo = _atomSelLang.AtomSelLang_bondedTo

def AtomSelLang_byRes(*args, **kwargs):
    return _atomSelLang.AtomSelLang_byRes(*args, **kwargs)
AtomSelLang_byRes = _atomSelLang.AtomSelLang_byRes

def AtomSelLang_point(*args, **kwargs):
    return _atomSelLang.AtomSelLang_point(*args, **kwargs)
AtomSelLang_point = _atomSelLang.AtomSelLang_point

def AtomSelLang_around(*args, **kwargs):
    return _atomSelLang.AtomSelLang_around(*args, **kwargs)
AtomSelLang_around = _atomSelLang.AtomSelLang_around

def AtomSelLang_attribute(*args, **kwargs):
    return _atomSelLang.AtomSelLang_attribute(*args, **kwargs)
AtomSelLang_attribute = _atomSelLang.AtomSelLang_attribute

def AtomSelLang_setRecallSelection(*args, **kwargs):
    return _atomSelLang.AtomSelLang_setRecallSelection(*args, **kwargs)
AtomSelLang_setRecallSelection = _atomSelLang.AtomSelLang_setRecallSelection


def atomSelLang_lex(*args):
    return _atomSelLang.atomSelLang_lex(*args)
atomSelLang_lex = _atomSelLang.atomSelLang_lex

def atomSelLang_error(*args, **kwargs):
    return _atomSelLang.atomSelLang_error(*args, **kwargs)
atomSelLang_error = _atomSelLang.atomSelLang_error

setNamedSelection = AtomSelLang_setNamedSelection
setRecallSelection = AtomSelLang_setRecallSelection
setUseSegmentCase = AtomSelLang_setUseSegmentCase
addAttribute = AtomSelLang_addAttribute
attributes = AtomSelLang_attributes
getAttribute = AtomSelLang_getAttribute
addAbbreviation = AtomSelLang_addAbbreviation
abbreviations = AtomSelLang_abbreviations

def nameSelection(name,sel):
    """Simpler function to name an atom selection. The first argument is the
     name, while the second argument is an <m atomSel>.AtomSel object.
     Example use:

    import atomSelLang
    atomSelLang.nameSelection('preprolineC','name C and bondedTo (resname PRO)'
    """
    from selectTools import convertToAtomSel
    sel = convertToAtomSel(sel)
    setNamedSelection(sel.simulation(),name,sel.indices())
    return


pyXplorHelp = help


def help(*args):
    return _atomSelLang.help(*args)
help = _atomSelLang.help


