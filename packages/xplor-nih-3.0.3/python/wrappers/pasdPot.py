# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pasdPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pasdPot')
    _pasdPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pasdPot', [dirname(__file__)])
        except ImportError:
            import _pasdPot
            return _pasdPot
        try:
            _mod = imp.load_module('_pasdPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pasdPot = swig_import_helper()
    del swig_import_helper
else:
    import _pasdPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _pasdPot.Modified_MOD_SELF
    MOD_SIMULATION = _pasdPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _pasdPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _pasdPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _pasdPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _pasdPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _pasdPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _pasdPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _pasdPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _pasdPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_pasdPot.ModifiedBase_modified_get, _pasdPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_pasdPot.ModifiedBase_registeredSimulations_get, _pasdPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _pasdPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _pasdPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _pasdPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _pasdPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _pasdPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)


import potProxy

class PASDPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pasdPot.new_PASDPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _pasdPot.PASDPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _pasdPot.PASDPot___ref__(self, *args, **kwargs)

    def distPot(self):
      term = self.distPot_cxx()
      term.base = self
      term = potProxy.PotProxy(term)
      term.registerInstanceData(term._obj)
      term.incrRefCnt()
      return term
    def invPot(self):
      term = self.invPot_cxx()
      term.base = self
      term = potProxy.PotProxy(term)
      term.registerInstanceData(term._obj)
      term.incrRefCnt()
      return term




    def registerInstanceData(self, *args, **kwargs):
        return _pasdPot.PASDPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _pasdPot.PASDPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _pasdPot.PASDPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _pasdPot.PASDPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _pasdPot.PASDPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.PASDPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _pasdPot.delete_PASDPot
    __del__ = lambda self: None
    distPot_member = _swig_property(_pasdPot.PASDPot_distPot_member_get)
    invPot_member = _swig_property(_pasdPot.PASDPot_invPot_member_get)
    distEnergy = _swig_property(_pasdPot.PASDPot_distEnergy_get, _pasdPot.PASDPot_distEnergy_set)
    invEnergy = _swig_property(_pasdPot.PASDPot_invEnergy_get, _pasdPot.PASDPot_invEnergy_set)
    staleGradient = _swig_property(_pasdPot.PASDPot_staleGradient_get, _pasdPot.PASDPot_staleGradient_set)

    def shiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_shiftAssignments(self, *args, **kwargs)

    def fromShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_fromShiftAssignments(self, *args, **kwargs)

    def toShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_toShiftAssignments(self, *args, **kwargs)

    def numShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_numShiftAssignments(self, *args, **kwargs)

    def numFromShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_numFromShiftAssignments(self, *args, **kwargs)

    def numToShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_numToShiftAssignments(self, *args, **kwargs)

    def addShiftAssignment(self, *args, **kwargs):
        return _pasdPot.PASDPot_addShiftAssignment(self, *args, **kwargs)

    def removeShiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_removeShiftAssignmentNamed(self, *args, **kwargs)

    def shiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_shiftAssignmentNamed(self, *args, **kwargs)

    def hasShiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_hasShiftAssignmentNamed(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _pasdPot.PASDPot_simulation(self, *args, **kwargs)

    def peaks(self, *args, **kwargs):
        return _pasdPot.PASDPot_peaks(self, *args, **kwargs)

    def numPeaks(self, *args, **kwargs):
        return _pasdPot.PASDPot_numPeaks(self, *args, **kwargs)

    def addPeak(self, *args, **kwargs):
        return _pasdPot.PASDPot_addPeak(self, *args, **kwargs)

    def removePeakNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_removePeakNamed(self, *args, **kwargs)

    def peakNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_peakNamed(self, *args, **kwargs)

    def hasPeakNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_hasPeakNamed(self, *args, **kwargs)

    def removePeakAssignmentsInvolving(self, *args, **kwargs):
        return _pasdPot.PASDPot_removePeakAssignmentsInvolving(self, *args, **kwargs)

    def clearMissingLinksToPeakAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_clearMissingLinksToPeakAssignments(self, *args, **kwargs)

    def peaksWithShiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_peaksWithShiftAssignmentNamed(self, *args, **kwargs)

    def peaksWithShiftAssignmentsNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_peaksWithShiftAssignmentsNamed(self, *args, **kwargs)

    def shiftAssignmentsWithPeakNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_shiftAssignmentsWithPeakNamed(self, *args, **kwargs)

    def addException(self, *args, **kwargs):
        return _pasdPot.PASDPot_addException(self, *args, **kwargs)

    def hasException(self, *args, **kwargs):
        return _pasdPot.PASDPot_hasException(self, *args, **kwargs)

    def removeAllExceptions(self, *args, **kwargs):
        return _pasdPot.PASDPot_removeAllExceptions(self, *args, **kwargs)

    def removeExceptionsInvolving(self, *args, **kwargs):
        return _pasdPot.PASDPot_removeExceptionsInvolving(self, *args, **kwargs)

    def exceptions(self, *args, **kwargs):
        return _pasdPot.PASDPot_exceptions(self, *args, **kwargs)

    def resetLinkedPeakAssignmentNames(self, *args, **kwargs):
        return _pasdPot.PASDPot_resetLinkedPeakAssignmentNames(self, *args, **kwargs)

    def resetLinkedPeakAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_resetLinkedPeakAssignments(self, *args, **kwargs)

    def updateLinkedPeakAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_updateLinkedPeakAssignments(self, *args, **kwargs)

    def updatePrimarySeqDists(self, *args, **kwargs):
        return _pasdPot.PASDPot_updatePrimarySeqDists(self, *args, **kwargs)

    def longRangePrimarySeqCutoff(self, *args, **kwargs):
        return _pasdPot.PASDPot_longRangePrimarySeqCutoff(self, *args, **kwargs)

    def setLongRangePrimarySeqCutoff(self, *args, **kwargs):
        return _pasdPot.PASDPot_setLongRangePrimarySeqCutoff(self, *args, **kwargs)

    def allowShiftAssignmentInactivation(self, *args, **kwargs):
        return _pasdPot.PASDPot_allowShiftAssignmentInactivation(self, *args, **kwargs)

    def disallowShiftAssignmentInactivation(self, *args, **kwargs):
        return _pasdPot.PASDPot_disallowShiftAssignmentInactivation(self, *args, **kwargs)

    def allowsShiftAssignmentInactivation(self, *args, **kwargs):
        return _pasdPot.PASDPot_allowsShiftAssignmentInactivation(self, *args, **kwargs)

    def setSwitchViolation(self, *args, **kwargs):
        return _pasdPot.PASDPot_setSwitchViolation(self, *args, **kwargs)

    def switchViolation(self, *args, **kwargs):
        return _pasdPot.PASDPot_switchViolation(self, *args, **kwargs)

    def inverseBound(self, *args, **kwargs):
        return _pasdPot.PASDPot_inverseBound(self, *args, **kwargs)

    def setInverseBound(self, *args, **kwargs):
        return _pasdPot.PASDPot_setInverseBound(self, *args, **kwargs)

    def inverseMethylCorrection(self, *args, **kwargs):
        return _pasdPot.PASDPot_inverseMethylCorrection(self, *args, **kwargs)

    def setInverseMethylCorrection(self, *args, **kwargs):
        return _pasdPot.PASDPot_setInverseMethylCorrection(self, *args, **kwargs)

    def previousLikelihoodWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_previousLikelihoodWeight(self, *args, **kwargs)

    def setPreviousLikelihoodWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_setPreviousLikelihoodWeight(self, *args, **kwargs)

    def distanceViolationWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_distanceViolationWeight(self, *args, **kwargs)

    def setDistanceViolationWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_setDistanceViolationWeight(self, *args, **kwargs)

    def noeCompletenessWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_noeCompletenessWeight(self, *args, **kwargs)

    def setNoeCompletenessWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_setNoeCompletenessWeight(self, *args, **kwargs)

    def scatterWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_scatterWeight(self, *args, **kwargs)

    def setScatterWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_setScatterWeight(self, *args, **kwargs)

    def violationCutoff(self, *args, **kwargs):
        return _pasdPot.PASDPot_violationCutoff(self, *args, **kwargs)

    def setViolationCutoff(self, *args, **kwargs):
        return _pasdPot.PASDPot_setViolationCutoff(self, *args, **kwargs)

    def characteristicDistanceViol(self, *args, **kwargs):
        return _pasdPot.PASDPot_characteristicDistanceViol(self, *args, **kwargs)

    def setCharacteristicDistanceViol(self, *args, **kwargs):
        return _pasdPot.PASDPot_setCharacteristicDistanceViol(self, *args, **kwargs)

    def characteristicNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_characteristicNoeCompleteness(self, *args, **kwargs)

    def setCharacteristicNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_setCharacteristicNoeCompleteness(self, *args, **kwargs)

    def characteristicScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_characteristicScatter(self, *args, **kwargs)

    def setCharacteristicScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_setCharacteristicScatter(self, *args, **kwargs)

    def setInverseNoeNeighborhoodSize(self, *args, **kwargs):
        return _pasdPot.PASDPot_setInverseNoeNeighborhoodSize(self, *args, **kwargs)

    def inverseNoeNeighborhoodSize(self, *args, **kwargs):
        return _pasdPot.PASDPot_inverseNoeNeighborhoodSize(self, *args, **kwargs)

    def useSingleAssignment(self, *args, **kwargs):
        return _pasdPot.PASDPot_useSingleAssignment(self, *args, **kwargs)

    def setUseSingleAssignment(self, *args, **kwargs):
        return _pasdPot.PASDPot_setUseSingleAssignment(self, *args, **kwargs)

    def maxMonteCarloAttempts(self, *args, **kwargs):
        return _pasdPot.PASDPot_maxMonteCarloAttempts(self, *args, **kwargs)

    def setMaxMonteCarloAttempts(self, *args, **kwargs):
        return _pasdPot.PASDPot_setMaxMonteCarloAttempts(self, *args, **kwargs)

    def characteristicDeltaDV(self, *args, **kwargs):
        return _pasdPot.PASDPot_characteristicDeltaDV(self, *args, **kwargs)

    def setCharacteristicDeltaDV(self, *args, **kwargs):
        return _pasdPot.PASDPot_setCharacteristicDeltaDV(self, *args, **kwargs)

    def characteristicDeltaPL(self, *args, **kwargs):
        return _pasdPot.PASDPot_characteristicDeltaPL(self, *args, **kwargs)

    def setCharacteristicDeltaPL(self, *args, **kwargs):
        return _pasdPot.PASDPot_setCharacteristicDeltaPL(self, *args, **kwargs)

    def characteristicDeltaNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_characteristicDeltaNoeCompleteness(self, *args, **kwargs)

    def setCharacteristicDeltaNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_setCharacteristicDeltaNoeCompleteness(self, *args, **kwargs)

    def characteristicDeltaScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_characteristicDeltaScatter(self, *args, **kwargs)

    def setCharacteristicDeltaScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_setCharacteristicDeltaScatter(self, *args, **kwargs)

    def useQuadraticPot(self, *args, **kwargs):
        return _pasdPot.PASDPot_useQuadraticPot(self, *args, **kwargs)

    def setUseQuadraticPot(self, *args, **kwargs):
        return _pasdPot.PASDPot_setUseQuadraticPot(self, *args, **kwargs)

    def useOriginalViolationScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_useOriginalViolationScore(self, *args, **kwargs)

    def setUseOriginalViolationScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_setUseOriginalViolationScore(self, *args, **kwargs)

    def saveCurrentState(self, *args, **kwargs):
        return _pasdPot.PASDPot_saveCurrentState(self, *args, **kwargs)

    def resetSavedState(self, *args, **kwargs):
        return _pasdPot.PASDPot_resetSavedState(self, *args, **kwargs)

    def revertToSavedState(self, *args, **kwargs):
        return _pasdPot.PASDPot_revertToSavedState(self, *args, **kwargs)

    def updateActivation(self, *args, **kwargs):
        return _pasdPot.PASDPot_updateActivation(self, *args, **kwargs)

    def activateAllAssigns(self, *args, **kwargs):
        return _pasdPot.PASDPot_activateAllAssigns(self, *args, **kwargs)

    def inactivateAllAssigns(self, *args, **kwargs):
        return _pasdPot.PASDPot_inactivateAllAssigns(self, *args, **kwargs)

    def setAllShiftAssignmentsInRightNeighborhood(self, *args, **kwargs):
        return _pasdPot.PASDPot_setAllShiftAssignmentsInRightNeighborhood(self, *args, **kwargs)

    def numInactivePeaks(self, *args, **kwargs):
        return _pasdPot.PASDPot_numInactivePeaks(self, *args, **kwargs)

    def numActivePeaks(self, *args, **kwargs):
        return _pasdPot.PASDPot_numActivePeaks(self, *args, **kwargs)

    def numShiftAssignmentsInWrongNeighborhood(self, *args, **kwargs):
        return _pasdPot.PASDPot_numShiftAssignmentsInWrongNeighborhood(self, *args, **kwargs)

    def fracPeakAssignsInactive(self, *args, **kwargs):
        return _pasdPot.PASDPot_fracPeakAssignsInactive(self, *args, **kwargs)

    def previousLikelihoodScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_previousLikelihoodScore(self, *args, **kwargs)

    def noeCompletenessScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_noeCompletenessScore(self, *args, **kwargs)

    def numCloseShiftAssignmentPairs(self, *args, **kwargs):
        return _pasdPot.PASDPot_numCloseShiftAssignmentPairs(self, *args, **kwargs)

    def numCloseAccountedShiftAssignmentPairs(self, *args, **kwargs):
        return _pasdPot.PASDPot_numCloseAccountedShiftAssignmentPairs(self, *args, **kwargs)

    def numClosePAAccountedShiftAssignmentPairs(self, *args, **kwargs):
        return _pasdPot.PASDPot_numClosePAAccountedShiftAssignmentPairs(self, *args, **kwargs)

    def scatterScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_scatterScore(self, *args, **kwargs)

    def violationScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_violationScore(self, *args, **kwargs)

    def peakCoverageScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_peakCoverageScore(self, *args, **kwargs)

    def goodScore1(self, *args, **kwargs):
        return _pasdPot.PASDPot_goodScore1(self, *args, **kwargs)

    def goodScore2(self, *args, **kwargs):
        return _pasdPot.PASDPot_goodScore2(self, *args, **kwargs)

    def recordActivePeakAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_recordActivePeakAssignments(self, *args, **kwargs)

    def updateNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_updateNoeCompleteness(self, *args, **kwargs)

    def updatePeakPositionScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_updatePeakPositionScatter(self, *args, **kwargs)

    def expectedNeighbors(self, *args, **kwargs):
        return _pasdPot.PASDPot_expectedNeighbors(self, *args, **kwargs)

    def accountedNeighbors(self, *args, **kwargs):
        return _pasdPot.PASDPot_accountedNeighbors(self, *args, **kwargs)

    def unaccountedNeighbors(self, *args, **kwargs):
        return _pasdPot.PASDPot_unaccountedNeighbors(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _pasdPot.PASDPot_calcEnergy(self, *args, **kwargs)

    def calcNormalEnergy(self, *args, **kwargs):
        return _pasdPot.PASDPot_calcNormalEnergy(self, *args, **kwargs)

    def calcInverseEnergy(self, *args, **kwargs):
        return _pasdPot.PASDPot_calcInverseEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _pasdPot.PASDPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _pasdPot.PASDPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _pasdPot.PASDPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _pasdPot.PASDPot_numRestraints(self, *args, **kwargs)

    def cacheNeighbors(self, *args, **kwargs):
        return _pasdPot.PASDPot_cacheNeighbors(self, *args, **kwargs)

    def neighborsNeedUpdate(self, *args, **kwargs):
        return _pasdPot.PASDPot_neighborsNeedUpdate(self, *args, **kwargs)

    def distPot_cxx(self, *args, **kwargs):
        return _pasdPot.PASDPot_distPot_cxx(self, *args, **kwargs)

    def invPot_cxx(self, *args, **kwargs):
        return _pasdPot.PASDPot_invPot_cxx(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.PASDPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _pasdPot.PASDPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _pasdPot.PASDPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _pasdPot.PASDPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _pasdPot.PASDPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _pasdPot.PASDPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _pasdPot.PASDPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _pasdPot.PASDPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _pasdPot.PASDPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _pasdPot.PASDPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _pasdPot.PASDPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_pasdPot.PASDPot_instanceData__get, _pasdPot.PASDPot_instanceData__set)
    instanceDataCreate = _swig_property(_pasdPot.PASDPot_instanceDataCreate_get, _pasdPot.PASDPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_pasdPot.PASDPot_instanceDataCleanup_get, _pasdPot.PASDPot_instanceDataCleanup_set)
    modified = _swig_property(_pasdPot.PASDPot_modified_get, _pasdPot.PASDPot_modified_set)
    registeredSimulations = _swig_property(_pasdPot.PASDPot_registeredSimulations_get, _pasdPot.PASDPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _pasdPot.PASDPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _pasdPot.PASDPot_unRegister(self, *args, **kwargs)

class PASDPotPtr(PASDPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PASDPot

PASDPot_swigregister = _pasdPot.PASDPot_swigregister
PASDPot_swigregister(PASDPot)


realPASDPot = PASDPot
def PASDPot(*args):
    from potProxy import PotProxy
    return PotProxy( realPASDPot(*args) )

class PASD_DistPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pasdPot.new_PASD_DistPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _pasdPot.delete_PASD_DistPot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_numRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_pasdPot.PASD_DistPot_instanceData__get, _pasdPot.PASD_DistPot_instanceData__set)
    instanceDataCreate = _swig_property(_pasdPot.PASD_DistPot_instanceDataCreate_get, _pasdPot.PASD_DistPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_pasdPot.PASD_DistPot_instanceDataCleanup_get, _pasdPot.PASD_DistPot_instanceDataCleanup_set)
    modified = _swig_property(_pasdPot.PASD_DistPot_modified_get, _pasdPot.PASD_DistPot_modified_set)
    registeredSimulations = _swig_property(_pasdPot.PASD_DistPot_registeredSimulations_get, _pasdPot.PASD_DistPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_unRegister(self, *args, **kwargs)

class PASD_DistPotPtr(PASD_DistPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PASD_DistPot

PASD_DistPot_swigregister = _pasdPot.PASD_DistPot_swigregister
PASD_DistPot_swigregister(PASD_DistPot)


realPASD_DistPot = PASD_DistPot
def PASD_DistPot(*args):
    from potProxy import PotProxy
    return PotProxy( realPASD_DistPot(*args) )

class PASD_InvPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pasdPot.new_PASD_InvPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _pasdPot.delete_PASD_InvPot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_numRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_pasdPot.PASD_InvPot_instanceData__get, _pasdPot.PASD_InvPot_instanceData__set)
    instanceDataCreate = _swig_property(_pasdPot.PASD_InvPot_instanceDataCreate_get, _pasdPot.PASD_InvPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_pasdPot.PASD_InvPot_instanceDataCleanup_get, _pasdPot.PASD_InvPot_instanceDataCleanup_set)
    modified = _swig_property(_pasdPot.PASD_InvPot_modified_get, _pasdPot.PASD_InvPot_modified_set)
    registeredSimulations = _swig_property(_pasdPot.PASD_InvPot_registeredSimulations_get, _pasdPot.PASD_InvPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_unRegister(self, *args, **kwargs)

class PASD_InvPotPtr(PASD_InvPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PASD_InvPot

PASD_InvPot_swigregister = _pasdPot.PASD_InvPot_swigregister
PASD_InvPot_swigregister(PASD_InvPot)


realPASD_InvPot = PASD_InvPot
def PASD_InvPot(*args):
    from potProxy import PotProxy
    return PotProxy( realPASD_InvPot(*args) )

class PASD_DistPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pasdPot.new_PASD_DistPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calcEnergy(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_LetterClass_numRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.PASD_DistPot_LetterClass_help(self, *args, **kwargs)
    __swig_destroy__ = _pasdPot.delete_PASD_DistPot_LetterClass
    __del__ = lambda self: None

class PASD_DistPot_LetterClassPtr(PASD_DistPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PASD_DistPot_LetterClass

PASD_DistPot_LetterClass_swigregister = _pasdPot.PASD_DistPot_LetterClass_swigregister
PASD_DistPot_LetterClass_swigregister(PASD_DistPot_LetterClass)

class PASD_InvPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pasdPot.new_PASD_InvPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calcEnergy(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_LetterClass_numRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.PASD_InvPot_LetterClass_help(self, *args, **kwargs)
    __swig_destroy__ = _pasdPot.delete_PASD_InvPot_LetterClass
    __del__ = lambda self: None

class PASD_InvPot_LetterClassPtr(PASD_InvPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PASD_InvPot_LetterClass

PASD_InvPot_LetterClass_swigregister = _pasdPot.PASD_InvPot_LetterClass_swigregister
PASD_InvPot_LetterClass_swigregister(PASD_InvPot_LetterClass)

class PASDPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pasdPot.new_PASDPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pasdPot.delete_PASDPot_LetterClass
    __del__ = lambda self: None
    distPot_member = _swig_property(_pasdPot.PASDPot_LetterClass_distPot_member_get)
    invPot_member = _swig_property(_pasdPot.PASDPot_LetterClass_invPot_member_get)
    distEnergy = _swig_property(_pasdPot.PASDPot_LetterClass_distEnergy_get, _pasdPot.PASDPot_LetterClass_distEnergy_set)
    invEnergy = _swig_property(_pasdPot.PASDPot_LetterClass_invEnergy_get, _pasdPot.PASDPot_LetterClass_invEnergy_set)
    staleGradient = _swig_property(_pasdPot.PASDPot_LetterClass_staleGradient_get, _pasdPot.PASDPot_LetterClass_staleGradient_set)

    def shiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_shiftAssignments(self, *args, **kwargs)

    def fromShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_fromShiftAssignments(self, *args, **kwargs)

    def toShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_toShiftAssignments(self, *args, **kwargs)

    def numShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numShiftAssignments(self, *args, **kwargs)

    def numFromShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numFromShiftAssignments(self, *args, **kwargs)

    def numToShiftAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numToShiftAssignments(self, *args, **kwargs)

    def addShiftAssignment(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_addShiftAssignment(self, *args, **kwargs)

    def removeShiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_removeShiftAssignmentNamed(self, *args, **kwargs)

    def shiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_shiftAssignmentNamed(self, *args, **kwargs)

    def hasShiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_hasShiftAssignmentNamed(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_simulation(self, *args, **kwargs)

    def peaks(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_peaks(self, *args, **kwargs)

    def numPeaks(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numPeaks(self, *args, **kwargs)

    def addPeak(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_addPeak(self, *args, **kwargs)

    def removePeakNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_removePeakNamed(self, *args, **kwargs)

    def peakNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_peakNamed(self, *args, **kwargs)

    def hasPeakNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_hasPeakNamed(self, *args, **kwargs)

    def removePeakAssignmentsInvolving(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_removePeakAssignmentsInvolving(self, *args, **kwargs)

    def clearMissingLinksToPeakAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_clearMissingLinksToPeakAssignments(self, *args, **kwargs)

    def peaksWithShiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_peaksWithShiftAssignmentNamed(self, *args, **kwargs)

    def peaksWithShiftAssignmentsNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_peaksWithShiftAssignmentsNamed(self, *args, **kwargs)

    def shiftAssignmentsWithPeakNamed(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_shiftAssignmentsWithPeakNamed(self, *args, **kwargs)

    def addException(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_addException(self, *args, **kwargs)

    def hasException(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_hasException(self, *args, **kwargs)

    def removeAllExceptions(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_removeAllExceptions(self, *args, **kwargs)

    def removeExceptionsInvolving(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_removeExceptionsInvolving(self, *args, **kwargs)

    def exceptions(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_exceptions(self, *args, **kwargs)

    def resetLinkedPeakAssignmentNames(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_resetLinkedPeakAssignmentNames(self, *args, **kwargs)

    def resetLinkedPeakAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_resetLinkedPeakAssignments(self, *args, **kwargs)

    def updateLinkedPeakAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_updateLinkedPeakAssignments(self, *args, **kwargs)

    def updatePrimarySeqDists(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_updatePrimarySeqDists(self, *args, **kwargs)

    def longRangePrimarySeqCutoff(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_longRangePrimarySeqCutoff(self, *args, **kwargs)

    def setLongRangePrimarySeqCutoff(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setLongRangePrimarySeqCutoff(self, *args, **kwargs)

    def allowShiftAssignmentInactivation(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_allowShiftAssignmentInactivation(self, *args, **kwargs)

    def disallowShiftAssignmentInactivation(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_disallowShiftAssignmentInactivation(self, *args, **kwargs)

    def allowsShiftAssignmentInactivation(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_allowsShiftAssignmentInactivation(self, *args, **kwargs)

    def setSwitchViolation(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setSwitchViolation(self, *args, **kwargs)

    def switchViolation(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_switchViolation(self, *args, **kwargs)

    def inverseBound(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_inverseBound(self, *args, **kwargs)

    def setInverseBound(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setInverseBound(self, *args, **kwargs)

    def inverseMethylCorrection(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_inverseMethylCorrection(self, *args, **kwargs)

    def setInverseMethylCorrection(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setInverseMethylCorrection(self, *args, **kwargs)

    def previousLikelihoodWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_previousLikelihoodWeight(self, *args, **kwargs)

    def setPreviousLikelihoodWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setPreviousLikelihoodWeight(self, *args, **kwargs)

    def distanceViolationWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_distanceViolationWeight(self, *args, **kwargs)

    def setDistanceViolationWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setDistanceViolationWeight(self, *args, **kwargs)

    def noeCompletenessWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_noeCompletenessWeight(self, *args, **kwargs)

    def setNoeCompletenessWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setNoeCompletenessWeight(self, *args, **kwargs)

    def scatterWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_scatterWeight(self, *args, **kwargs)

    def setScatterWeight(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setScatterWeight(self, *args, **kwargs)

    def violationCutoff(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_violationCutoff(self, *args, **kwargs)

    def setViolationCutoff(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setViolationCutoff(self, *args, **kwargs)

    def characteristicDistanceViol(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_characteristicDistanceViol(self, *args, **kwargs)

    def setCharacteristicDistanceViol(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setCharacteristicDistanceViol(self, *args, **kwargs)

    def characteristicNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_characteristicNoeCompleteness(self, *args, **kwargs)

    def setCharacteristicNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setCharacteristicNoeCompleteness(self, *args, **kwargs)

    def characteristicScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_characteristicScatter(self, *args, **kwargs)

    def setCharacteristicScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setCharacteristicScatter(self, *args, **kwargs)

    def setInverseNoeNeighborhoodSize(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setInverseNoeNeighborhoodSize(self, *args, **kwargs)

    def inverseNoeNeighborhoodSize(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_inverseNoeNeighborhoodSize(self, *args, **kwargs)

    def useSingleAssignment(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_useSingleAssignment(self, *args, **kwargs)

    def setUseSingleAssignment(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setUseSingleAssignment(self, *args, **kwargs)

    def maxMonteCarloAttempts(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_maxMonteCarloAttempts(self, *args, **kwargs)

    def setMaxMonteCarloAttempts(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setMaxMonteCarloAttempts(self, *args, **kwargs)

    def characteristicDeltaDV(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_characteristicDeltaDV(self, *args, **kwargs)

    def setCharacteristicDeltaDV(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setCharacteristicDeltaDV(self, *args, **kwargs)

    def characteristicDeltaPL(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_characteristicDeltaPL(self, *args, **kwargs)

    def setCharacteristicDeltaPL(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setCharacteristicDeltaPL(self, *args, **kwargs)

    def characteristicDeltaNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_characteristicDeltaNoeCompleteness(self, *args, **kwargs)

    def setCharacteristicDeltaNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setCharacteristicDeltaNoeCompleteness(self, *args, **kwargs)

    def characteristicDeltaScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_characteristicDeltaScatter(self, *args, **kwargs)

    def setCharacteristicDeltaScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setCharacteristicDeltaScatter(self, *args, **kwargs)

    def useQuadraticPot(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_useQuadraticPot(self, *args, **kwargs)

    def setUseQuadraticPot(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setUseQuadraticPot(self, *args, **kwargs)

    def useOriginalViolationScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_useOriginalViolationScore(self, *args, **kwargs)

    def setUseOriginalViolationScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setUseOriginalViolationScore(self, *args, **kwargs)

    def saveCurrentState(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_saveCurrentState(self, *args, **kwargs)

    def resetSavedState(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_resetSavedState(self, *args, **kwargs)

    def revertToSavedState(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_revertToSavedState(self, *args, **kwargs)

    def updateActivation(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_updateActivation(self, *args, **kwargs)

    def activateAllAssigns(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_activateAllAssigns(self, *args, **kwargs)

    def inactivateAllAssigns(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_inactivateAllAssigns(self, *args, **kwargs)

    def setAllShiftAssignmentsInRightNeighborhood(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_setAllShiftAssignmentsInRightNeighborhood(self, *args, **kwargs)

    def numInactivePeaks(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numInactivePeaks(self, *args, **kwargs)

    def numActivePeaks(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numActivePeaks(self, *args, **kwargs)

    def numShiftAssignmentsInWrongNeighborhood(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numShiftAssignmentsInWrongNeighborhood(self, *args, **kwargs)

    def fracPeakAssignsInactive(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_fracPeakAssignsInactive(self, *args, **kwargs)

    def previousLikelihoodScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_previousLikelihoodScore(self, *args, **kwargs)

    def noeCompletenessScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_noeCompletenessScore(self, *args, **kwargs)

    def numCloseShiftAssignmentPairs(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numCloseShiftAssignmentPairs(self, *args, **kwargs)

    def numCloseAccountedShiftAssignmentPairs(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numCloseAccountedShiftAssignmentPairs(self, *args, **kwargs)

    def numClosePAAccountedShiftAssignmentPairs(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numClosePAAccountedShiftAssignmentPairs(self, *args, **kwargs)

    def scatterScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_scatterScore(self, *args, **kwargs)

    def violationScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_violationScore(self, *args, **kwargs)

    def peakCoverageScore(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_peakCoverageScore(self, *args, **kwargs)

    def goodScore1(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_goodScore1(self, *args, **kwargs)

    def goodScore2(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_goodScore2(self, *args, **kwargs)

    def recordActivePeakAssignments(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_recordActivePeakAssignments(self, *args, **kwargs)

    def updateNoeCompleteness(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_updateNoeCompleteness(self, *args, **kwargs)

    def updatePeakPositionScatter(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_updatePeakPositionScatter(self, *args, **kwargs)

    def expectedNeighbors(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_expectedNeighbors(self, *args, **kwargs)

    def accountedNeighbors(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_accountedNeighbors(self, *args, **kwargs)

    def unaccountedNeighbors(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_unaccountedNeighbors(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcNormalEnergy(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_calcNormalEnergy(self, *args, **kwargs)

    def calcInverseEnergy(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_calcInverseEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_numRestraints(self, *args, **kwargs)

    def cacheNeighbors(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_cacheNeighbors(self, *args, **kwargs)

    def neighborsNeedUpdate(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_neighborsNeedUpdate(self, *args, **kwargs)

    def distPot_cxx(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_distPot_cxx(self, *args, **kwargs)

    def invPot_cxx(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_invPot_cxx(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.PASDPot_LetterClass_help(self, *args, **kwargs)

class PASDPot_LetterClassPtr(PASDPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PASDPot_LetterClass

PASDPot_LetterClass_swigregister = _pasdPot.PASDPot_LetterClass_swigregister
PASDPot_LetterClass_swigregister(PASDPot_LetterClass)


NOEPot = PASDPot
import pasdPeak	 

class CDSList_PeakPtr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _pasdPot.CDSList_PeakPtr___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _pasdPot.new_CDSList_PeakPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _pasdPot.CDSList_PeakPtr___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _pasdPot.CDSList_PeakPtr___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _pasdPot.CDSList_PeakPtr_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _pasdPot.CDSList_PeakPtr_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _pasdPot.CDSList_PeakPtr_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _pasdPot.CDSList_PeakPtr___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _pasdPot.CDSList_PeakPtr___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPot.CDSList_PeakPtr_help(self, *args, **kwargs)
    __swig_destroy__ = _pasdPot.delete_CDSList_PeakPtr
    __del__ = lambda self: None

class CDSList_PeakPtrPtr(CDSList_PeakPtr):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_PeakPtr

CDSList_PeakPtr_swigregister = _pasdPot.CDSList_PeakPtr_swigregister
CDSList_PeakPtr_swigregister(CDSList_PeakPtr)


pyXplorHelp = help


def help(*args):
    return _pasdPot.help(*args)
help = _pasdPot.help


