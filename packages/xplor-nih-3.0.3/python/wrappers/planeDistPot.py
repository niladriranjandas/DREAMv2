# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_planeDistPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_planeDistPot')
    _planeDistPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_planeDistPot', [dirname(__file__)])
        except ImportError:
            import _planeDistPot
            return _planeDistPot
        try:
            _mod = imp.load_module('_planeDistPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _planeDistPot = swig_import_helper()
    del swig_import_helper
else:
    import _planeDistPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _planeDistPot.Modified_MOD_SELF
    MOD_SIMULATION = _planeDistPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _planeDistPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _planeDistPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _planeDistPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _planeDistPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _planeDistPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _planeDistPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _planeDistPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _planeDistPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_planeDistPot.ModifiedBase_modified_get, _planeDistPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_planeDistPot.ModifiedBase_registeredSimulations_get, _planeDistPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _planeDistPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _planeDistPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _planeDistPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _planeDistPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _planeDistPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class PlaneDistPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _planeDistPot.new_PlaneDistPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _planeDistPot.delete_PlaneDistPot
    __del__ = lambda self: None

    def updateValues(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_updateValues(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_addRestraints(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def calcDerivs(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_calcDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_numRestraints(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_simulation(self, *args, **kwargs)

    def planeNorm(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_planeNorm(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_restraints(self, *args, **kwargs)

    def oAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_oAtom(self, *args, **kwargs)

    def setOAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setOAtom(self, *args, **kwargs)

    def xAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_xAtom(self, *args, **kwargs)

    def setXAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setXAtom(self, *args, **kwargs)

    def yAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_yAtom(self, *args, **kwargs)

    def setYAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setYAtom(self, *args, **kwargs)

    def nMono(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_nMono(self, *args, **kwargs)

    def setNMono(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setNMono(self, *args, **kwargs)

    def aveExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_aveExp(self, *args, **kwargs)

    def setAveExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setAveExp(self, *args, **kwargs)

    def dOffset(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_dOffset(self, *args, **kwargs)

    def setDOffset(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setDOffset(self, *args, **kwargs)

    def hardExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_hardExp(self, *args, **kwargs)

    def setHardExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setHardExp(self, *args, **kwargs)

    def rSwitch(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_rSwitch(self, *args, **kwargs)

    def setRSwitch(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setRSwitch(self, *args, **kwargs)

    def softExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_softExp(self, *args, **kwargs)

    def setSoftExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setSoftExp(self, *args, **kwargs)

    def asympSlope(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_asympSlope(self, *args, **kwargs)

    def setAsympSlope(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setAsympSlope(self, *args, **kwargs)

    def useSign(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_useSign(self, *args, **kwargs)

    def setUseSign(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setUseSign(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setVerbose(self, *args, **kwargs)

    def freedom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_freedom(self, *args, **kwargs)

    def setFreedom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setFreedom(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setPotType(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setAveType(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setShowAllRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_setThreshold(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_planeDistPot.PlaneDistPot_instanceData__get, _planeDistPot.PlaneDistPot_instanceData__set)
    instanceDataCreate = _swig_property(_planeDistPot.PlaneDistPot_instanceDataCreate_get, _planeDistPot.PlaneDistPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_planeDistPot.PlaneDistPot_instanceDataCleanup_get, _planeDistPot.PlaneDistPot_instanceDataCleanup_set)
    modified = _swig_property(_planeDistPot.PlaneDistPot_modified_get, _planeDistPot.PlaneDistPot_modified_set)
    registeredSimulations = _swig_property(_planeDistPot.PlaneDistPot_registeredSimulations_get, _planeDistPot.PlaneDistPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_unRegister(self, *args, **kwargs)

class PlaneDistPotPtr(PlaneDistPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PlaneDistPot

PlaneDistPot_swigregister = _planeDistPot.PlaneDistPot_swigregister
PlaneDistPot_swigregister(PlaneDistPot)


realPlaneDistPot = PlaneDistPot
def PlaneDistPot(*args):
    from potProxy import PotProxy
    return PotProxy( realPlaneDistPot(*args) )

class Restraint_PlaneDistPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _planeDistPot.Restraint_PlaneDistPot_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _planeDistPot.new_Restraint_PlaneDistPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _planeDistPot.Restraint_PlaneDistPot_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _planeDistPot.Restraint_PlaneDistPot_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _planeDistPot.Restraint_PlaneDistPot_setName(self, *args, **kwargs)
    __swig_destroy__ = _planeDistPot.delete_Restraint_PlaneDistPot
    __del__ = lambda self: None

class Restraint_PlaneDistPotPtr(Restraint_PlaneDistPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_PlaneDistPot

Restraint_PlaneDistPot_swigregister = _planeDistPot.Restraint_PlaneDistPot_swigregister
Restraint_PlaneDistPot_swigregister(Restraint_PlaneDistPot)

class PlaneDistPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SOFT = _planeDistPot.PlaneDistPot_LetterClass_SOFT
    HARD = _planeDistPot.PlaneDistPot_LetterClass_HARD
    LOGNORMAL = _planeDistPot.PlaneDistPot_LetterClass_LOGNORMAL
    GAUSSIAN = _planeDistPot.PlaneDistPot_LetterClass_GAUSSIAN
    SIGMOID = _planeDistPot.PlaneDistPot_LetterClass_SIGMOID
    AVERAGE = _planeDistPot.PlaneDistPot_LetterClass_AVERAGE
    CENTER = _planeDistPot.PlaneDistPot_LetterClass_CENTER
    SUM = _planeDistPot.PlaneDistPot_LetterClass_SUM

    def updateValues(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_updateValues(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _planeDistPot.new_PlaneDistPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _planeDistPot.delete_PlaneDistPot_LetterClass
    __del__ = lambda self: None

    def addRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_addRestraints(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def calcDerivs(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_calcDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_numRestraints(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_simulation(self, *args, **kwargs)

    def planeNorm(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_planeNorm(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_restraints(self, *args, **kwargs)

    def oAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_oAtom(self, *args, **kwargs)

    def setOAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setOAtom(self, *args, **kwargs)

    def xAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_xAtom(self, *args, **kwargs)

    def setXAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setXAtom(self, *args, **kwargs)

    def yAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_yAtom(self, *args, **kwargs)

    def setYAtom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setYAtom(self, *args, **kwargs)

    def nMono(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_nMono(self, *args, **kwargs)

    def setNMono(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setNMono(self, *args, **kwargs)

    def aveExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_aveExp(self, *args, **kwargs)

    def setAveExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setAveExp(self, *args, **kwargs)

    def dOffset(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_dOffset(self, *args, **kwargs)

    def setDOffset(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setDOffset(self, *args, **kwargs)

    def hardExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_hardExp(self, *args, **kwargs)

    def setHardExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setHardExp(self, *args, **kwargs)

    def rSwitch(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_rSwitch(self, *args, **kwargs)

    def setRSwitch(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setRSwitch(self, *args, **kwargs)

    def softExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_softExp(self, *args, **kwargs)

    def setSoftExp(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setSoftExp(self, *args, **kwargs)

    def asympSlope(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_asympSlope(self, *args, **kwargs)

    def setAsympSlope(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setAsympSlope(self, *args, **kwargs)

    def useSign(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_useSign(self, *args, **kwargs)

    def setUseSign(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setUseSign(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setVerbose(self, *args, **kwargs)

    def freedom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_freedom(self, *args, **kwargs)

    def setFreedom(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setFreedom(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setPotType(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setAveType(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _planeDistPot.PlaneDistPot_LetterClass_help(self, *args, **kwargs)

class PlaneDistPot_LetterClassPtr(PlaneDistPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PlaneDistPot_LetterClass

PlaneDistPot_LetterClass_swigregister = _planeDistPot.PlaneDistPot_LetterClass_swigregister
PlaneDistPot_LetterClass_swigregister(PlaneDistPot_LetterClass)

class PlaneDistRestraint(Restraint_PlaneDistPot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LESS = _planeDistPot.PlaneDistRestraint_LESS
    GREATER = _planeDistPot.PlaneDistRestraint_GREATER
    INSIDE = _planeDistPot.PlaneDistRestraint_INSIDE
    sel = _swig_property(_planeDistPot.PlaneDistRestraint_sel_get, _planeDistPot.PlaneDistRestraint_sel_set)
    variance = _swig_property(_planeDistPot.PlaneDistRestraint_variance_get, _planeDistPot.PlaneDistRestraint_variance_set)
    verbose = _swig_property(_planeDistPot.PlaneDistRestraint_verbose_get, _planeDistPot.PlaneDistRestraint_verbose_set)

    def __init__(self, *args, **kwargs):
        this = _planeDistPot.new_PlaneDistRestraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _planeDistPot.delete_PlaneDistRestraint
    __del__ = lambda self: None

    def ok(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_ok(self, *args, **kwargs)

    def dist(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_dist(self, *args, **kwargs)

    def status(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_status(self, *args, **kwargs)

    def d(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_d(self, *args, **kwargs)

    def dMinus(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_dMinus(self, *args, **kwargs)

    def dPlus(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_dPlus(self, *args, **kwargs)

    def logDiff(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_logDiff(self, *args, **kwargs)

    def weight(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_weight(self, *args, **kwargs)

    def setWeight(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_setWeight(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_name(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_comment(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint___eq__(self, *args, **kwargs)

    def calcDistanceDiff(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_calcDistanceDiff(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_deriv(self, *args, **kwargs)

    def asString(self, *args, **kwargs):
        return _planeDistPot.PlaneDistRestraint_asString(self, *args, **kwargs)

class PlaneDistRestraintPtr(PlaneDistRestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PlaneDistRestraint

PlaneDistRestraint_swigregister = _planeDistPot.PlaneDistRestraint_swigregister
PlaneDistRestraint_swigregister(PlaneDistRestraint)

class rc_ptr_PlaneDistRestraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _planeDistPot.new_rc_ptr_PlaneDistRestraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _planeDistPot.delete_rc_ptr_PlaneDistRestraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_release(self, *args, **kwargs)
    sel = _swig_property(_planeDistPot.rc_ptr_PlaneDistRestraint_sel_get, _planeDistPot.rc_ptr_PlaneDistRestraint_sel_set)
    variance = _swig_property(_planeDistPot.rc_ptr_PlaneDistRestraint_variance_get, _planeDistPot.rc_ptr_PlaneDistRestraint_variance_set)
    verbose = _swig_property(_planeDistPot.rc_ptr_PlaneDistRestraint_verbose_get, _planeDistPot.rc_ptr_PlaneDistRestraint_verbose_set)

    def ok(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_ok(self, *args, **kwargs)

    def dist(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_dist(self, *args, **kwargs)

    def status(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_status(self, *args, **kwargs)

    def d(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_d(self, *args, **kwargs)

    def dMinus(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_dMinus(self, *args, **kwargs)

    def dPlus(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_dPlus(self, *args, **kwargs)

    def logDiff(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_logDiff(self, *args, **kwargs)

    def weight(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_weight(self, *args, **kwargs)

    def setWeight(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_setWeight(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_name(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_comment(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint___eq__(self, *args, **kwargs)

    def calcDistanceDiff(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_calcDistanceDiff(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_deriv(self, *args, **kwargs)

    def asString(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_asString(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_violated(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _planeDistPot.rc_ptr_PlaneDistRestraint_setName(self, *args, **kwargs)

class rc_ptr_PlaneDistRestraintPtr(rc_ptr_PlaneDistRestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_PlaneDistRestraint

rc_ptr_PlaneDistRestraint_swigregister = _planeDistPot.rc_ptr_PlaneDistRestraint_swigregister
rc_ptr_PlaneDistRestraint_swigregister(rc_ptr_PlaneDistRestraint)

class CDSList_PlaneDistRestraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _planeDistPot.CDSList_PlaneDistRestraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _planeDistPot.new_CDSList_PlaneDistRestraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _planeDistPot.CDSList_PlaneDistRestraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _planeDistPot.CDSList_PlaneDistRestraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _planeDistPot.CDSList_PlaneDistRestraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _planeDistPot.CDSList_PlaneDistRestraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _planeDistPot.CDSList_PlaneDistRestraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _planeDistPot.CDSList_PlaneDistRestraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _planeDistPot.CDSList_PlaneDistRestraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _planeDistPot.CDSList_PlaneDistRestraint_help(self, *args, **kwargs)
    __swig_destroy__ = _planeDistPot.delete_CDSList_PlaneDistRestraint
    __del__ = lambda self: None

class CDSList_PlaneDistRestraintPtr(CDSList_PlaneDistRestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_PlaneDistRestraint

CDSList_PlaneDistRestraint_swigregister = _planeDistPot.CDSList_PlaneDistRestraint_swigregister
CDSList_PlaneDistRestraint_swigregister(CDSList_PlaneDistRestraint)


pyXplorHelp = help


def help(*args):
    return _planeDistPot.help(*args)
help = _planeDistPot.help


