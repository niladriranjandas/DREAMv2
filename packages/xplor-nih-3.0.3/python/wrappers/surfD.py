# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_surfD')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_surfD')
    _surfD = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_surfD', [dirname(__file__)])
        except ImportError:
            import _surfD
            return _surfD
        try:
            _mod = imp.load_module('_surfD', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _surfD = swig_import_helper()
    del swig_import_helper
else:
    import _surfD
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class V_ector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    coeff = _swig_property(_surfD.V_ector_coeff_get, _surfD.V_ector_coeff_set)
    atom_id = _swig_property(_surfD.V_ector_atom_id_get, _surfD.V_ector_atom_id_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_V_ector(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_V_ector
    __del__ = lambda self: None

class V_ectorPtr(V_ector):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = V_ector

V_ector_swigregister = _surfD.V_ector_swigregister
V_ector_swigregister(V_ector)

class VertexType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Coord = _swig_property(_surfD.VertexType_Coord_get, _surfD.VertexType_Coord_set)
    Normal = _swig_property(_surfD.VertexType_Normal_get, _surfD.VertexType_Normal_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_VertexType(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_VertexType
    __del__ = lambda self: None

class VertexTypePtr(VertexType):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VertexType

VertexType_swigregister = _surfD.VertexType_swigregister
VertexType_swigregister(VertexType)

TRI_CONVEX = _surfD.TRI_CONVEX
TRI_CONCAVE = _surfD.TRI_CONCAVE
TRI_TORUS = _surfD.TRI_TORUS
TRI_DUAL = _surfD.TRI_DUAL
class SurfacePoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    delta = _swig_property(_surfD.SurfacePoint_delta_get, _surfD.SurfacePoint_delta_set)
    coord = _swig_property(_surfD.SurfacePoint_coord_get, _surfD.SurfacePoint_coord_set)
    normal = _swig_property(_surfD.SurfacePoint_normal_get, _surfD.SurfacePoint_normal_set)
    atom = _swig_property(_surfD.SurfacePoint_atom_get, _surfD.SurfacePoint_atom_set)
    triType = _swig_property(_surfD.SurfacePoint_triType_get, _surfD.SurfacePoint_triType_set)
    weight = _swig_property(_surfD.SurfacePoint_weight_get, _surfD.SurfacePoint_weight_set)

    def dCoord(self, *args, **kwargs):
        return _surfD.SurfacePoint_dCoord(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_SurfacePoint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_SurfacePoint
    __del__ = lambda self: None

class SurfacePointPtr(SurfacePoint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SurfacePoint

SurfacePoint_swigregister = _surfD.SurfacePoint_swigregister
SurfacePoint_swigregister(SurfacePoint)

class AtomPoints(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    grid = _swig_property(_surfD.AtomPoints_grid_get, _surfD.AtomPoints_grid_set)
    atom = _swig_property(_surfD.AtomPoints_atom_get, _surfD.AtomPoints_atom_set)
    Norm = _swig_property(_surfD.AtomPoints_Norm_get, _surfD.AtomPoints_Norm_set)
    Sum = _swig_property(_surfD.AtomPoints_Sum_get, _surfD.AtomPoints_Sum_set)
    Sum2 = _swig_property(_surfD.AtomPoints_Sum2_get, _surfD.AtomPoints_Sum2_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_AtomPoints(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_AtomPoints
    __del__ = lambda self: None

class AtomPointsPtr(AtomPoints):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = AtomPoints

AtomPoints_swigregister = _surfD.AtomPoints_swigregister
AtomPoints_swigregister(AtomPoints)

class Gp_Atom(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    radius = _swig_property(_surfD.Gp_Atom_radius_get, _surfD.Gp_Atom_radius_set)
    center = _swig_property(_surfD.Gp_Atom_center_get, _surfD.Gp_Atom_center_set)
    tes_origin = _swig_property(_surfD.Gp_Atom_tes_origin_get, _surfD.Gp_Atom_tes_origin_set)
    num_cons = _swig_property(_surfD.Gp_Atom_num_cons_get, _surfD.Gp_Atom_num_cons_set)
    type = _swig_property(_surfD.Gp_Atom_type_get, _surfD.Gp_Atom_type_set)
    boundary = _swig_property(_surfD.Gp_Atom_boundary_get, _surfD.Gp_Atom_boundary_set)
    NmBr = _swig_property(_surfD.Gp_Atom_NmBr_get, _surfD.Gp_Atom_NmBr_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_Gp_Atom(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_Gp_Atom
    __del__ = lambda self: None

class Gp_AtomPtr(Gp_Atom):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Gp_Atom

Gp_Atom_swigregister = _surfD.Gp_Atom_swigregister
Gp_Atom_swigregister(Gp_Atom)

class Big_Point(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    vt = _swig_property(_surfD.Big_Point_vt_get, _surfD.Big_Point_vt_set)
    tes_dir = _swig_property(_surfD.Big_Point_tes_dir_get, _surfD.Big_Point_tes_dir_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_Big_Point(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_Big_Point
    __del__ = lambda self: None

class Big_PointPtr(Big_Point):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Big_Point

Big_Point_swigregister = _surfD.Big_Point_swigregister
Big_Point_swigregister(Big_Point)

class rvertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    v = _swig_property(_surfD.rvertex_v_get, _surfD.rvertex_v_set)
    sq_dist = _swig_property(_surfD.rvertex_sq_dist_get, _surfD.rvertex_sq_dist_set)
    adj_faces = _swig_property(_surfD.rvertex_adj_faces_get, _surfD.rvertex_adj_faces_set)
    in_edges = _swig_property(_surfD.rvertex_in_edges_get, _surfD.rvertex_in_edges_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_rvertex(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_rvertex
    __del__ = lambda self: None

class rvertexPtr(rvertex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rvertex

rvertex_swigregister = _surfD.rvertex_swigregister
rvertex_swigregister(rvertex)

class rface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    vert = _swig_property(_surfD.rface_vert_get, _surfD.rface_vert_set)
    edge = _swig_property(_surfD.rface_edge_get, _surfD.rface_edge_set)
    num_verts = _swig_property(_surfD.rface_num_verts_get, _surfD.rface_num_verts_set)
    id = _swig_property(_surfD.rface_id_get, _surfD.rface_id_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_rface(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_rface
    __del__ = lambda self: None

class rfacePtr(rface):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rface

rface_swigregister = _surfD.rface_swigregister
rface_swigregister(rface)

class redge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    adj_faces = _swig_property(_surfD.redge_adj_faces_get, _surfD.redge_adj_faces_set)
    end_pts = _swig_property(_surfD.redge_end_pts_get, _surfD.redge_end_pts_set)
    int_pts = _swig_property(_surfD.redge_int_pts_get, _surfD.redge_int_pts_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_redge(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_redge
    __del__ = lambda self: None

class redgePtr(redge):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = redge

redge_swigregister = _surfD.redge_swigregister
redge_swigregister(redge)

class tvertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    v = _swig_property(_surfD.tvertex_v_get, _surfD.tvertex_v_set)
    vnum = _swig_property(_surfD.tvertex_vnum_get, _surfD.tvertex_vnum_set)
    data_ptr = _swig_property(_surfD.tvertex_data_ptr_get, _surfD.tvertex_data_ptr_set)
    duplicate = _swig_property(_surfD.tvertex_duplicate_get, _surfD.tvertex_duplicate_set)
    active = _swig_property(_surfD.tvertex_active_get, _surfD.tvertex_active_set)
    mark = _swig_property(_surfD.tvertex_mark_get, _surfD.tvertex_mark_set)
    next = _swig_property(_surfD.tvertex_next_get, _surfD.tvertex_next_set)
    prev = _swig_property(_surfD.tvertex_prev_get, _surfD.tvertex_prev_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_tvertex(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_tvertex
    __del__ = lambda self: None

class tvertexPtr(tvertex):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = tvertex

tvertex_swigregister = _surfD.tvertex_swigregister
tvertex_swigregister(tvertex)

class tedge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ednum = _swig_property(_surfD.tedge_ednum_get, _surfD.tedge_ednum_set)
    adjface = _swig_property(_surfD.tedge_adjface_get, _surfD.tedge_adjface_set)
    endpts = _swig_property(_surfD.tedge_endpts_get, _surfD.tedge_endpts_set)
    deleted = _swig_property(_surfD.tedge_deleted_get, _surfD.tedge_deleted_set)
    next = _swig_property(_surfD.tedge_next_get, _surfD.tedge_next_set)
    prev = _swig_property(_surfD.tedge_prev_get, _surfD.tedge_prev_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_tedge(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_tedge
    __del__ = lambda self: None

class tedgePtr(tedge):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = tedge

tedge_swigregister = _surfD.tedge_swigregister
tedge_swigregister(tedge)

class tface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    edg = _swig_property(_surfD.tface_edg_get, _surfD.tface_edg_set)
    vert = _swig_property(_surfD.tface_vert_get, _surfD.tface_vert_set)
    fnum = _swig_property(_surfD.tface_fnum_get, _surfD.tface_fnum_set)
    visible = _swig_property(_surfD.tface_visible_get, _surfD.tface_visible_set)
    p = _swig_property(_surfD.tface_p_get, _surfD.tface_p_set)
    sq_dist = _swig_property(_surfD.tface_sq_dist_get, _surfD.tface_sq_dist_set)
    next = _swig_property(_surfD.tface_next_get, _surfD.tface_next_set)
    prev = _swig_property(_surfD.tface_prev_get, _surfD.tface_prev_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_tface(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_tface
    __del__ = lambda self: None

class tfacePtr(tface):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = tface

tface_swigregister = _surfD.tface_swigregister
tface_swigregister(tface)

class Surf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    atoms = _swig_property(_surfD.Surf_atoms_get, _surfD.Surf_atoms_set)
    Checks_On = _swig_property(_surfD.Surf_Checks_On_get, _surfD.Surf_Checks_On_set)
    atomPoints = _swig_property(_surfD.Surf_atomPoints_get, _surfD.Surf_atomPoints_set)
    Num_polys = _swig_property(_surfD.Surf_Num_polys_get, _surfD.Surf_Num_polys_set)
    Num_p = _swig_property(_surfD.Surf_Num_p_get, _surfD.Surf_Num_p_set)
    max_cons = _swig_property(_surfD.Surf_max_cons_get, _surfD.Surf_max_cons_set)
    tot_cons = _swig_property(_surfD.Surf_tot_cons_get, _surfD.Surf_tot_cons_set)
    Voxel_Side = _swig_property(_surfD.Surf_Voxel_Side_get, _surfD.Surf_Voxel_Side_set)
    Num_Voxels = _swig_property(_surfD.Surf_Num_Voxels_get, _surfD.Surf_Num_Voxels_set)
    Max_Radius = _swig_property(_surfD.Surf_Max_Radius_get, _surfD.Surf_Max_Radius_set)
    Bounding_Tetra = _swig_property(_surfD.Surf_Bounding_Tetra_get, _surfD.Surf_Bounding_Tetra_set)
    Extents = _swig_property(_surfD.Surf_Extents_get, _surfD.Surf_Extents_set)
    atomSel_ = _swig_property(_surfD.Surf_atomSel__get)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_Surf(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_Surf
    __del__ = lambda self: None

    def atomSel(self, *args, **kwargs):
        return _surfD.Surf_atomSel(self, *args, **kwargs)

    def maxTessLen(self, *args, **kwargs):
        return _surfD.Surf_maxTessLen(self, *args, **kwargs)

    def setMaxTessLen(self, *args, **kwargs):
        return _surfD.Surf_setMaxTessLen(self, *args, **kwargs)

    def probeRadius(self, *args, **kwargs):
        return _surfD.Surf_probeRadius(self, *args, **kwargs)

    def setProbeRadius(self, *args, **kwargs):
        return _surfD.Surf_setProbeRadius(self, *args, **kwargs)

    def updateAtomPos(self, *args, **kwargs):
        return _surfD.Surf_updateAtomPos(self, *args, **kwargs)

    def updateGridDelta(self, *args, **kwargs):
        return _surfD.Surf_updateGridDelta(self, *args, **kwargs)

    def update_radii(self, *args, **kwargs):
        return _surfD.Surf_update_radii(self, *args, **kwargs)

    def tessellate(self, *args, **kwargs):
        return _surfD.Surf_tessellate(self, *args, **kwargs)

    def int_out_dat(self, *args, **kwargs):
        return _surfD.Surf_int_out_dat(self, *args, **kwargs)

    def init_and_compute(self, *args, **kwargs):
        return _surfD.Surf_init_and_compute(self, *args, **kwargs)

    def remove_duplicates(self, *args, **kwargs):
        return _surfD.Surf_remove_duplicates(self, *args, **kwargs)

    def mark_duplicates(self, *args, **kwargs):
        return _surfD.Surf_mark_duplicates(self, *args, **kwargs)

    def calc_sums_out_dat(self, *args, **kwargs):
        return _surfD.Surf_calc_sums_out_dat(self, *args, **kwargs)

    def dump_out_dat(self, *args, **kwargs):
        return _surfD.Surf_dump_out_dat(self, *args, **kwargs)

    def surfOutput(self, *args, **kwargs):
        return _surfD.Surf_surfOutput(self, *args, **kwargs)

    def check_duplicates(self, *args, **kwargs):
        return _surfD.Surf_check_duplicates(self, *args, **kwargs)

    def compute_extents(self, *args, **kwargs):
        return _surfD.Surf_compute_extents(self, *args, **kwargs)

    def compute_bounding_tetra(self, *args, **kwargs):
        return _surfD.Surf_compute_bounding_tetra(self, *args, **kwargs)

    def compute_components(self, *args, **kwargs):
        return _surfD.Surf_compute_components(self, *args, **kwargs)

    def calcSA(self, *args, **kwargs):
        return _surfD.Surf_calcSA(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _surfD.Surf_help(self, *args, **kwargs)

class SurfPtr(Surf):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Surf

Surf_swigregister = _surfD.Surf_swigregister
Surf_swigregister(Surf)

class CovMat(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    XX = _swig_property(_surfD.CovMat_XX_get, _surfD.CovMat_XX_set)
    YY = _swig_property(_surfD.CovMat_YY_get, _surfD.CovMat_YY_set)
    ZZ = _swig_property(_surfD.CovMat_ZZ_get, _surfD.CovMat_ZZ_set)
    XY = _swig_property(_surfD.CovMat_XY_get, _surfD.CovMat_XY_set)
    XZ = _swig_property(_surfD.CovMat_XZ_get, _surfD.CovMat_XZ_set)
    YZ = _swig_property(_surfD.CovMat_YZ_get, _surfD.CovMat_YZ_set)
    Cm = _swig_property(_surfD.CovMat_Cm_get, _surfD.CovMat_Cm_set)
    Norm_all = _swig_property(_surfD.CovMat_Norm_all_get, _surfD.CovMat_Norm_all_set)
    Sum_all = _swig_property(_surfD.CovMat_Sum_all_get, _surfD.CovMat_Sum_all_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_CovMat(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_CovMat
    __del__ = lambda self: None

class CovMatPtr(CovMat):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CovMat

CovMat_swigregister = _surfD.CovMat_swigregister
CovMat_swigregister(CovMat)

class CovMat_Gradients(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    dX_mtrx = _swig_property(_surfD.CovMat_Gradients_dX_mtrx_get, _surfD.CovMat_Gradients_dX_mtrx_set)
    dY_mtrx = _swig_property(_surfD.CovMat_Gradients_dY_mtrx_get, _surfD.CovMat_Gradients_dY_mtrx_set)
    dZ_mtrx = _swig_property(_surfD.CovMat_Gradients_dZ_mtrx_get, _surfD.CovMat_Gradients_dZ_mtrx_set)
    dX_Ecvrm = _swig_property(_surfD.CovMat_Gradients_dX_Ecvrm_get, _surfD.CovMat_Gradients_dX_Ecvrm_set)
    dY_Ecvrm = _swig_property(_surfD.CovMat_Gradients_dY_Ecvrm_get, _surfD.CovMat_Gradients_dY_Ecvrm_set)
    dZ_Ecvrm = _swig_property(_surfD.CovMat_Gradients_dZ_Ecvrm_get, _surfD.CovMat_Gradients_dZ_Ecvrm_set)
    dX_mtrxV = _swig_property(_surfD.CovMat_Gradients_dX_mtrxV_get, _surfD.CovMat_Gradients_dX_mtrxV_set)
    dY_mtrxV = _swig_property(_surfD.CovMat_Gradients_dY_mtrxV_get, _surfD.CovMat_Gradients_dY_mtrxV_set)
    dZ_mtrxV = _swig_property(_surfD.CovMat_Gradients_dZ_mtrxV_get, _surfD.CovMat_Gradients_dZ_mtrxV_set)
    dX_Diff = _swig_property(_surfD.CovMat_Gradients_dX_Diff_get, _surfD.CovMat_Gradients_dX_Diff_set)
    dY_Diff = _swig_property(_surfD.CovMat_Gradients_dY_Diff_get, _surfD.CovMat_Gradients_dY_Diff_set)
    dZ_Diff = _swig_property(_surfD.CovMat_Gradients_dZ_Diff_get, _surfD.CovMat_Gradients_dZ_Diff_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_CovMat_Gradients(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_CovMat_Gradients
    __del__ = lambda self: None

class CovMat_GradientsPtr(CovMat_Gradients):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CovMat_Gradients

CovMat_Gradients_swigregister = _surfD.CovMat_Gradients_swigregister
CovMat_Gradients_swigregister(CovMat_Gradients)

class eigS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Ex = _swig_property(_surfD.eigS_Ex_get, _surfD.eigS_Ex_set)
    Ey = _swig_property(_surfD.eigS_Ey_get, _surfD.eigS_Ey_set)
    Ez = _swig_property(_surfD.eigS_Ez_get, _surfD.eigS_Ez_set)
    Vx = _swig_property(_surfD.eigS_Vx_get, _surfD.eigS_Vx_set)
    Vy = _swig_property(_surfD.eigS_Vy_get, _surfD.eigS_Vy_set)
    Vz = _swig_property(_surfD.eigS_Vz_get, _surfD.eigS_Vz_set)

    def __init__(self, *args, **kwargs):
        this = _surfD.new_eigS(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _surfD.delete_eigS
    __del__ = lambda self: None

class eigSPtr(eigS):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = eigS

eigS_swigregister = _surfD.eigS_swigregister
eigS_swigregister(eigS)

class SurfDiff(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _surfD.new_SurfDiff(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def cvrm_W(self, *args, **kwargs):
        return _surfD.SurfDiff_cvrm_W(self, *args, **kwargs)

    def calc_sum(self, *args, **kwargs):
        return _surfD.SurfDiff_calc_sum(self, *args, **kwargs)

    def make_diffusion_tensor(self, *args, **kwargs):
        return _surfD.SurfDiff_make_diffusion_tensor(self, *args, **kwargs)

    def ellipt_int_simp(self, *args, **kwargs):
        return _surfD.SurfDiff_ellipt_int_simp(self, *args, **kwargs)

    def calculate_derivatives(self, *args, **kwargs):
        return _surfD.SurfDiff_calculate_derivatives(self, *args, **kwargs)

    def calc_cov_dif(self, *args, **kwargs):
        return _surfD.SurfDiff_calc_cov_dif(self, *args, **kwargs)

    def calculate_chi2(self, *args, **kwargs):
        return _surfD.SurfDiff_calculate_chi2(self, *args, **kwargs)

    def calculate_chi2_eigen_values(self, *args, **kwargs):
        return _surfD.SurfDiff_calculate_chi2_eigen_values(self, *args, **kwargs)

    def calculate_energy_and_derivatives(self, *args, **kwargs):
        return _surfD.SurfDiff_calculate_energy_and_derivatives(self, *args, **kwargs)

    def current_diffusion_tensor(self, *args, **kwargs):
        return _surfD.SurfDiff_current_diffusion_tensor(self, *args, **kwargs)

    def eig_calc(self, *args, **kwargs):
        return _surfD.SurfDiff_eig_calc(self, *args, **kwargs)

    def calc_Tmp(self, *args, **kwargs):
        return _surfD.SurfDiff_calc_Tmp(self, *args, **kwargs)

    def num_calc_deriv_P_Q_R_on_Ax_Ay_Az(self, *args, **kwargs):
        return _surfD.SurfDiff_num_calc_deriv_P_Q_R_on_Ax_Ay_Az(self, *args, **kwargs)

    def num_calc_deriv_Per_XYZ_on_Ax_Ay_Az(self, *args, **kwargs):
        return _surfD.SurfDiff_num_calc_deriv_Per_XYZ_on_Ax_Ay_Az(self, *args, **kwargs)

    def element_prod(self, *args, **kwargs):
        return _surfD.SurfDiff_element_prod(self, *args, **kwargs)

    def dTmpF_dT(self, *args, **kwargs):
        return _surfD.SurfDiff_dTmpF_dT(self, *args, **kwargs)

    def calc_deriv_Per_x_Per_y_Per_z_on_Ax_Ay_Az(self, *args, **kwargs):
        return _surfD.SurfDiff_calc_deriv_Per_x_Per_y_Per_z_on_Ax_Ay_Az(self, *args, **kwargs)

    def bra_Mat_ket(self, *args, **kwargs):
        return _surfD.SurfDiff_bra_Mat_ket(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _surfD.SurfDiff_help(self, *args, **kwargs)
    __swig_destroy__ = _surfD.delete_SurfDiff
    __del__ = lambda self: None

class SurfDiffPtr(SurfDiff):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SurfDiff

SurfDiff_swigregister = _surfD.SurfDiff_swigregister
SurfDiff_swigregister(SurfDiff)

class CDSList_AtomPoints(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _surfD.CDSList_AtomPoints___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _surfD.new_CDSList_AtomPoints(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _surfD.CDSList_AtomPoints___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _surfD.CDSList_AtomPoints___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _surfD.CDSList_AtomPoints_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _surfD.CDSList_AtomPoints_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _surfD.CDSList_AtomPoints_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _surfD.CDSList_AtomPoints___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _surfD.CDSList_AtomPoints___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _surfD.CDSList_AtomPoints_help(self, *args, **kwargs)
    __swig_destroy__ = _surfD.delete_CDSList_AtomPoints
    __del__ = lambda self: None

class CDSList_AtomPointsPtr(CDSList_AtomPoints):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_AtomPoints

CDSList_AtomPoints_swigregister = _surfD.CDSList_AtomPoints_swigregister
CDSList_AtomPoints_swigregister(CDSList_AtomPoints)

class CDSList_SurfacePoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _surfD.CDSList_SurfacePoint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _surfD.new_CDSList_SurfacePoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _surfD.CDSList_SurfacePoint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _surfD.CDSList_SurfacePoint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _surfD.CDSList_SurfacePoint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _surfD.CDSList_SurfacePoint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _surfD.CDSList_SurfacePoint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _surfD.CDSList_SurfacePoint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _surfD.CDSList_SurfacePoint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _surfD.CDSList_SurfacePoint_help(self, *args, **kwargs)
    __swig_destroy__ = _surfD.delete_CDSList_SurfacePoint
    __del__ = lambda self: None

class CDSList_SurfacePointPtr(CDSList_SurfacePoint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_SurfacePoint

CDSList_SurfacePoint_swigregister = _surfD.CDSList_SurfacePoint_swigregister
CDSList_SurfacePoint_swigregister(CDSList_SurfacePoint)

class CDSList_Gp_Atom(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _surfD.CDSList_Gp_Atom___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _surfD.new_CDSList_Gp_Atom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _surfD.CDSList_Gp_Atom___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _surfD.CDSList_Gp_Atom___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _surfD.CDSList_Gp_Atom_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _surfD.CDSList_Gp_Atom_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _surfD.CDSList_Gp_Atom_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _surfD.CDSList_Gp_Atom___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _surfD.CDSList_Gp_Atom___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _surfD.CDSList_Gp_Atom_help(self, *args, **kwargs)
    __swig_destroy__ = _surfD.delete_CDSList_Gp_Atom
    __del__ = lambda self: None

class CDSList_Gp_AtomPtr(CDSList_Gp_Atom):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Gp_Atom

CDSList_Gp_Atom_swigregister = _surfD.CDSList_Gp_Atom_swigregister
CDSList_Gp_Atom_swigregister(CDSList_Gp_Atom)


pyXplorHelp = help


def help(*args):
    return _surfD.help(*args)
help = _surfD.help


