# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_relaxData')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_relaxData')
    _relaxData = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_relaxData', [dirname(__file__)])
        except ImportError:
            import _relaxData
            return _relaxData
        try:
            _mod = imp.load_module('_relaxData', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _relaxData = swig_import_helper()
    del swig_import_helper
else:
    import _relaxData
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _relaxData.Modified_MOD_SELF
    MOD_SIMULATION = _relaxData.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _relaxData.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _relaxData.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _relaxData.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _relaxData.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _relaxData.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _relaxData.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _relaxData.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _relaxData.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_relaxData.ModifiedBase_modified_get, _relaxData.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_relaxData.ModifiedBase_registeredSimulations_get, _relaxData.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _relaxData.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _relaxData.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _relaxData.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _relaxData.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _relaxData.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)


import mat3

class E_a2_res(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    E = _swig_property(_relaxData.E_a2_res_E_get, _relaxData.E_a2_res_E_set)
    E2 = _swig_property(_relaxData.E_a2_res_E2_get, _relaxData.E_a2_res_E2_set)
    a2 = _swig_property(_relaxData.E_a2_res_a2_get, _relaxData.E_a2_res_a2_set)

    def __init__(self, *args, **kwargs):
        this = _relaxData.new_E_a2_res(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _relaxData.delete_E_a2_res
    __del__ = lambda self: None

class E_a2_resPtr(E_a2_res):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = E_a2_res

E_a2_res_swigregister = _relaxData.E_a2_res_swigregister
E_a2_res_swigregister(E_a2_res)


def sim_relax_data(*args, **kwargs):
    return _relaxData.sim_relax_data(*args, **kwargs)
sim_relax_data = _relaxData.sim_relax_data

def red_WM(*args, **kwargs):
    return _relaxData.red_WM(*args, **kwargs)
red_WM = _relaxData.red_WM

def WignerM(*args, **kwargs):
    return _relaxData.WignerM(*args, **kwargs)
WignerM = _relaxData.WignerM

def E_a2(*args, **kwargs):
    return _relaxData.E_a2(*args, **kwargs)
E_a2 = _relaxData.E_a2

def conjWM(*args, **kwargs):
    return _relaxData.conjWM(*args, **kwargs)
conjWM = _relaxData.conjWM

def Euler_from_rotmat(*args, **kwargs):
    return _relaxData.Euler_from_rotmat(*args, **kwargs)
Euler_from_rotmat = _relaxData.Euler_from_rotmat

def rotmat_from_Euler(*args, **kwargs):
    return _relaxData.rotmat_from_Euler(*args, **kwargs)
rotmat_from_Euler = _relaxData.rotmat_from_Euler

def corrLegendre2Vec3(*args, **kwargs):
    return _relaxData.corrLegendre2Vec3(*args, **kwargs)
corrLegendre2Vec3 = _relaxData.corrLegendre2Vec3

def corrCosVec3(*args, **kwargs):
    return _relaxData.corrCosVec3(*args, **kwargs)
corrCosVec3 = _relaxData.corrCosVec3

pyXplorHelp = help


def help(*args):
    return _relaxData.help(*args)
help = _relaxData.help


