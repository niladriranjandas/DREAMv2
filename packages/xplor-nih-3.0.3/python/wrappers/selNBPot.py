# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_selNBPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_selNBPot')
    _selNBPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_selNBPot', [dirname(__file__)])
        except ImportError:
            import _selNBPot
            return _selNBPot
        try:
            _mod = imp.load_module('_selNBPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _selNBPot = swig_import_helper()
    del swig_import_helper
else:
    import _selNBPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _selNBPot.Modified_MOD_SELF
    MOD_SIMULATION = _selNBPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _selNBPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _selNBPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _selNBPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _selNBPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _selNBPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _selNBPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _selNBPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _selNBPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_selNBPot.ModifiedBase_modified_get, _selNBPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_selNBPot.ModifiedBase_registeredSimulations_get, _selNBPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _selNBPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _selNBPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _selNBPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _selNBPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _selNBPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class SelNBPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _selNBPot.new_SelNBPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _selNBPot.SelNBPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _selNBPot.SelNBPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _selNBPot.SelNBPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _selNBPot.SelNBPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _selNBPot.SelNBPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _selNBPot.SelNBPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _selNBPot.SelNBPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _selNBPot.SelNBPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _selNBPot.delete_SelNBPot
    __del__ = lambda self: None

    def updateValues(self, *args, **kwargs):
        return _selNBPot.SelNBPot_updateValues(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _selNBPot.SelNBPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _selNBPot.SelNBPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _selNBPot.SelNBPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _selNBPot.SelNBPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _selNBPot.SelNBPot_numRestraints(self, *args, **kwargs)

    def updateNeighborList(self, *args, **kwargs):
        return _selNBPot.SelNBPot_updateNeighborList(self, *args, **kwargs)
    neighbors = _swig_property(_selNBPot.SelNBPot_neighbors_get, _selNBPot.SelNBPot_neighbors_set)

    def info(self, *args, **kwargs):
        return _selNBPot.SelNBPot_info(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _selNBPot.SelNBPot_showViolations(self, *args, **kwargs)

    def moveTol(self, *args, **kwargs):
        return _selNBPot.SelNBPot_moveTol(self, *args, **kwargs)

    def setMoveTol(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setMoveTol(self, *args, **kwargs)

    def cutoffShort(self, *args, **kwargs):
        return _selNBPot.SelNBPot_cutoffShort(self, *args, **kwargs)

    def setCutoffShort(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setCutoffShort(self, *args, **kwargs)

    def cutoffLong(self, *args, **kwargs):
        return _selNBPot.SelNBPot_cutoffLong(self, *args, **kwargs)

    def setCutoffLong(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setCutoffLong(self, *args, **kwargs)

    def groups(self, *args, **kwargs):
        return _selNBPot.SelNBPot_groups(self, *args, **kwargs)

    def setGroups(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setGroups(self, *args, **kwargs)

    def interactionMat(self, *args, **kwargs):
        return _selNBPot.SelNBPot_interactionMat(self, *args, **kwargs)

    def setInteractionMat(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setInteractionMat(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _selNBPot.SelNBPot_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setAveType(self, *args, **kwargs)

    def aveExp(self, *args, **kwargs):
        return _selNBPot.SelNBPot_aveExp(self, *args, **kwargs)

    def setAveExp(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setAveExp(self, *args, **kwargs)

    def dSwitch(self, *args, **kwargs):
        return _selNBPot.SelNBPot_dSwitch(self, *args, **kwargs)

    def setDSwitch(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setDSwitch(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _selNBPot.SelNBPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setVerbose(self, *args, **kwargs)

    def distances(self, *args, **kwargs):
        return _selNBPot.SelNBPot_distances(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _selNBPot.SelNBPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _selNBPot.SelNBPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _selNBPot.SelNBPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _selNBPot.SelNBPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _selNBPot.SelNBPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _selNBPot.SelNBPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _selNBPot.SelNBPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _selNBPot.SelNBPot_setThreshold(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _selNBPot.SelNBPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_selNBPot.SelNBPot_instanceData__get, _selNBPot.SelNBPot_instanceData__set)
    instanceDataCreate = _swig_property(_selNBPot.SelNBPot_instanceDataCreate_get, _selNBPot.SelNBPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_selNBPot.SelNBPot_instanceDataCleanup_get, _selNBPot.SelNBPot_instanceDataCleanup_set)
    modified = _swig_property(_selNBPot.SelNBPot_modified_get, _selNBPot.SelNBPot_modified_set)
    registeredSimulations = _swig_property(_selNBPot.SelNBPot_registeredSimulations_get, _selNBPot.SelNBPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _selNBPot.SelNBPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _selNBPot.SelNBPot_unRegister(self, *args, **kwargs)

class SelNBPotPtr(SelNBPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SelNBPot

SelNBPot_swigregister = _selNBPot.SelNBPot_swigregister
SelNBPot_swigregister(SelNBPot)


realSelNBPot = SelNBPot
def SelNBPot(*args):
    from potProxy import PotProxy
    return PotProxy( realSelNBPot(*args) )

class CDSList_AtomSel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _selNBPot.CDSList_AtomSel___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _selNBPot.new_CDSList_AtomSel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _selNBPot.CDSList_AtomSel___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _selNBPot.CDSList_AtomSel___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _selNBPot.CDSList_AtomSel_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _selNBPot.CDSList_AtomSel_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _selNBPot.CDSList_AtomSel_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _selNBPot.CDSList_AtomSel___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _selNBPot.CDSList_AtomSel___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _selNBPot.CDSList_AtomSel_help(self, *args, **kwargs)
    __swig_destroy__ = _selNBPot.delete_CDSList_AtomSel
    __del__ = lambda self: None

class CDSList_AtomSelPtr(CDSList_AtomSel):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_AtomSel

CDSList_AtomSel_swigregister = _selNBPot.CDSList_AtomSel_swigregister
CDSList_AtomSel_swigregister(CDSList_AtomSel)

class SelNBPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CENTER = _selNBPot.SelNBPot_LetterClass_CENTER
    SUM = _selNBPot.SelNBPot_LetterClass_SUM

    def updateValues(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_updateValues(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _selNBPot.new_SelNBPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _selNBPot.delete_SelNBPot_LetterClass
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_numRestraints(self, *args, **kwargs)

    def updateNeighborList(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_updateNeighborList(self, *args, **kwargs)
    neighbors = _swig_property(_selNBPot.SelNBPot_LetterClass_neighbors_get, _selNBPot.SelNBPot_LetterClass_neighbors_set)

    def info(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_info(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_showViolations(self, *args, **kwargs)

    def moveTol(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_moveTol(self, *args, **kwargs)

    def setMoveTol(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_setMoveTol(self, *args, **kwargs)

    def cutoffShort(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_cutoffShort(self, *args, **kwargs)

    def setCutoffShort(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_setCutoffShort(self, *args, **kwargs)

    def cutoffLong(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_cutoffLong(self, *args, **kwargs)

    def setCutoffLong(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_setCutoffLong(self, *args, **kwargs)

    def groups(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_groups(self, *args, **kwargs)

    def setGroups(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_setGroups(self, *args, **kwargs)

    def interactionMat(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_interactionMat(self, *args, **kwargs)

    def setInteractionMat(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_setInteractionMat(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_setAveType(self, *args, **kwargs)

    def aveExp(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_aveExp(self, *args, **kwargs)

    def setAveExp(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_setAveExp(self, *args, **kwargs)

    def dSwitch(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_dSwitch(self, *args, **kwargs)

    def setDSwitch(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_setDSwitch(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_setVerbose(self, *args, **kwargs)

    def distances(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_distances(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _selNBPot.SelNBPot_LetterClass_help(self, *args, **kwargs)

class SelNBPot_LetterClassPtr(SelNBPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SelNBPot_LetterClass

SelNBPot_LetterClass_swigregister = _selNBPot.SelNBPot_LetterClass_swigregister
SelNBPot_LetterClass_swigregister(SelNBPot_LetterClass)


pyXplorHelp = help


def help(*args):
    return _selNBPot.help(*args)
help = _selNBPot.help


