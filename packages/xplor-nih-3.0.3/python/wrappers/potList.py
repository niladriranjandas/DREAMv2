# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_potList')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_potList')
    _potList = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_potList', [dirname(__file__)])
        except ImportError:
            import _potList
            return _potList
        try:
            _mod = imp.load_module('_potList', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _potList = swig_import_helper()
    del swig_import_helper
else:
    import _potList
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class rc_Pot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def instanceName(self, *args, **kwargs):
        return _potList.rc_Pot_instanceName(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _potList.rc_Pot_potName(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _potList.rc_Pot_instanceData(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _potList.rc_Pot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _potList.rc_Pot_setScale(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _potList.rc_Pot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _potList.rc_Pot_calcEnergyAndDerivs(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _potList.new_rc_Pot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _potList.delete_rc_Pot
    __del__ = lambda self: None

class rc_PotPtr(rc_Pot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_Pot

rc_Pot_swigregister = _potList.rc_Pot_swigregister
rc_Pot_swigregister(rc_Pot)

class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _potList.Modified_MOD_SELF
    MOD_SIMULATION = _potList.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _potList.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _potList.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _potList.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _potList.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _potList.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _potList.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _potList.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _potList.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_potList.ModifiedBase_modified_get, _potList.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_potList.ModifiedBase_registeredSimulations_get, _potList.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _potList.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _potList.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _potList.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _potList.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _potList.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class PotList(rc_Pot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _potList.new_PotList(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _potList.PotList___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _potList.PotList___ref__(self, *args, **kwargs)

    def getitem_string(self, *args, **kwargs):
        return _potList.PotList_getitem_string(self, *args, **kwargs)

    def getitem_int(self, *args, **kwargs):
        return _potList.PotList_getitem_int(self, *args, **kwargs)

    def __len__(self, *args, **kwargs):
        return _potList.PotList___len__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _potList.PotList___getslice__(self, *args, **kwargs)

    def __getitem__(self,cnt):
        from potDerive import createDerivedPot
        if type(cnt)==type(1):
            pot = self.getitem_int(cnt)
        else:
            pot = self.getitem_string(cnt)
        return createDerivedPot(pot)
    def keys(self):
        return map(lambda p: p.instanceData().instanceName(), self)
    def append(self,pot):
        return self.renamed_add(pot)
    def remove(self,name):
        return self.renamed_remove(name)
    def copy(self,potList):
        for pot in potList:
            self.append(pot)

    #restraintStats should not try to get per-restraint violations
    noViolationStats=True


    def add(self,pot): return self.append(pot)


    def registerInstanceData(self, *args, **kwargs):
        return _potList.PotList_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _potList.PotList_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _potList.PotList_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _potList.PotList_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _potList.PotList_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _potList.PotList_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _potList.delete_PotList
    __del__ = lambda self: None

    def renamed_add(self, *args, **kwargs):
        return _potList.PotList_renamed_add(self, *args, **kwargs)

    def renamed_remove(self, *args, **kwargs):
        return _potList.PotList_renamed_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _potList.PotList_removeAll(self, *args, **kwargs)

    def byName(self, *args, **kwargs):
        return _potList.PotList_byName(self, *args, **kwargs)

    def list(self, *args, **kwargs):
        return _potList.PotList_list(self, *args, **kwargs)

    def size(self, *args, **kwargs):
        return _potList.PotList_size(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _potList.PotList_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _potList.PotList_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _potList.PotList_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _potList.PotList_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _potList.PotList_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _potList.PotList_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _potList.PotList_energyMaybeDerivsPost(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _potList.PotList_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _potList.PotList_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _potList.PotList_numRestraints(self, *args, **kwargs)

    def addEnergyReport(self, *args, **kwargs):
        return _potList.PotList_addEnergyReport(self, *args, **kwargs)

    def clearEnergyReports(self, *args, **kwargs):
        return _potList.PotList_clearEnergyReports(self, *args, **kwargs)

    def energyReports(self, *args, **kwargs):
        return _potList.PotList_energyReports(self, *args, **kwargs)

    def showReport(self, *args, **kwargs):
        return _potList.PotList_showReport(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _potList.PotList_updateDelta(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _potList.PotList_setEnsWeights(self, *args, **kwargs)

    def getitem_string(self, *args, **kwargs):
        return _potList.PotList_getitem_string(self, *args, **kwargs)

    def getitem_int(self, *args, **kwargs):
        return _potList.PotList_getitem_int(self, *args, **kwargs)

    def __len__(self, *args, **kwargs):
        return _potList.PotList___len__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _potList.PotList___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _potList.PotList_help(self, *args, **kwargs)

    def simulation(self, *args):
        return _potList.PotList_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _potList.PotList_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _potList.PotList_ensWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _potList.PotList_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _potList.PotList_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _potList.PotList_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _potList.PotList_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _potList.PotList_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _potList.PotList_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _potList.PotList_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _potList.PotList_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _potList.PotList_ensWeightsInfo(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _potList.PotList_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _potList.PotList_resetInstanceName(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _potList.PotList_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _potList.PotList_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _potList.PotList_updateValues(self, *args, **kwargs)
    instanceData_ = _swig_property(_potList.PotList_instanceData__get, _potList.PotList_instanceData__set)
    instanceDataCreate = _swig_property(_potList.PotList_instanceDataCreate_get, _potList.PotList_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_potList.PotList_instanceDataCleanup_get, _potList.PotList_instanceDataCleanup_set)
    modified = _swig_property(_potList.PotList_modified_get, _potList.PotList_modified_set)
    registeredSimulations = _swig_property(_potList.PotList_registeredSimulations_get, _potList.PotList_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _potList.PotList_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _potList.PotList_unRegister(self, *args, **kwargs)

class PotListPtr(PotList):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PotList

PotList_swigregister = _potList.PotList_swigregister
PotList_swigregister(PotList)


realPotList = PotList
def PotList(*args):
    from potProxy import PotProxy
    return PotProxy( realPotList(*args) )

class PotList_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _potList.new_PotList_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def renamed_add(self, *args, **kwargs):
        return _potList.PotList_LetterClass_renamed_add(self, *args, **kwargs)

    def renamed_remove(self, *args, **kwargs):
        return _potList.PotList_LetterClass_renamed_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _potList.PotList_LetterClass_removeAll(self, *args, **kwargs)

    def byName(self, *args, **kwargs):
        return _potList.PotList_LetterClass_byName(self, *args, **kwargs)

    def list(self, *args, **kwargs):
        return _potList.PotList_LetterClass_list(self, *args, **kwargs)

    def size(self, *args, **kwargs):
        return _potList.PotList_LetterClass_size(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _potList.PotList_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _potList.PotList_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _potList.PotList_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _potList.PotList_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _potList.PotList_LetterClass_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _potList.PotList_LetterClass_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _potList.PotList_LetterClass_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _potList.PotList_LetterClass_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _potList.PotList_LetterClass_energyMaybeDerivsPost(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _potList.PotList_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _potList.PotList_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _potList.PotList_LetterClass_numRestraints(self, *args, **kwargs)

    def addEnergyReport(self, *args, **kwargs):
        return _potList.PotList_LetterClass_addEnergyReport(self, *args, **kwargs)

    def clearEnergyReports(self, *args, **kwargs):
        return _potList.PotList_LetterClass_clearEnergyReports(self, *args, **kwargs)

    def energyReports(self, *args, **kwargs):
        return _potList.PotList_LetterClass_energyReports(self, *args, **kwargs)

    def showReport(self, *args, **kwargs):
        return _potList.PotList_LetterClass_showReport(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _potList.PotList_LetterClass_updateDelta(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _potList.PotList_LetterClass_setEnsWeights(self, *args, **kwargs)

    def getitem_string(self, *args, **kwargs):
        return _potList.PotList_LetterClass_getitem_string(self, *args, **kwargs)

    def getitem_int(self, *args, **kwargs):
        return _potList.PotList_LetterClass_getitem_int(self, *args, **kwargs)

    def __len__(self, *args, **kwargs):
        return _potList.PotList_LetterClass___len__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _potList.PotList_LetterClass___getslice__(self, *args, **kwargs)

    def __getitem__(self,cnt):
        from potDerive import createDerivedPot
        if type(cnt)==type(1):
            pot = self.getitem_int(cnt)
        else:
            pot = self.getitem_string(cnt)
        return createDerivedPot(pot)
    def keys(self):
        return map(lambda p: p.instanceData().instanceName(), self)
    def append(self,pot):
        return self.renamed_add(pot)
    def remove(self,name):
        return self.renamed_remove(name)
    def copy(self,potList):
        for pot in potList:
            self.append(pot)

    #restraintStats should not try to get per-restraint violations
    noViolationStats=True


    def add(self,pot): return self.append(pot)


    def help(self, *args, **kwargs):
        return _potList.PotList_LetterClass_help(self, *args, **kwargs)
    __swig_destroy__ = _potList.delete_PotList_LetterClass
    __del__ = lambda self: None

class PotList_LetterClassPtr(PotList_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PotList_LetterClass

PotList_LetterClass_swigregister = _potList.PotList_LetterClass_swigregister
PotList_LetterClass_swigregister(PotList_LetterClass)

class CDSList_rc_Pot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _potList.CDSList_rc_Pot___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _potList.new_CDSList_rc_Pot(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _potList.CDSList_rc_Pot___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _potList.CDSList_rc_Pot___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _potList.CDSList_rc_Pot_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _potList.CDSList_rc_Pot_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _potList.CDSList_rc_Pot_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _potList.CDSList_rc_Pot___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _potList.CDSList_rc_Pot___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _potList.CDSList_rc_Pot_help(self, *args, **kwargs)
    __swig_destroy__ = _potList.delete_CDSList_rc_Pot
    __del__ = lambda self: None

class CDSList_rc_PotPtr(CDSList_rc_Pot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_rc_Pot

CDSList_rc_Pot_swigregister = _potList.CDSList_rc_Pot_swigregister
CDSList_rc_Pot_swigregister(CDSList_rc_Pot)


pyXplorHelp = help


def help(*args):
    return _potList.help(*args)
help = _potList.help


