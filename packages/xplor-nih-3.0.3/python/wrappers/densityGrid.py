# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_densityGrid')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_densityGrid')
    _densityGrid = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_densityGrid', [dirname(__file__)])
        except ImportError:
            import _densityGrid
            return _densityGrid
        try:
            _mod = imp.load_module('_densityGrid', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _densityGrid = swig_import_helper()
    del swig_import_helper
else:
    import _densityGrid
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class DensityGrid_Params(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    xdelta = _swig_property(_densityGrid.DensityGrid_Params_xdelta_get, _densityGrid.DensityGrid_Params_xdelta_set)
    ydelta = _swig_property(_densityGrid.DensityGrid_Params_ydelta_get, _densityGrid.DensityGrid_Params_ydelta_set)
    zdelta = _swig_property(_densityGrid.DensityGrid_Params_zdelta_get, _densityGrid.DensityGrid_Params_zdelta_set)
    xmin = _swig_property(_densityGrid.DensityGrid_Params_xmin_get, _densityGrid.DensityGrid_Params_xmin_set)
    ymin = _swig_property(_densityGrid.DensityGrid_Params_ymin_get, _densityGrid.DensityGrid_Params_ymin_set)
    zmin = _swig_property(_densityGrid.DensityGrid_Params_zmin_get, _densityGrid.DensityGrid_Params_zmin_set)
    xmax = _swig_property(_densityGrid.DensityGrid_Params_xmax_get, _densityGrid.DensityGrid_Params_xmax_set)
    ymax = _swig_property(_densityGrid.DensityGrid_Params_ymax_get, _densityGrid.DensityGrid_Params_ymax_set)
    zmax = _swig_property(_densityGrid.DensityGrid_Params_zmax_get, _densityGrid.DensityGrid_Params_zmax_set)
    cushion = _swig_property(_densityGrid.DensityGrid_Params_cushion_get, _densityGrid.DensityGrid_Params_cushion_set)

    def __init__(self, *args, **kwargs):
        this = _densityGrid.new_DensityGrid_Params(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _densityGrid.delete_DensityGrid_Params
    __del__ = lambda self: None

class DensityGrid_ParamsPtr(DensityGrid_Params):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = DensityGrid_Params

DensityGrid_Params_swigregister = _densityGrid.DensityGrid_Params_swigregister
DensityGrid_Params_swigregister(DensityGrid_Params)

class DensityGrid(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _densityGrid.new_DensityGrid(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _densityGrid.delete_DensityGrid
    __del__ = lambda self: None

    def toPoint(self, *args, **kwargs):
        return _densityGrid.DensityGrid_toPoint(self, *args, **kwargs)

    def toGrid(self, *args, **kwargs):
        return _densityGrid.DensityGrid_toGrid(self, *args, **kwargs)

    def toGridX(self, *args, **kwargs):
        return _densityGrid.DensityGrid_toGridX(self, *args, **kwargs)

    def toGridY(self, *args, **kwargs):
        return _densityGrid.DensityGrid_toGridY(self, *args, **kwargs)

    def toGridZ(self, *args, **kwargs):
        return _densityGrid.DensityGrid_toGridZ(self, *args, **kwargs)

    def __call__(self, *args):
        return _densityGrid.DensityGrid___call__(self, *args)

    def __iadd__(self, *args, **kwargs):
        return _densityGrid.DensityGrid___iadd__(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _densityGrid.DensityGrid_scale(self, *args, **kwargs)

    def maxVal(self, *args, **kwargs):
        return _densityGrid.DensityGrid_maxVal(self, *args, **kwargs)

    def maxPos(self, *args, **kwargs):
        return _densityGrid.DensityGrid_maxPos(self, *args, **kwargs)

    def get(self, *args, **kwargs):
        return _densityGrid.DensityGrid_get(self, *args, **kwargs)

    def setData(self, *args):
        return _densityGrid.DensityGrid_setData(self, *args)

    def readCCP4(self, *args, **kwargs):
        return _densityGrid.DensityGrid_readCCP4(self, *args, **kwargs)

    def writeCCP4(self, *args, **kwargs):
        return _densityGrid.DensityGrid_writeCCP4(self, *args, **kwargs)

    def writeEDM(self, *args, **kwargs):
        return _densityGrid.DensityGrid_writeEDM(self, *args, **kwargs)

    def WriteData(self, *args, **kwargs):
        return _densityGrid.DensityGrid_WriteData(self, *args, **kwargs)

    def GridTest(self, *args, **kwargs):
        return _densityGrid.DensityGrid_GridTest(self, *args, **kwargs)

    def centroid(self, *args, **kwargs):
        return _densityGrid.DensityGrid_centroid(self, *args, **kwargs)

    def gridInfo(self, *args, **kwargs):
        return _densityGrid.DensityGrid_gridInfo(self, *args, **kwargs)

    def rotMat(self, *args, **kwargs):
        return _densityGrid.DensityGrid_rotMat(self, *args, **kwargs)

    def setRotMat(self, *args, **kwargs):
        return _densityGrid.DensityGrid_setRotMat(self, *args, **kwargs)

    def rotMatT(self, *args, **kwargs):
        return _densityGrid.DensityGrid_rotMatT(self, *args, **kwargs)

    def setRotMatT(self, *args, **kwargs):
        return _densityGrid.DensityGrid_setRotMatT(self, *args, **kwargs)

    def transVec(self, *args, **kwargs):
        return _densityGrid.DensityGrid_transVec(self, *args, **kwargs)

    def setTransVec(self, *args, **kwargs):
        return _densityGrid.DensityGrid_setTransVec(self, *args, **kwargs)

    def origin(self, *args, **kwargs):
        return _densityGrid.DensityGrid_origin(self, *args, **kwargs)

    def setOrigin(self, *args, **kwargs):
        return _densityGrid.DensityGrid_setOrigin(self, *args, **kwargs)

    def noOffset(self, *args, **kwargs):
        return _densityGrid.DensityGrid_noOffset(self, *args, **kwargs)

    def setNoOffset(self, *args, **kwargs):
        return _densityGrid.DensityGrid_setNoOffset(self, *args, **kwargs)
    xdelta = _swig_property(_densityGrid.DensityGrid_xdelta_get, _densityGrid.DensityGrid_xdelta_set)
    ydelta = _swig_property(_densityGrid.DensityGrid_ydelta_get, _densityGrid.DensityGrid_ydelta_set)
    zdelta = _swig_property(_densityGrid.DensityGrid_zdelta_get, _densityGrid.DensityGrid_zdelta_set)
    xnum = _swig_property(_densityGrid.DensityGrid_xnum_get, _densityGrid.DensityGrid_xnum_set)
    ynum = _swig_property(_densityGrid.DensityGrid_ynum_get, _densityGrid.DensityGrid_ynum_set)
    znum = _swig_property(_densityGrid.DensityGrid_znum_get, _densityGrid.DensityGrid_znum_set)
    xmin = _swig_property(_densityGrid.DensityGrid_xmin_get, _densityGrid.DensityGrid_xmin_set)
    ymin = _swig_property(_densityGrid.DensityGrid_ymin_get, _densityGrid.DensityGrid_ymin_set)
    zmin = _swig_property(_densityGrid.DensityGrid_zmin_get, _densityGrid.DensityGrid_zmin_set)
    data = _swig_property(_densityGrid.DensityGrid_data_get, _densityGrid.DensityGrid_data_set)

    def zero(self, *args, **kwargs):
        return _densityGrid.DensityGrid_zero(self, *args, **kwargs)

    def getData(self, *args, **kwargs):
        return _densityGrid.DensityGrid_getData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _densityGrid.DensityGrid_help(self, *args, **kwargs)

class DensityGridPtr(DensityGrid):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = DensityGrid

DensityGrid_swigregister = _densityGrid.DensityGrid_swigregister
DensityGrid_swigregister(DensityGrid)


pyXplorHelp = help


def help(*args):
    return _densityGrid.help(*args)
help = _densityGrid.help


