# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_atomProb')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_atomProb')
    _atomProb = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_atomProb', [dirname(__file__)])
        except ImportError:
            import _atomProb
            return _atomProb
        try:
            _mod = imp.load_module('_atomProb', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _atomProb = swig_import_helper()
    del swig_import_helper
else:
    import _atomProb
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class AtomProb(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    QUARTIC = _atomProb.AtomProb_QUARTIC
    GAUSSIAN = _atomProb.AtomProb_GAUSSIAN
    AMPLITUDE = _atomProb.AtomProb_AMPLITUDE
    DISTRIBUTION = _atomProb.AtomProb_DISTRIBUTION
    NORMALIZE = _atomProb.AtomProb_NORMALIZE
    FLAT = _atomProb.AtomProb_FLAT
    OFF = _atomProb.AtomProb_OFF
    VOLUME = _atomProb.AtomProb_VOLUME

    def updateValues(self, *args, **kwargs):
        return _atomProb.AtomProb_updateValues(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _atomProb.new_AtomProb(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _atomProb.delete_AtomProb
    __del__ = lambda self: None

    def weights(self, *args, **kwargs):
        return _atomProb.AtomProb_weights(self, *args, **kwargs)

    def setWeights(self, *args, **kwargs):
        return _atomProb.AtomProb_setWeights(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _atomProb.AtomProb_selection(self, *args, **kwargs)

    def calc(self, *args, **kwargs):
        return _atomProb.AtomProb_calc(self, *args, **kwargs)

    def getGrid(self, *args, **kwargs):
        return _atomProb.AtomProb_getGrid(self, *args, **kwargs)

    def writeEDM(self, *args, **kwargs):
        return _atomProb.AtomProb_writeEDM(self, *args, **kwargs)

    def val(self, *args, **kwargs):
        return _atomProb.AtomProb_val(self, *args, **kwargs)
    gridVals = _swig_property(_atomProb.AtomProb_gridVals_get, _atomProb.AtomProb_gridVals_set)

    def radii(self, *args, **kwargs):
        return _atomProb.AtomProb_radii(self, *args, **kwargs)

    def setRadii(self, *args, **kwargs):
        return _atomProb.AtomProb_setRadii(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _atomProb.AtomProb_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _atomProb.AtomProb_setVerbose(self, *args, **kwargs)

    def generateGrid(self, *args, **kwargs):
        return _atomProb.AtomProb_generateGrid(self, *args, **kwargs)

    def setGenerateGrid(self, *args, **kwargs):
        return _atomProb.AtomProb_setGenerateGrid(self, *args, **kwargs)

    def setAtomRadius(self, *args, **kwargs):
        return _atomProb.AtomProb_setAtomRadius(self, *args, **kwargs)

    def distType(self, *args, **kwargs):
        return _atomProb.AtomProb_distType(self, *args, **kwargs)

    def setDistType(self, *args, **kwargs):
        return _atomProb.AtomProb_setDistType(self, *args, **kwargs)

    def scaleType(self, *args, **kwargs):
        return _atomProb.AtomProb_scaleType(self, *args, **kwargs)

    def setScaleType(self, *args, **kwargs):
        return _atomProb.AtomProb_setScaleType(self, *args, **kwargs)

    def copyGrid(self, *args, **kwargs):
        return _atomProb.AtomProb_copyGrid(self, *args, **kwargs)

    def calcGradient(self, *args, **kwargs):
        return _atomProb.AtomProb_calcGradient(self, *args, **kwargs)

    def radiusGradient(self, *args, **kwargs):
        return _atomProb.AtomProb_radiusGradient(self, *args, **kwargs)

    def modified(self, *args, **kwargs):
        return _atomProb.AtomProb_modified(self, *args, **kwargs)

    def atomRadius(self, *args, **kwargs):
        return _atomProb.AtomProb_atomRadius(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _atomProb.AtomProb_help(self, *args, **kwargs)

class AtomProbPtr(AtomProb):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = AtomProb

AtomProb_swigregister = _atomProb.AtomProb_swigregister
AtomProb_swigregister(AtomProb)


import densityGrid

#backwards compatibility
Grid = densityGrid.DensityGrid


pyXplorHelp = help


def help(*args):
    return _atomProb.help(*args)
help = _atomProb.help


