# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pdbTool')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pdbTool')
    _pdbTool = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pdbTool', [dirname(__file__)])
        except ImportError:
            import _pdbTool
            return _pdbTool
        try:
            _mod = imp.load_module('_pdbTool', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pdbTool = swig_import_helper()
    del swig_import_helper
else:
    import _pdbTool
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class CDSList_char(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _pdbTool.CDSList_char___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _pdbTool.new_CDSList_char(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _pdbTool.CDSList_char___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _pdbTool.CDSList_char___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _pdbTool.CDSList_char_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _pdbTool.CDSList_char_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _pdbTool.CDSList_char_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _pdbTool.CDSList_char___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _pdbTool.CDSList_char___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pdbTool.CDSList_char_help(self, *args, **kwargs)
    __swig_destroy__ = _pdbTool.delete_CDSList_char
    __del__ = lambda self: None

class CDSList_charPtr(CDSList_char):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_char

CDSList_char_swigregister = _pdbTool.CDSList_char_swigregister
CDSList_char_swigregister(CDSList_char)


import cdsVector

class CDSList_AltLocRecord(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _pdbTool.CDSList_AltLocRecord___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _pdbTool.new_CDSList_AltLocRecord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _pdbTool.CDSList_AltLocRecord___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _pdbTool.CDSList_AltLocRecord___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _pdbTool.CDSList_AltLocRecord_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _pdbTool.CDSList_AltLocRecord_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _pdbTool.CDSList_AltLocRecord_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _pdbTool.CDSList_AltLocRecord___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _pdbTool.CDSList_AltLocRecord___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pdbTool.CDSList_AltLocRecord_help(self, *args, **kwargs)
    __swig_destroy__ = _pdbTool.delete_CDSList_AltLocRecord
    __del__ = lambda self: None

class CDSList_AltLocRecordPtr(CDSList_AltLocRecord):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_AltLocRecord

CDSList_AltLocRecord_swigregister = _pdbTool.CDSList_AltLocRecord_swigregister
CDSList_AltLocRecord_swigregister(CDSList_AltLocRecord)

class AltLocRecord(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pos = _swig_property(_pdbTool.AltLocRecord_pos_get, _pdbTool.AltLocRecord_pos_set)
    occupancy = _swig_property(_pdbTool.AltLocRecord_occupancy_get, _pdbTool.AltLocRecord_occupancy_set)
    bfactor = _swig_property(_pdbTool.AltLocRecord_bfactor_get, _pdbTool.AltLocRecord_bfactor_set)

    def __init__(self, *args):
        this = _pdbTool.new_AltLocRecord(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pdbTool.delete_AltLocRecord
    __del__ = lambda self: None

class AltLocRecordPtr(AltLocRecord):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = AltLocRecord

AltLocRecord_swigregister = _pdbTool.AltLocRecord_swigregister
AltLocRecord_swigregister(AltLocRecord)

class PDBTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pdbTool.new_PDBTool(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def selection(self, *args, **kwargs):
        return _pdbTool.PDBTool_selection(self, *args, **kwargs)

    def setSelection(self, *args, **kwargs):
        return _pdbTool.PDBTool_setSelection(self, *args, **kwargs)

    def hetatmSel(self, *args, **kwargs):
        return _pdbTool.PDBTool_hetatmSel(self, *args, **kwargs)

    def setHetatmSel(self, *args, **kwargs):
        return _pdbTool.PDBTool_setHetatmSel(self, *args, **kwargs)

    def filename(self, *args, **kwargs):
        return _pdbTool.PDBTool_filename(self, *args, **kwargs)

    def setFilename(self, *args, **kwargs):
        return _pdbTool.PDBTool_setFilename(self, *args, **kwargs)

    def makeBackup(self, *args, **kwargs):
        return _pdbTool.PDBTool_makeBackup(self, *args, **kwargs)

    def setMakeBackup(self, *args, **kwargs):
        return _pdbTool.PDBTool_setMakeBackup(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _pdbTool.PDBTool_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _pdbTool.PDBTool_setVerbose(self, *args, **kwargs)

    def useChainID(self, *args, **kwargs):
        return _pdbTool.PDBTool_useChainID(self, *args, **kwargs)

    def setUseChainID(self, *args, **kwargs):
        return _pdbTool.PDBTool_setUseChainID(self, *args, **kwargs)

    def strictResNames(self, *args, **kwargs):
        return _pdbTool.PDBTool_strictResNames(self, *args, **kwargs)

    def setStrictResNames(self, *args, **kwargs):
        return _pdbTool.PDBTool_setStrictResNames(self, *args, **kwargs)

    def writeChainID(self, *args, **kwargs):
        return _pdbTool.PDBTool_writeChainID(self, *args, **kwargs)

    def setWriteChainID(self, *args, **kwargs):
        return _pdbTool.PDBTool_setWriteChainID(self, *args, **kwargs)

    def includeHETATM(self, *args, **kwargs):
        return _pdbTool.PDBTool_includeHETATM(self, *args, **kwargs)

    def setIncludeHETATM(self, *args, **kwargs):
        return _pdbTool.PDBTool_setIncludeHETATM(self, *args, **kwargs)

    def allowedAltLoc(self, *args, **kwargs):
        return _pdbTool.PDBTool_allowedAltLoc(self, *args, **kwargs)

    def setAllowedAltLoc(self, *args, **kwargs):
        return _pdbTool.PDBTool_setAllowedAltLoc(self, *args, **kwargs)

    def remarksCatName(self, *args, **kwargs):
        return _pdbTool.PDBTool_remarksCatName(self, *args, **kwargs)

    def setRemarksCatName(self, *args, **kwargs):
        return _pdbTool.PDBTool_setRemarksCatName(self, *args, **kwargs)

    def contents(self, *args, **kwargs):
        return _pdbTool.PDBTool_contents(self, *args, **kwargs)

    def setContents(self, *args, **kwargs):
        return _pdbTool.PDBTool_setContents(self, *args, **kwargs)

    def addRemark(self, *args, **kwargs):
        return _pdbTool.PDBTool_addRemark(self, *args, **kwargs)

    def clearRemarks(self, *args, **kwargs):
        return _pdbTool.PDBTool_clearRemarks(self, *args, **kwargs)

    def remarks(self, *args, **kwargs):
        return _pdbTool.PDBTool_remarks(self, *args, **kwargs)

    def readRemarks(self, *args, **kwargs):
        return _pdbTool.PDBTool_readRemarks(self, *args, **kwargs)

    def useXplorNames(self, *args, **kwargs):
        return _pdbTool.PDBTool_useXplorNames(self, *args, **kwargs)

    def useIupacNames(self, *args, **kwargs):
        return _pdbTool.PDBTool_useIupacNames(self, *args, **kwargs)

    def read(self, *args, **kwargs):
        return _pdbTool.PDBTool_read(self, *args, **kwargs)

    def readPDB(self, *args, **kwargs):
        return _pdbTool.PDBTool_readPDB(self, *args, **kwargs)

    def readCIF(self, *args, **kwargs):
        return _pdbTool.PDBTool_readCIF(self, *args, **kwargs)

    def writeInitialize(self, *args, **kwargs):
        return _pdbTool.PDBTool_writeInitialize(self, *args, **kwargs)

    def writeClose(self, *args, **kwargs):
        return _pdbTool.PDBTool_writeClose(self, *args, **kwargs)

    def write(self, *args, **kwargs):
        return _pdbTool.PDBTool_write(self, *args, **kwargs)

    def writeAtoms(self, *args, **kwargs):
        return _pdbTool.PDBTool_writeAtoms(self, *args, **kwargs)

    def writeOneAtom(self, *args, **kwargs):
        return _pdbTool.PDBTool_writeOneAtom(self, *args, **kwargs)

    def aux1(self, *args, **kwargs):
        return _pdbTool.PDBTool_aux1(self, *args, **kwargs)

    def aux2(self, *args, **kwargs):
        return _pdbTool.PDBTool_aux2(self, *args, **kwargs)

    def setAux1(self, *args, **kwargs):
        return _pdbTool.PDBTool_setAux1(self, *args, **kwargs)

    def setAux2(self, *args, **kwargs):
        return _pdbTool.PDBTool_setAux2(self, *args, **kwargs)

    def occupancy(self, *args, **kwargs):
        return _pdbTool.PDBTool_occupancy(self, *args, **kwargs)

    def bfactor(self, *args, **kwargs):
        return _pdbTool.PDBTool_bfactor(self, *args, **kwargs)

    def occupancies(self, *args, **kwargs):
        return _pdbTool.PDBTool_occupancies(self, *args, **kwargs)

    def bfactors(self, *args, **kwargs):
        return _pdbTool.PDBTool_bfactors(self, *args, **kwargs)

    def readAtoms(self, *args, **kwargs):
        return _pdbTool.PDBTool_readAtoms(self, *args, **kwargs)

    def numModels(self, *args, **kwargs):
        return _pdbTool.PDBTool_numModels(self, *args, **kwargs)

    def models(self, *args, **kwargs):
        return _pdbTool.PDBTool_models(self, *args, **kwargs)
    UNKNOWN = _pdbTool.PDBTool_UNKNOWN
    PDB = _pdbTool.PDBTool_PDB
    CIF = _pdbTool.PDBTool_CIF

    def format(self, *args, **kwargs):
        return _pdbTool.PDBTool_format(self, *args, **kwargs)

    def determineFormat(self, *args, **kwargs):
        return _pdbTool.PDBTool_determineFormat(self, *args, **kwargs)

    def addRemarks(self,remarks):
        """add multiline string or list of strings as multiple remarks.
        """
        if type(remarks)==type( ""):
            for line in remarks.splitlines(): self.addRemark( line )
        else:
            for remark in remarks: self.addRemark( remark )
            pass
        return


    def help(self, *args, **kwargs):
        return _pdbTool.PDBTool_help(self, *args, **kwargs)
    __swig_destroy__ = _pdbTool.delete_PDBTool
    __del__ = lambda self: None

class PDBToolPtr(PDBTool):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PDBTool

PDBTool_swigregister = _pdbTool.PDBTool_swigregister
PDBTool_swigregister(PDBTool)


pyXplorHelp = help


def help(*args):
    return _pdbTool.help(*args)
help = _pdbTool.help


