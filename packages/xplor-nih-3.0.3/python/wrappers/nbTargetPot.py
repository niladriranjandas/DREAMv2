# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_nbTargetPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_nbTargetPot')
    _nbTargetPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nbTargetPot', [dirname(__file__)])
        except ImportError:
            import _nbTargetPot
            return _nbTargetPot
        try:
            _mod = imp.load_module('_nbTargetPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _nbTargetPot = swig_import_helper()
    del swig_import_helper
else:
    import _nbTargetPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _nbTargetPot.Modified_MOD_SELF
    MOD_SIMULATION = _nbTargetPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _nbTargetPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _nbTargetPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _nbTargetPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _nbTargetPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _nbTargetPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _nbTargetPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _nbTargetPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _nbTargetPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_nbTargetPot.ModifiedBase_modified_get, _nbTargetPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_nbTargetPot.ModifiedBase_registeredSimulations_get, _nbTargetPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _nbTargetPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _nbTargetPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _nbTargetPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _nbTargetPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _nbTargetPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_nbTargetPot.VarEnsWeights_ensWeights_get, _nbTargetPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_nbTargetPot.VarEnsWeights_mult_get, _nbTargetPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _nbTargetPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nbTargetPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _nbTargetPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _nbTargetPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _nbTargetPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _nbTargetPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _nbTargetPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _nbTargetPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nbTargetPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _nbTargetPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class NBTargetPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _nbTargetPot.new_NBTargetPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _nbTargetPot.delete_NBTargetPot
    __del__ = lambda self: None
    restraints_ = _swig_property(_nbTargetPot.NBTargetPot_restraints__get, _nbTargetPot.NBTargetPot_restraints__set)
    ave_calcd = _swig_property(_nbTargetPot.NBTargetPot_ave_calcd_get, _nbTargetPot.NBTargetPot_ave_calcd_set)
    ave_obs = _swig_property(_nbTargetPot.NBTargetPot_ave_obs_get, _nbTargetPot.NBTargetPot_ave_obs_set)
    num = _swig_property(_nbTargetPot.NBTargetPot_num_get, _nbTargetPot.NBTargetPot_num_set)
    denom = _swig_property(_nbTargetPot.NBTargetPot_denom_get, _nbTargetPot.NBTargetPot_denom_set)
    sumObs2 = _swig_property(_nbTargetPot.NBTargetPot_sumObs2_get, _nbTargetPot.NBTargetPot_sumObs2_set)
    corr = _swig_property(_nbTargetPot.NBTargetPot_corr_get, _nbTargetPot.NBTargetPot_corr_set)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_energyMaybeDerivs1(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_addRestraints(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_rms(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_deviation(self, *args, **kwargs)

    def correlation(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_correlation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_numRestraints(self, *args, **kwargs)

    def updateNeighborList(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_updateNeighborList(self, *args, **kwargs)
    neighbors = _swig_property(_nbTargetPot.NBTargetPot_neighbors_get, _nbTargetPot.NBTargetPot_neighbors_set)

    def selection(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_selection(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_restraints(self, *args, **kwargs)

    def slope(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_slope(self, *args, **kwargs)

    def setSlope(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setSlope(self, *args, **kwargs)

    def intercept(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_intercept(self, *args, **kwargs)

    def setIntercept(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setIntercept(self, *args, **kwargs)

    def moveTol(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_moveTol(self, *args, **kwargs)

    def setMoveTol(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setMoveTol(self, *args, **kwargs)

    def cutoffDist(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_cutoffDist(self, *args, **kwargs)

    def setCutoffDist(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setCutoffDist(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setAveType(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setPotType(self, *args, **kwargs)

    def excludeSameResid(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_excludeSameResid(self, *args, **kwargs)

    def setExcludeSameResid(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setExcludeSameResid(self, *args, **kwargs)

    def aveExp(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_aveExp(self, *args, **kwargs)

    def setAveExp(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setAveExp(self, *args, **kwargs)

    def invPow(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_invPow(self, *args, **kwargs)

    def setInvPow(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setInvPow(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setShowAllRestraints(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setVerbose(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _nbTargetPot.NBTargetPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_nbTargetPot.NBTargetPot_instanceData__get, _nbTargetPot.NBTargetPot_instanceData__set)
    instanceDataCreate = _swig_property(_nbTargetPot.NBTargetPot_instanceDataCreate_get, _nbTargetPot.NBTargetPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_nbTargetPot.NBTargetPot_instanceDataCleanup_get, _nbTargetPot.NBTargetPot_instanceDataCleanup_set)
    modified = _swig_property(_nbTargetPot.NBTargetPot_modified_get, _nbTargetPot.NBTargetPot_modified_set)
    registeredSimulations = _swig_property(_nbTargetPot.NBTargetPot_registeredSimulations_get, _nbTargetPot.NBTargetPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_unRegister(self, *args, **kwargs)

class NBTargetPotPtr(NBTargetPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = NBTargetPot

NBTargetPot_swigregister = _nbTargetPot.NBTargetPot_swigregister
NBTargetPot_swigregister(NBTargetPot)


realNBTargetPot = NBTargetPot
def NBTargetPot(*args):
    from potProxy import PotProxy
    return PotProxy( realNBTargetPot(*args) )

class Restraint_NBTarget(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _nbTargetPot.Restraint_NBTarget_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _nbTargetPot.new_Restraint_NBTarget(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _nbTargetPot.Restraint_NBTarget_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _nbTargetPot.Restraint_NBTarget_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _nbTargetPot.Restraint_NBTarget_setName(self, *args, **kwargs)
    __swig_destroy__ = _nbTargetPot.delete_Restraint_NBTarget
    __del__ = lambda self: None

class Restraint_NBTargetPtr(Restraint_NBTarget):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_NBTarget

Restraint_NBTarget_swigregister = _nbTargetPot.Restraint_NBTarget_swigregister
Restraint_NBTarget_swigregister(Restraint_NBTarget)

class NBTargetPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CENTER = _nbTargetPot.NBTargetPot_LetterClass_CENTER
    SUM = _nbTargetPot.NBTargetPot_LetterClass_SUM
    RMSD = _nbTargetPot.NBTargetPot_LetterClass_RMSD
    CORRELATION = _nbTargetPot.NBTargetPot_LetterClass_CORRELATION
    restraints_ = _swig_property(_nbTargetPot.NBTargetPot_LetterClass_restraints__get, _nbTargetPot.NBTargetPot_LetterClass_restraints__set)
    ave_calcd = _swig_property(_nbTargetPot.NBTargetPot_LetterClass_ave_calcd_get, _nbTargetPot.NBTargetPot_LetterClass_ave_calcd_set)
    ave_obs = _swig_property(_nbTargetPot.NBTargetPot_LetterClass_ave_obs_get, _nbTargetPot.NBTargetPot_LetterClass_ave_obs_set)
    num = _swig_property(_nbTargetPot.NBTargetPot_LetterClass_num_get, _nbTargetPot.NBTargetPot_LetterClass_num_set)
    denom = _swig_property(_nbTargetPot.NBTargetPot_LetterClass_denom_get, _nbTargetPot.NBTargetPot_LetterClass_denom_set)
    sumObs2 = _swig_property(_nbTargetPot.NBTargetPot_LetterClass_sumObs2_get, _nbTargetPot.NBTargetPot_LetterClass_sumObs2_set)
    corr = _swig_property(_nbTargetPot.NBTargetPot_LetterClass_corr_get, _nbTargetPot.NBTargetPot_LetterClass_corr_set)

    def __init__(self, *args, **kwargs):
        this = _nbTargetPot.new_NBTargetPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nbTargetPot.delete_NBTargetPot_LetterClass
    __del__ = lambda self: None

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_addRestraints(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_rms(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_deviation(self, *args, **kwargs)

    def correlation(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_correlation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_numRestraints(self, *args, **kwargs)

    def updateNeighborList(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_updateNeighborList(self, *args, **kwargs)
    neighbors = _swig_property(_nbTargetPot.NBTargetPot_LetterClass_neighbors_get, _nbTargetPot.NBTargetPot_LetterClass_neighbors_set)

    def selection(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_selection(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_restraints(self, *args, **kwargs)

    def slope(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_slope(self, *args, **kwargs)

    def setSlope(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setSlope(self, *args, **kwargs)

    def intercept(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_intercept(self, *args, **kwargs)

    def setIntercept(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setIntercept(self, *args, **kwargs)

    def moveTol(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_moveTol(self, *args, **kwargs)

    def setMoveTol(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setMoveTol(self, *args, **kwargs)

    def cutoffDist(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_cutoffDist(self, *args, **kwargs)

    def setCutoffDist(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setCutoffDist(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setAveType(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setPotType(self, *args, **kwargs)

    def excludeSameResid(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_excludeSameResid(self, *args, **kwargs)

    def setExcludeSameResid(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setExcludeSameResid(self, *args, **kwargs)

    def aveExp(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_aveExp(self, *args, **kwargs)

    def setAveExp(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setAveExp(self, *args, **kwargs)

    def invPow(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_invPow(self, *args, **kwargs)

    def setInvPow(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setInvPow(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_setVerbose(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _nbTargetPot.NBTargetPot_LetterClass_help(self, *args, **kwargs)

class NBTargetPot_LetterClassPtr(NBTargetPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = NBTargetPot_LetterClass

NBTargetPot_LetterClass_swigregister = _nbTargetPot.NBTargetPot_LetterClass_swigregister
NBTargetPot_LetterClass_swigregister(NBTargetPot_LetterClass)

class NBTarget_Restraint(Restraint_NBTarget):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    targetSel = _swig_property(_nbTargetPot.NBTarget_Restraint_targetSel_get, _nbTargetPot.NBTarget_Restraint_targetSel_set)
    neighbors = _swig_property(_nbTargetPot.NBTarget_Restraint_neighbors_get, _nbTargetPot.NBTarget_Restraint_neighbors_set)
    targetVal = _swig_property(_nbTargetPot.NBTarget_Restraint_targetVal_get, _nbTargetPot.NBTarget_Restraint_targetVal_set)
    targetErr = _swig_property(_nbTargetPot.NBTarget_Restraint_targetErr_get, _nbTargetPot.NBTarget_Restraint_targetErr_set)
    calcdVal = _swig_property(_nbTargetPot.NBTarget_Restraint_calcdVal_get, _nbTargetPot.NBTarget_Restraint_calcdVal_set)
    variance = _swig_property(_nbTargetPot.NBTarget_Restraint_variance_get, _nbTargetPot.NBTarget_Restraint_variance_set)
    contrib = _swig_property(_nbTargetPot.NBTarget_Restraint_contrib_get, _nbTargetPot.NBTarget_Restraint_contrib_set)

    def __init__(self, *args, **kwargs):
        this = _nbTargetPot.new_NBTarget_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def updateNeighborList(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_updateNeighborList(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_calcContrib(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_deriv(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_deviation(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_name(self, *args, **kwargs)

    def sel(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_sel(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_obs(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_err(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _nbTargetPot.NBTarget_Restraint_calcd(self, *args, **kwargs)
    __swig_destroy__ = _nbTargetPot.delete_NBTarget_Restraint
    __del__ = lambda self: None

class NBTarget_RestraintPtr(NBTarget_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = NBTarget_Restraint

NBTarget_Restraint_swigregister = _nbTargetPot.NBTarget_Restraint_swigregister
NBTarget_Restraint_swigregister(NBTarget_Restraint)

class rc_ptr_NBTarget_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _nbTargetPot.new_rc_ptr_NBTarget_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _nbTargetPot.delete_rc_ptr_NBTarget_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_release(self, *args, **kwargs)
    targetSel = _swig_property(_nbTargetPot.rc_ptr_NBTarget_Restraint_targetSel_get, _nbTargetPot.rc_ptr_NBTarget_Restraint_targetSel_set)
    neighbors = _swig_property(_nbTargetPot.rc_ptr_NBTarget_Restraint_neighbors_get, _nbTargetPot.rc_ptr_NBTarget_Restraint_neighbors_set)
    targetVal = _swig_property(_nbTargetPot.rc_ptr_NBTarget_Restraint_targetVal_get, _nbTargetPot.rc_ptr_NBTarget_Restraint_targetVal_set)
    targetErr = _swig_property(_nbTargetPot.rc_ptr_NBTarget_Restraint_targetErr_get, _nbTargetPot.rc_ptr_NBTarget_Restraint_targetErr_set)
    calcdVal = _swig_property(_nbTargetPot.rc_ptr_NBTarget_Restraint_calcdVal_get, _nbTargetPot.rc_ptr_NBTarget_Restraint_calcdVal_set)
    variance = _swig_property(_nbTargetPot.rc_ptr_NBTarget_Restraint_variance_get, _nbTargetPot.rc_ptr_NBTarget_Restraint_variance_set)
    contrib = _swig_property(_nbTargetPot.rc_ptr_NBTarget_Restraint_contrib_get, _nbTargetPot.rc_ptr_NBTarget_Restraint_contrib_set)

    def updateNeighborList(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_updateNeighborList(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_calcContrib(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_deriv(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_deviation(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_name(self, *args, **kwargs)

    def sel(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_sel(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_obs(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_err(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_calcd(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_violated(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _nbTargetPot.rc_ptr_NBTarget_Restraint_setName(self, *args, **kwargs)

class rc_ptr_NBTarget_RestraintPtr(rc_ptr_NBTarget_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_NBTarget_Restraint

rc_ptr_NBTarget_Restraint_swigregister = _nbTargetPot.rc_ptr_NBTarget_Restraint_swigregister
rc_ptr_NBTarget_Restraint_swigregister(rc_ptr_NBTarget_Restraint)

class CDSList_NBTarget_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _nbTargetPot.CDSList_NBTarget_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _nbTargetPot.new_CDSList_NBTarget_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _nbTargetPot.CDSList_NBTarget_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _nbTargetPot.CDSList_NBTarget_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _nbTargetPot.CDSList_NBTarget_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _nbTargetPot.CDSList_NBTarget_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _nbTargetPot.CDSList_NBTarget_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _nbTargetPot.CDSList_NBTarget_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _nbTargetPot.CDSList_NBTarget_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _nbTargetPot.CDSList_NBTarget_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _nbTargetPot.delete_CDSList_NBTarget_Restraint
    __del__ = lambda self: None

class CDSList_NBTarget_RestraintPtr(CDSList_NBTarget_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_NBTarget_Restraint

CDSList_NBTarget_Restraint_swigregister = _nbTargetPot.CDSList_NBTarget_Restraint_swigregister
CDSList_NBTarget_Restraint_swigregister(CDSList_NBTarget_Restraint)


pyXplorHelp = help


def help(*args):
    return _nbTargetPot.help(*args)
help = _nbTargetPot.help


