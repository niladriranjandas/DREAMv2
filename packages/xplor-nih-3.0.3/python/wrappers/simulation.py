# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_simulation')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_simulation')
    _simulation = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simulation', [dirname(__file__)])
        except ImportError:
            import _simulation
            return _simulation
        try:
            _mod = imp.load_module('_simulation', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _simulation = swig_import_helper()
    del swig_import_helper
else:
    import _simulation
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Simulation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simulation.delete_Simulation
    __del__ = lambda self: None

    def rawID(self, *args, **kwargs):
        return _simulation.Simulation_rawID(self, *args, **kwargs)

    def lookupID(self, *args, **kwargs):
        return _simulation.Simulation_lookupID(self, *args, **kwargs)

    def atomID(self, *args, **kwargs):
        return _simulation.Simulation_atomID(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _simulation.Simulation_name(self, *args, **kwargs)

    def type(self, *args, **kwargs):
        return _simulation.Simulation_type(self, *args, **kwargs)

    def numAtoms(self, *args, **kwargs):
        return _simulation.Simulation_numAtoms(self, *args, **kwargs)

    def numBonds(self, *args, **kwargs):
        return _simulation.Simulation_numBonds(self, *args, **kwargs)

    def bondPairByID(self, *args, **kwargs):
        return _simulation.Simulation_bondPairByID(self, *args, **kwargs)

    def atomByID(self, *args, **kwargs):
        return _simulation.Simulation_atomByID(self, *args, **kwargs)

    def atomString(self, *args, **kwargs):
        return _simulation.Simulation_atomString(self, *args, **kwargs)

    def deleteAtoms_byIndex(self, *args, **kwargs):
        return _simulation.Simulation_deleteAtoms_byIndex(self, *args, **kwargs)

    def registerCallbacks(self, *args, **kwargs):
        return _simulation.Simulation_registerCallbacks(self, *args, **kwargs)

    def atomPosArr(self, *args, **kwargs):
        return _simulation.Simulation_atomPosArr(self, *args, **kwargs)

    def atomVelArr(self, *args, **kwargs):
        return _simulation.Simulation_atomVelArr(self, *args, **kwargs)

    def atomMassArr(self, *args, **kwargs):
        return _simulation.Simulation_atomMassArr(self, *args, **kwargs)

    def atomNameArr(self, *args, **kwargs):
        return _simulation.Simulation_atomNameArr(self, *args, **kwargs)

    def residueNameArr(self, *args, **kwargs):
        return _simulation.Simulation_residueNameArr(self, *args, **kwargs)

    def segmentNameArr(self, *args, **kwargs):
        return _simulation.Simulation_segmentNameArr(self, *args, **kwargs)

    def chemTypeArr(self, *args, **kwargs):
        return _simulation.Simulation_chemTypeArr(self, *args, **kwargs)

    def residueNumArr(self, *args, **kwargs):
        return _simulation.Simulation_residueNumArr(self, *args, **kwargs)

    def setAtomPosArr(self, *args, **kwargs):
        return _simulation.Simulation_setAtomPosArr(self, *args, **kwargs)

    def setAtomVelArr(self, *args, **kwargs):
        return _simulation.Simulation_setAtomVelArr(self, *args, **kwargs)

    def setAtomMassArr(self, *args, **kwargs):
        return _simulation.Simulation_setAtomMassArr(self, *args, **kwargs)

    def setAtomPos(self, *args, **kwargs):
        return _simulation.Simulation_setAtomPos(self, *args, **kwargs)

    def setAtomVel(self, *args, **kwargs):
        return _simulation.Simulation_setAtomVel(self, *args, **kwargs)

    def setAtomMass(self, *args, **kwargs):
        return _simulation.Simulation_setAtomMass(self, *args, **kwargs)

    def setAtomFric(self, *args, **kwargs):
        return _simulation.Simulation_setAtomFric(self, *args, **kwargs)

    def setAtomCharge(self, *args, **kwargs):
        return _simulation.Simulation_setAtomCharge(self, *args, **kwargs)

    def setSegmentName(self, *args, **kwargs):
        return _simulation.Simulation_setSegmentName(self, *args, **kwargs)

    def setResidueName(self, *args, **kwargs):
        return _simulation.Simulation_setResidueName(self, *args, **kwargs)

    def setResidueNum(self, *args, **kwargs):
        return _simulation.Simulation_setResidueNum(self, *args, **kwargs)

    def setAtomName(self, *args, **kwargs):
        return _simulation.Simulation_setAtomName(self, *args, **kwargs)

    def setChemType(self, *args, **kwargs):
        return _simulation.Simulation_setChemType(self, *args, **kwargs)

    def atomPos(self, *args, **kwargs):
        return _simulation.Simulation_atomPos(self, *args, **kwargs)

    def atomVel(self, *args, **kwargs):
        return _simulation.Simulation_atomVel(self, *args, **kwargs)

    def atomMass(self, *args, **kwargs):
        return _simulation.Simulation_atomMass(self, *args, **kwargs)

    def atomFric(self, *args, **kwargs):
        return _simulation.Simulation_atomFric(self, *args, **kwargs)

    def atomCharge(self, *args, **kwargs):
        return _simulation.Simulation_atomCharge(self, *args, **kwargs)

    def segmentName(self, *args, **kwargs):
        return _simulation.Simulation_segmentName(self, *args, **kwargs)

    def residueName(self, *args, **kwargs):
        return _simulation.Simulation_residueName(self, *args, **kwargs)

    def residueNum(self, *args, **kwargs):
        return _simulation.Simulation_residueNum(self, *args, **kwargs)

    def atomName(self, *args, **kwargs):
        return _simulation.Simulation_atomName(self, *args, **kwargs)

    def chemType(self, *args, **kwargs):
        return _simulation.Simulation_chemType(self, *args, **kwargs)

    def addDependent(self, *args, **kwargs):
        return _simulation.Simulation_addDependent(self, *args, **kwargs)

    def removeDependent(self, *args, **kwargs):
        return _simulation.Simulation_removeDependent(self, *args, **kwargs)

    def markAsModified(self, *args, **kwargs):
        return _simulation.Simulation_markAsModified(self, *args, **kwargs)

    def modifiedID(self, *args, **kwargs):
        return _simulation.Simulation_modifiedID(self, *args, **kwargs)

    def numDependents(self, *args, **kwargs):
        return _simulation.Simulation_numDependents(self, *args, **kwargs)

    def forceUpdate(self, *args, **kwargs):
        return _simulation.Simulation_forceUpdate(self, *args, **kwargs)

    def setForceUpdate(self, *args, **kwargs):
        return _simulation.Simulation_setForceUpdate(self, *args, **kwargs)

    def select(self, *args, **kwargs):
        return _simulation.Simulation_select(self, *args, **kwargs)

    def kineticEnergy(self, *args, **kwargs):
        return _simulation.Simulation_kineticEnergy(self, *args, **kwargs)

    def sync(self, *args, **kwargs):
        return _simulation.Simulation_sync(self, *args, **kwargs)
    currentSimulation = staticmethod(_simulation.Simulation_currentSimulation)
    makeCurrent = staticmethod(_simulation.Simulation_makeCurrent)
    numSimulations = staticmethod(_simulation.Simulation_numSimulations)
    simulationByID = staticmethod(_simulation.Simulation_simulationByID)
    getReference = staticmethod(_simulation.Simulation_getReference)
    deleteSimulation = staticmethod(_simulation.Simulation_deleteSimulation)
    validSimulation = staticmethod(_simulation.Simulation_validSimulation)
    syncAllSimulations = staticmethod(_simulation.Simulation_syncAllSimulations)


    def __eq__(self,other):
        if type(self)!=type(other):
          return False
        return self.name()==other.name()
    def __ne__(self,other):
        return not self==other

    def deleteAtoms(self,arg,
                    noSync=False):
        from atomSel import AtomSel
        if str(type(arg)).find('AtomSel')>=0:
          self.deleteAtoms_byIndex( arg.indices(), noSync )
        else:
          self.deleteAtoms_byIndex( AtomSel(arg,self).indices(), noSync )
        pass


    def help(self, *args, **kwargs):
        return _simulation.Simulation_help(self, *args, **kwargs)

class SimulationPtr(Simulation):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Simulation

Simulation_swigregister = _simulation.Simulation_swigregister
Simulation_swigregister(Simulation)

def Simulation_currentSimulation(*args):
    return _simulation.Simulation_currentSimulation(*args)
Simulation_currentSimulation = _simulation.Simulation_currentSimulation

def Simulation_makeCurrent(*args, **kwargs):
    return _simulation.Simulation_makeCurrent(*args, **kwargs)
Simulation_makeCurrent = _simulation.Simulation_makeCurrent

def Simulation_numSimulations(*args):
    return _simulation.Simulation_numSimulations(*args)
Simulation_numSimulations = _simulation.Simulation_numSimulations

def Simulation_simulationByID(*args, **kwargs):
    return _simulation.Simulation_simulationByID(*args, **kwargs)
Simulation_simulationByID = _simulation.Simulation_simulationByID

def Simulation_getReference(*args, **kwargs):
    return _simulation.Simulation_getReference(*args, **kwargs)
Simulation_getReference = _simulation.Simulation_getReference

def Simulation_deleteSimulation(*args, **kwargs):
    return _simulation.Simulation_deleteSimulation(*args, **kwargs)
Simulation_deleteSimulation = _simulation.Simulation_deleteSimulation

def Simulation_validSimulation(*args, **kwargs):
    return _simulation.Simulation_validSimulation(*args, **kwargs)
Simulation_validSimulation = _simulation.Simulation_validSimulation

def Simulation_syncAllSimulations(*args):
    return _simulation.Simulation_syncAllSimulations(*args)
Simulation_syncAllSimulations = _simulation.Simulation_syncAllSimulations


syncAllSimulations = Simulation_syncAllSimulations
validSimulation = Simulation_validSimulation


def currentSimulation(*args):
    return _simulation.currentSimulation(*args)
currentSimulation = _simulation.currentSimulation

def makeCurrent(*args, **kwargs):
    return _simulation.makeCurrent(*args, **kwargs)
makeCurrent = _simulation.makeCurrent

pyXplorHelp = help


def help(*args):
    return _simulation.help(*args)
help = _simulation.help


