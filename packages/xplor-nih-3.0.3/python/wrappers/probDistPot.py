# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_probDistPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_probDistPot')
    _probDistPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_probDistPot', [dirname(__file__)])
        except ImportError:
            import _probDistPot
            return _probDistPot
        try:
            _mod = imp.load_module('_probDistPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _probDistPot = swig_import_helper()
    del swig_import_helper
else:
    import _probDistPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _probDistPot.Modified_MOD_SELF
    MOD_SIMULATION = _probDistPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _probDistPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _probDistPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _probDistPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _probDistPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _probDistPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _probDistPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _probDistPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _probDistPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_probDistPot.ModifiedBase_modified_get, _probDistPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_probDistPot.ModifiedBase_registeredSimulations_get, _probDistPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _probDistPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _probDistPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _probDistPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _probDistPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _probDistPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_probDistPot.VarEnsWeights_ensWeights_get, _probDistPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_probDistPot.VarEnsWeights_mult_get, _probDistPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _probDistPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _probDistPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _probDistPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _probDistPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _probDistPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _probDistPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _probDistPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _probDistPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _probDistPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _probDistPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class ProbDistPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _probDistPot.new_ProbDistPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _probDistPot.ProbDistPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _probDistPot.ProbDistPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _probDistPot.delete_ProbDistPot
    __del__ = lambda self: None
    prStruct = _swig_property(_probDistPot.ProbDistPot_prStruct_get, _probDistPot.ProbDistPot_prStruct_set)
    targetMap = _swig_property(_probDistPot.ProbDistPot_targetMap_get, _probDistPot.ProbDistPot_targetMap_set)
    rmsval = _swig_property(_probDistPot.ProbDistPot_rmsval_get, _probDistPot.ProbDistPot_rmsval_set)
    numAtoms = _swig_property(_probDistPot.ProbDistPot_numAtoms_get, _probDistPot.ProbDistPot_numAtoms_set)

    def rms(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_numRestraints(self, *args, **kwargs)

    def correlation(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_correlation(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_energyMaybeDerivs0(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_info(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_setPotType(self, *args, **kwargs)

    def calcRadiusGrad(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_calcRadiusGrad(self, *args, **kwargs)

    def setCalcRadiusGrad(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_setCalcRadiusGrad(self, *args, **kwargs)

    def radiusGrad(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_radiusGrad(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def ensWeight(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_probDistPot.ProbDistPot_instanceData__get, _probDistPot.ProbDistPot_instanceData__set)
    instanceDataCreate = _swig_property(_probDistPot.ProbDistPot_instanceDataCreate_get, _probDistPot.ProbDistPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_probDistPot.ProbDistPot_instanceDataCleanup_get, _probDistPot.ProbDistPot_instanceDataCleanup_set)
    modified = _swig_property(_probDistPot.ProbDistPot_modified_get, _probDistPot.ProbDistPot_modified_set)
    registeredSimulations = _swig_property(_probDistPot.ProbDistPot_registeredSimulations_get, _probDistPot.ProbDistPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_unRegister(self, *args, **kwargs)

class ProbDistPotPtr(ProbDistPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ProbDistPot

ProbDistPot_swigregister = _probDistPot.ProbDistPot_swigregister
ProbDistPot_swigregister(ProbDistPot)


realProbDistPot = ProbDistPot
def ProbDistPot(*args):
    from potProxy import PotProxy
    return PotProxy( realProbDistPot(*args) )

class ProbDistPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DIFF = _probDistPot.ProbDistPot_LetterClass_DIFF
    CROSS_CORRELATION = _probDistPot.ProbDistPot_LetterClass_CROSS_CORRELATION
    CORRELATION = _probDistPot.ProbDistPot_LetterClass_CORRELATION

    def __init__(self, *args, **kwargs):
        this = _probDistPot.new_ProbDistPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _probDistPot.delete_ProbDistPot_LetterClass
    __del__ = lambda self: None
    prStruct = _swig_property(_probDistPot.ProbDistPot_LetterClass_prStruct_get, _probDistPot.ProbDistPot_LetterClass_prStruct_set)
    targetMap = _swig_property(_probDistPot.ProbDistPot_LetterClass_targetMap_get, _probDistPot.ProbDistPot_LetterClass_targetMap_set)
    rmsval = _swig_property(_probDistPot.ProbDistPot_LetterClass_rmsval_get, _probDistPot.ProbDistPot_LetterClass_rmsval_set)
    numAtoms = _swig_property(_probDistPot.ProbDistPot_LetterClass_numAtoms_get, _probDistPot.ProbDistPot_LetterClass_numAtoms_set)

    def rms(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_numRestraints(self, *args, **kwargs)

    def correlation(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_correlation(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_info(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_setPotType(self, *args, **kwargs)

    def calcRadiusGrad(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_calcRadiusGrad(self, *args, **kwargs)

    def setCalcRadiusGrad(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_setCalcRadiusGrad(self, *args, **kwargs)

    def radiusGrad(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_radiusGrad(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _probDistPot.ProbDistPot_LetterClass_help(self, *args, **kwargs)

class ProbDistPot_LetterClassPtr(ProbDistPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ProbDistPot_LetterClass

ProbDistPot_LetterClass_swigregister = _probDistPot.ProbDistPot_LetterClass_swigregister
ProbDistPot_LetterClass_swigregister(ProbDistPot_LetterClass)


import atomProb


pyXplorHelp = help


def help(*args):
    return _probDistPot.help(*args)
help = _probDistPot.help


