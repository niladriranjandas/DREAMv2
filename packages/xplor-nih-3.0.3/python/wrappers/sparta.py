# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sparta')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sparta')
    _sparta = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sparta', [dirname(__file__)])
        except ImportError:
            import _sparta
            return _sparta
        try:
            _mod = imp.load_module('_sparta', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _sparta = swig_import_helper()
    del swig_import_helper
else:
    import _sparta
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class rc_ptr_SPARTA(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _sparta.new_rc_ptr_SPARTA(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sparta.delete_rc_ptr_SPARTA
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_release(self, *args, **kwargs)
    indexBlosumM = _swig_property(_sparta.rc_ptr_SPARTA_indexBlosumM_get, _sparta.rc_ptr_SPARTA_indexBlosumM_set)
    indexPhiM = _swig_property(_sparta.rc_ptr_SPARTA_indexPhiM_get, _sparta.rc_ptr_SPARTA_indexPhiM_set)
    indexPsiM = _swig_property(_sparta.rc_ptr_SPARTA_indexPsiM_get, _sparta.rc_ptr_SPARTA_indexPsiM_set)
    indexChi1M = _swig_property(_sparta.rc_ptr_SPARTA_indexChi1M_get, _sparta.rc_ptr_SPARTA_indexChi1M_set)
    indexChi2M = _swig_property(_sparta.rc_ptr_SPARTA_indexChi2M_get, _sparta.rc_ptr_SPARTA_indexChi2M_set)
    indexBlosum = _swig_property(_sparta.rc_ptr_SPARTA_indexBlosum_get, _sparta.rc_ptr_SPARTA_indexBlosum_set)
    indexPhi = _swig_property(_sparta.rc_ptr_SPARTA_indexPhi_get, _sparta.rc_ptr_SPARTA_indexPhi_set)
    indexPsi = _swig_property(_sparta.rc_ptr_SPARTA_indexPsi_get, _sparta.rc_ptr_SPARTA_indexPsi_set)
    indexChi1 = _swig_property(_sparta.rc_ptr_SPARTA_indexChi1_get, _sparta.rc_ptr_SPARTA_indexChi1_set)
    indexChi2 = _swig_property(_sparta.rc_ptr_SPARTA_indexChi2_get, _sparta.rc_ptr_SPARTA_indexChi2_set)
    indexBlosumP = _swig_property(_sparta.rc_ptr_SPARTA_indexBlosumP_get, _sparta.rc_ptr_SPARTA_indexBlosumP_set)
    indexPhiP = _swig_property(_sparta.rc_ptr_SPARTA_indexPhiP_get, _sparta.rc_ptr_SPARTA_indexPhiP_set)
    indexPsiP = _swig_property(_sparta.rc_ptr_SPARTA_indexPsiP_get, _sparta.rc_ptr_SPARTA_indexPsiP_set)
    indexChi1P = _swig_property(_sparta.rc_ptr_SPARTA_indexChi1P_get, _sparta.rc_ptr_SPARTA_indexChi1P_set)
    indexChi2P = _swig_property(_sparta.rc_ptr_SPARTA_indexChi2P_get, _sparta.rc_ptr_SPARTA_indexChi2P_set)
    indexHbondOM = _swig_property(_sparta.rc_ptr_SPARTA_indexHbondOM_get, _sparta.rc_ptr_SPARTA_indexHbondOM_set)
    indexHbondHN = _swig_property(_sparta.rc_ptr_SPARTA_indexHbondHN_get, _sparta.rc_ptr_SPARTA_indexHbondHN_set)
    indexHbondHA = _swig_property(_sparta.rc_ptr_SPARTA_indexHbondHA_get, _sparta.rc_ptr_SPARTA_indexHbondHA_set)
    indexHbondO = _swig_property(_sparta.rc_ptr_SPARTA_indexHbondO_get, _sparta.rc_ptr_SPARTA_indexHbondO_set)
    indexHbondHNP = _swig_property(_sparta.rc_ptr_SPARTA_indexHbondHNP_get, _sparta.rc_ptr_SPARTA_indexHbondHNP_set)
    indexOrder = _swig_property(_sparta.rc_ptr_SPARTA_indexOrder_get, _sparta.rc_ptr_SPARTA_indexOrder_set)

    def termsUsed(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_termsUsed(self, *args, **kwargs)

    def setTermsUsed(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setTermsUsed(self, *args, **kwargs)
    annSet = _swig_property(_sparta.rc_ptr_SPARTA_annSet_get, _sparta.rc_ptr_SPARTA_annSet_set)

    def setAnnSet(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setAnnSet(self, *args, **kwargs)
    RC_Tab = _swig_property(_sparta.rc_ptr_SPARTA_RC_Tab_get, _sparta.rc_ptr_SPARTA_RC_Tab_set)
    derivAccumList = _swig_property(_sparta.rc_ptr_SPARTA_derivAccumList_get, _sparta.rc_ptr_SPARTA_derivAccumList_set)

    def addAtomType(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_addAtomType(self, *args, **kwargs)

    def printSyntax(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_printSyntax(self, *args, **kwargs)

    def init(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_init(self, *args, **kwargs)
    inPDB = _swig_property(_sparta.rc_ptr_SPARTA_inPDB_get, _sparta.rc_ptr_SPARTA_inPDB_set)

    def selection(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_selection(self, *args, **kwargs)
    chemShiftAtomSel = _swig_property(_sparta.rc_ptr_SPARTA_chemShiftAtomSel_get, _sparta.rc_ptr_SPARTA_chemShiftAtomSel_set)

    def annInputDim(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_annInputDim(self, *args, **kwargs)

    def setAnnInputDim(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setAnnInputDim(self, *args, **kwargs)

    def annHiddenDim(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_annHiddenDim(self, *args, **kwargs)

    def setAnnHiddenDim(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setAnnHiddenDim(self, *args, **kwargs)

    def matchCount(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_matchCount(self, *args, **kwargs)

    def setMatchCount(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setMatchCount(self, *args, **kwargs)

    def excluded(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_excluded(self, *args, **kwargs)

    def setExcluded(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setExcluded(self, *args, **kwargs)

    def tripFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_tripFileName(self, *args, **kwargs)

    def setTripFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setTripFileName(self, *args, **kwargs)

    def weightFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_weightFileName(self, *args, **kwargs)

    def setWeightFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setWeightFileName(self, *args, **kwargs)

    def homoFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_homoFileName(self, *args, **kwargs)

    def setHomoFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setHomoFileName(self, *args, **kwargs)

    def fitFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_fitFileName(self, *args, **kwargs)

    def setFitFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setFitFileName(self, *args, **kwargs)

    def refCSFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_refCSFileName(self, *args, **kwargs)

    def setRefCSFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setRefCSFileName(self, *args, **kwargs)

    def rcFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_rcFileName(self, *args, **kwargs)

    def setRCFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setRCFileName(self, *args, **kwargs)

    def adjFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_adjFileName(self, *args, **kwargs)

    def setAdjFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setAdjFileName(self, *args, **kwargs)

    def prevFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_prevFileName(self, *args, **kwargs)

    def setPrevFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setPrevFileName(self, *args, **kwargs)

    def nextFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_nextFileName(self, *args, **kwargs)

    def setNextFileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setNextFileName(self, *args, **kwargs)

    def B62FileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_B62FileName(self, *args, **kwargs)

    def setB62FileName(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setB62FileName(self, *args, **kwargs)

    def annLevel1Pattern(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_annLevel1Pattern(self, *args, **kwargs)

    def setANNLevel1Pattern(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setANNLevel1Pattern(self, *args, **kwargs)

    def surfPattern(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_surfPattern(self, *args, **kwargs)

    def setSurfPattern(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setSurfPattern(self, *args, **kwargs)

    def dynamicSSBonds(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_dynamicSSBonds(self, *args, **kwargs)

    def setDynamicSSBonds(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setDynamicSSBonds(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_setVerbose(self, *args, **kwargs)

    def getResInfo(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getResInfo(self, *args, **kwargs)

    def runANN_Prediction(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_runANN_Prediction(self, *args, **kwargs)

    def run_A_ANN_Prediction(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_run_A_ANN_Prediction(self, *args, **kwargs)

    def getANN_PredError(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getANN_PredError(self, *args, **kwargs)

    def init_PredErrorSurface(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_init_PredErrorSurface(self, *args, **kwargs)

    def Compile(self, *args):
        return _sparta.rc_ptr_SPARTA_Compile(self, *args)

    def getRC(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getRC(self, *args, **kwargs)

    def getRCadj(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getRCadj(self, *args, **kwargs)

    def getPrevRCadj(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getPrevRCadj(self, *args, **kwargs)

    def getNextRCadj(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getNextRCadj(self, *args, **kwargs)

    def getPred2ndShift(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getPred2ndShift(self, *args, **kwargs)

    def summarizeInput(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_summarizeInput(self, *args, **kwargs)

    def summary(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_summary(self, *args, **kwargs)

    def comparisonOutput(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_comparisonOutput(self, *args, **kwargs)

    def refCSOutput(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_refCSOutput(self, *args, **kwargs)

    def ftoa(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_ftoa(self, *args, **kwargs)

    def itoa(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_itoa(self, *args, **kwargs)
    predictedShifts = _swig_property(_sparta.rc_ptr_SPARTA_predictedShifts_get, _sparta.rc_ptr_SPARTA_predictedShifts_set)
    randomCoilShifts = _swig_property(_sparta.rc_ptr_SPARTA_randomCoilShifts_get, _sparta.rc_ptr_SPARTA_randomCoilShifts_set)
    predictedSigma = _swig_property(_sparta.rc_ptr_SPARTA_predictedSigma_get, _sparta.rc_ptr_SPARTA_predictedSigma_set)

    def getShift(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getShift(self, *args, **kwargs)

    def getDerivs(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getDerivs(self, *args, **kwargs)

    def getRCShift(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getRCShift(self, *args, **kwargs)

    def getSigma(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_getSigma(self, *args, **kwargs)

    def calcDerivsOn(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_calcDerivsOn(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _sparta.rc_ptr_SPARTA_updateValues(self, *args, **kwargs)

class rc_ptr_SPARTAPtr(rc_ptr_SPARTA):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_SPARTA

rc_ptr_SPARTA_swigregister = _sparta.rc_ptr_SPARTA_swigregister
rc_ptr_SPARTA_swigregister(rc_ptr_SPARTA)

class CDSList_DerivDataElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _sparta.CDSList_DerivDataElement___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _sparta.new_CDSList_DerivDataElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _sparta.CDSList_DerivDataElement___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _sparta.CDSList_DerivDataElement___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _sparta.CDSList_DerivDataElement_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _sparta.CDSList_DerivDataElement_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _sparta.CDSList_DerivDataElement_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _sparta.CDSList_DerivDataElement___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _sparta.CDSList_DerivDataElement___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _sparta.CDSList_DerivDataElement_help(self, *args, **kwargs)
    __swig_destroy__ = _sparta.delete_CDSList_DerivDataElement
    __del__ = lambda self: None

class CDSList_DerivDataElementPtr(CDSList_DerivDataElement):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_DerivDataElement

CDSList_DerivDataElement_swigregister = _sparta.CDSList_DerivDataElement_swigregister
CDSList_DerivDataElement_swigregister(CDSList_DerivDataElement)

MAX_NUM = _sparta.MAX_NUM
class SPARTA(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TERM_RING = _sparta.SPARTA_TERM_RING
    TERM_EFIELD = _sparta.SPARTA_TERM_EFIELD
    TERM_ORDER = _sparta.SPARTA_TERM_ORDER
    TERM_HBOND = _sparta.SPARTA_TERM_HBOND
    TERM_PHIM = _sparta.SPARTA_TERM_PHIM
    TERM_PHI = _sparta.SPARTA_TERM_PHI
    TERM_PHIP = _sparta.SPARTA_TERM_PHIP
    TERM_PSIM = _sparta.SPARTA_TERM_PSIM
    TERM_PSI = _sparta.SPARTA_TERM_PSI
    TERM_PSIP = _sparta.SPARTA_TERM_PSIP
    TERM_CHI1M = _sparta.SPARTA_TERM_CHI1M
    TERM_CHI1 = _sparta.SPARTA_TERM_CHI1
    TERM_CHI1P = _sparta.SPARTA_TERM_CHI1P
    TERM_CHI2M = _sparta.SPARTA_TERM_CHI2M
    TERM_CHI2 = _sparta.SPARTA_TERM_CHI2
    TERM_CHI2P = _sparta.SPARTA_TERM_CHI2P
    indexBlosumM = _swig_property(_sparta.SPARTA_indexBlosumM_get, _sparta.SPARTA_indexBlosumM_set)
    indexPhiM = _swig_property(_sparta.SPARTA_indexPhiM_get, _sparta.SPARTA_indexPhiM_set)
    indexPsiM = _swig_property(_sparta.SPARTA_indexPsiM_get, _sparta.SPARTA_indexPsiM_set)
    indexChi1M = _swig_property(_sparta.SPARTA_indexChi1M_get, _sparta.SPARTA_indexChi1M_set)
    indexChi2M = _swig_property(_sparta.SPARTA_indexChi2M_get, _sparta.SPARTA_indexChi2M_set)
    indexBlosum = _swig_property(_sparta.SPARTA_indexBlosum_get, _sparta.SPARTA_indexBlosum_set)
    indexPhi = _swig_property(_sparta.SPARTA_indexPhi_get, _sparta.SPARTA_indexPhi_set)
    indexPsi = _swig_property(_sparta.SPARTA_indexPsi_get, _sparta.SPARTA_indexPsi_set)
    indexChi1 = _swig_property(_sparta.SPARTA_indexChi1_get, _sparta.SPARTA_indexChi1_set)
    indexChi2 = _swig_property(_sparta.SPARTA_indexChi2_get, _sparta.SPARTA_indexChi2_set)
    indexBlosumP = _swig_property(_sparta.SPARTA_indexBlosumP_get, _sparta.SPARTA_indexBlosumP_set)
    indexPhiP = _swig_property(_sparta.SPARTA_indexPhiP_get, _sparta.SPARTA_indexPhiP_set)
    indexPsiP = _swig_property(_sparta.SPARTA_indexPsiP_get, _sparta.SPARTA_indexPsiP_set)
    indexChi1P = _swig_property(_sparta.SPARTA_indexChi1P_get, _sparta.SPARTA_indexChi1P_set)
    indexChi2P = _swig_property(_sparta.SPARTA_indexChi2P_get, _sparta.SPARTA_indexChi2P_set)
    indexHbondOM = _swig_property(_sparta.SPARTA_indexHbondOM_get, _sparta.SPARTA_indexHbondOM_set)
    indexHbondHN = _swig_property(_sparta.SPARTA_indexHbondHN_get, _sparta.SPARTA_indexHbondHN_set)
    indexHbondHA = _swig_property(_sparta.SPARTA_indexHbondHA_get, _sparta.SPARTA_indexHbondHA_set)
    indexHbondO = _swig_property(_sparta.SPARTA_indexHbondO_get, _sparta.SPARTA_indexHbondO_set)
    indexHbondHNP = _swig_property(_sparta.SPARTA_indexHbondHNP_get, _sparta.SPARTA_indexHbondHNP_set)
    indexOrder = _swig_property(_sparta.SPARTA_indexOrder_get, _sparta.SPARTA_indexOrder_set)
    ANNSET_20110211 = _sparta.SPARTA_ANNSET_20110211
    ANNSET_20110225 = _sparta.SPARTA_ANNSET_20110225
    ANNSET_20110324 = _sparta.SPARTA_ANNSET_20110324

    def termsUsed(self, *args, **kwargs):
        return _sparta.SPARTA_termsUsed(self, *args, **kwargs)

    def setTermsUsed(self, *args, **kwargs):
        return _sparta.SPARTA_setTermsUsed(self, *args, **kwargs)
    annSet = _swig_property(_sparta.SPARTA_annSet_get, _sparta.SPARTA_annSet_set)

    def setAnnSet(self, *args, **kwargs):
        return _sparta.SPARTA_setAnnSet(self, *args, **kwargs)
    RC_Tab = _swig_property(_sparta.SPARTA_RC_Tab_get, _sparta.SPARTA_RC_Tab_set)
    derivAccumList = _swig_property(_sparta.SPARTA_derivAccumList_get, _sparta.SPARTA_derivAccumList_set)

    def __init__(self, *args, **kwargs):
        this = _sparta.new_SPARTA(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def addAtomType(self, *args, **kwargs):
        return _sparta.SPARTA_addAtomType(self, *args, **kwargs)

    def printSyntax(self, *args, **kwargs):
        return _sparta.SPARTA_printSyntax(self, *args, **kwargs)

    def init(self, *args, **kwargs):
        return _sparta.SPARTA_init(self, *args, **kwargs)
    inPDB = _swig_property(_sparta.SPARTA_inPDB_get, _sparta.SPARTA_inPDB_set)

    def selection(self, *args, **kwargs):
        return _sparta.SPARTA_selection(self, *args, **kwargs)
    chemShiftAtomSel = _swig_property(_sparta.SPARTA_chemShiftAtomSel_get, _sparta.SPARTA_chemShiftAtomSel_set)

    def annInputDim(self, *args, **kwargs):
        return _sparta.SPARTA_annInputDim(self, *args, **kwargs)

    def setAnnInputDim(self, *args, **kwargs):
        return _sparta.SPARTA_setAnnInputDim(self, *args, **kwargs)

    def annHiddenDim(self, *args, **kwargs):
        return _sparta.SPARTA_annHiddenDim(self, *args, **kwargs)

    def setAnnHiddenDim(self, *args, **kwargs):
        return _sparta.SPARTA_setAnnHiddenDim(self, *args, **kwargs)

    def matchCount(self, *args, **kwargs):
        return _sparta.SPARTA_matchCount(self, *args, **kwargs)

    def setMatchCount(self, *args, **kwargs):
        return _sparta.SPARTA_setMatchCount(self, *args, **kwargs)

    def excluded(self, *args, **kwargs):
        return _sparta.SPARTA_excluded(self, *args, **kwargs)

    def setExcluded(self, *args, **kwargs):
        return _sparta.SPARTA_setExcluded(self, *args, **kwargs)

    def tripFileName(self, *args, **kwargs):
        return _sparta.SPARTA_tripFileName(self, *args, **kwargs)

    def setTripFileName(self, *args, **kwargs):
        return _sparta.SPARTA_setTripFileName(self, *args, **kwargs)

    def weightFileName(self, *args, **kwargs):
        return _sparta.SPARTA_weightFileName(self, *args, **kwargs)

    def setWeightFileName(self, *args, **kwargs):
        return _sparta.SPARTA_setWeightFileName(self, *args, **kwargs)

    def homoFileName(self, *args, **kwargs):
        return _sparta.SPARTA_homoFileName(self, *args, **kwargs)

    def setHomoFileName(self, *args, **kwargs):
        return _sparta.SPARTA_setHomoFileName(self, *args, **kwargs)

    def fitFileName(self, *args, **kwargs):
        return _sparta.SPARTA_fitFileName(self, *args, **kwargs)

    def setFitFileName(self, *args, **kwargs):
        return _sparta.SPARTA_setFitFileName(self, *args, **kwargs)

    def refCSFileName(self, *args, **kwargs):
        return _sparta.SPARTA_refCSFileName(self, *args, **kwargs)

    def setRefCSFileName(self, *args, **kwargs):
        return _sparta.SPARTA_setRefCSFileName(self, *args, **kwargs)

    def rcFileName(self, *args, **kwargs):
        return _sparta.SPARTA_rcFileName(self, *args, **kwargs)

    def setRCFileName(self, *args, **kwargs):
        return _sparta.SPARTA_setRCFileName(self, *args, **kwargs)

    def adjFileName(self, *args, **kwargs):
        return _sparta.SPARTA_adjFileName(self, *args, **kwargs)

    def setAdjFileName(self, *args, **kwargs):
        return _sparta.SPARTA_setAdjFileName(self, *args, **kwargs)

    def prevFileName(self, *args, **kwargs):
        return _sparta.SPARTA_prevFileName(self, *args, **kwargs)

    def setPrevFileName(self, *args, **kwargs):
        return _sparta.SPARTA_setPrevFileName(self, *args, **kwargs)

    def nextFileName(self, *args, **kwargs):
        return _sparta.SPARTA_nextFileName(self, *args, **kwargs)

    def setNextFileName(self, *args, **kwargs):
        return _sparta.SPARTA_setNextFileName(self, *args, **kwargs)

    def B62FileName(self, *args, **kwargs):
        return _sparta.SPARTA_B62FileName(self, *args, **kwargs)

    def setB62FileName(self, *args, **kwargs):
        return _sparta.SPARTA_setB62FileName(self, *args, **kwargs)

    def annLevel1Pattern(self, *args, **kwargs):
        return _sparta.SPARTA_annLevel1Pattern(self, *args, **kwargs)

    def setANNLevel1Pattern(self, *args, **kwargs):
        return _sparta.SPARTA_setANNLevel1Pattern(self, *args, **kwargs)

    def surfPattern(self, *args, **kwargs):
        return _sparta.SPARTA_surfPattern(self, *args, **kwargs)

    def setSurfPattern(self, *args, **kwargs):
        return _sparta.SPARTA_setSurfPattern(self, *args, **kwargs)

    def dynamicSSBonds(self, *args, **kwargs):
        return _sparta.SPARTA_dynamicSSBonds(self, *args, **kwargs)

    def setDynamicSSBonds(self, *args, **kwargs):
        return _sparta.SPARTA_setDynamicSSBonds(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _sparta.SPARTA_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _sparta.SPARTA_setVerbose(self, *args, **kwargs)

    def getResInfo(self, *args, **kwargs):
        return _sparta.SPARTA_getResInfo(self, *args, **kwargs)

    def runANN_Prediction(self, *args, **kwargs):
        return _sparta.SPARTA_runANN_Prediction(self, *args, **kwargs)

    def run_A_ANN_Prediction(self, *args, **kwargs):
        return _sparta.SPARTA_run_A_ANN_Prediction(self, *args, **kwargs)

    def getANN_PredError(self, *args, **kwargs):
        return _sparta.SPARTA_getANN_PredError(self, *args, **kwargs)

    def init_PredErrorSurface(self, *args, **kwargs):
        return _sparta.SPARTA_init_PredErrorSurface(self, *args, **kwargs)

    def Compile(self, *args):
        return _sparta.SPARTA_Compile(self, *args)

    def getRC(self, *args, **kwargs):
        return _sparta.SPARTA_getRC(self, *args, **kwargs)

    def getRCadj(self, *args, **kwargs):
        return _sparta.SPARTA_getRCadj(self, *args, **kwargs)

    def getPrevRCadj(self, *args, **kwargs):
        return _sparta.SPARTA_getPrevRCadj(self, *args, **kwargs)

    def getNextRCadj(self, *args, **kwargs):
        return _sparta.SPARTA_getNextRCadj(self, *args, **kwargs)

    def getPred2ndShift(self, *args, **kwargs):
        return _sparta.SPARTA_getPred2ndShift(self, *args, **kwargs)

    def summarizeInput(self, *args, **kwargs):
        return _sparta.SPARTA_summarizeInput(self, *args, **kwargs)

    def summary(self, *args, **kwargs):
        return _sparta.SPARTA_summary(self, *args, **kwargs)

    def comparisonOutput(self, *args, **kwargs):
        return _sparta.SPARTA_comparisonOutput(self, *args, **kwargs)

    def refCSOutput(self, *args, **kwargs):
        return _sparta.SPARTA_refCSOutput(self, *args, **kwargs)

    def ftoa(self, *args, **kwargs):
        return _sparta.SPARTA_ftoa(self, *args, **kwargs)

    def itoa(self, *args, **kwargs):
        return _sparta.SPARTA_itoa(self, *args, **kwargs)
    predictedShifts = _swig_property(_sparta.SPARTA_predictedShifts_get, _sparta.SPARTA_predictedShifts_set)
    randomCoilShifts = _swig_property(_sparta.SPARTA_randomCoilShifts_get, _sparta.SPARTA_randomCoilShifts_set)
    predictedSigma = _swig_property(_sparta.SPARTA_predictedSigma_get, _sparta.SPARTA_predictedSigma_set)

    def getShift(self, *args, **kwargs):
        return _sparta.SPARTA_getShift(self, *args, **kwargs)

    def getDerivs(self, *args, **kwargs):
        return _sparta.SPARTA_getDerivs(self, *args, **kwargs)

    def getRCShift(self, *args, **kwargs):
        return _sparta.SPARTA_getRCShift(self, *args, **kwargs)

    def getSigma(self, *args, **kwargs):
        return _sparta.SPARTA_getSigma(self, *args, **kwargs)

    def calcDerivsOn(self, *args, **kwargs):
        return _sparta.SPARTA_calcDerivsOn(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _sparta.SPARTA_updateValues(self, *args, **kwargs)
    __swig_destroy__ = _sparta.delete_SPARTA
    __del__ = lambda self: None

class SPARTAPtr(SPARTA):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SPARTA

SPARTA_swigregister = _sparta.SPARTA_swigregister
SPARTA_swigregister(SPARTA)

class DerivDataElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    index = _swig_property(_sparta.DerivDataElement_index_get, _sparta.DerivDataElement_index_set)
    val = _swig_property(_sparta.DerivDataElement_val_get, _sparta.DerivDataElement_val_set)

    def __init__(self, *args):
        this = _sparta.new_DerivDataElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sparta.delete_DerivDataElement
    __del__ = lambda self: None

class DerivDataElementPtr(DerivDataElement):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = DerivDataElement

DerivDataElement_swigregister = _sparta.DerivDataElement_swigregister
DerivDataElement_swigregister(DerivDataElement)

class SPARTA_RingData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    residueIndex = _swig_property(_sparta.SPARTA_RingData_residueIndex_get, _sparta.SPARTA_RingData_residueIndex_set)
    atomNo = _swig_property(_sparta.SPARTA_RingData_atomNo_get, _sparta.SPARTA_RingData_atomNo_set)
    resName = _swig_property(_sparta.SPARTA_RingData_resName_get, _sparta.SPARTA_RingData_resName_set)
    atoms = _swig_property(_sparta.SPARTA_RingData_atoms_get, _sparta.SPARTA_RingData_atoms_set)
    ringFact = _swig_property(_sparta.SPARTA_RingData_ringFact_get, _sparta.SPARTA_RingData_ringFact_set)

    def __init__(self, *args, **kwargs):
        this = _sparta.new_SPARTA_RingData(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sparta.delete_SPARTA_RingData
    __del__ = lambda self: None

class SPARTA_RingDataPtr(SPARTA_RingData):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SPARTA_RingData

SPARTA_RingData_swigregister = _sparta.SPARTA_RingData_swigregister
SPARTA_RingData_swigregister(SPARTA_RingData)

class SPARTA_Dihedral(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    valid = _swig_property(_sparta.SPARTA_Dihedral_valid_get, _sparta.SPARTA_Dihedral_valid_set)
    switchSign = _swig_property(_sparta.SPARTA_Dihedral_switchSign_get, _sparta.SPARTA_Dihedral_switchSign_set)
    dihedral = _swig_property(_sparta.SPARTA_Dihedral_dihedral_get, _sparta.SPARTA_Dihedral_dihedral_set)

    def __init__(self, *args):
        this = _sparta.new_SPARTA_Dihedral(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self, *args, **kwargs):
        return _sparta.SPARTA_Dihedral_value(self, *args, **kwargs)

    def derivs(self, *args, **kwargs):
        return _sparta.SPARTA_Dihedral_derivs(self, *args, **kwargs)

    def atom0(self, *args, **kwargs):
        return _sparta.SPARTA_Dihedral_atom0(self, *args, **kwargs)

    def atom1(self, *args, **kwargs):
        return _sparta.SPARTA_Dihedral_atom1(self, *args, **kwargs)

    def atom2(self, *args, **kwargs):
        return _sparta.SPARTA_Dihedral_atom2(self, *args, **kwargs)

    def atom3(self, *args, **kwargs):
        return _sparta.SPARTA_Dihedral_atom3(self, *args, **kwargs)
    __swig_destroy__ = _sparta.delete_SPARTA_Dihedral
    __del__ = lambda self: None

class SPARTA_DihedralPtr(SPARTA_Dihedral):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SPARTA_Dihedral

SPARTA_Dihedral_swigregister = _sparta.SPARTA_Dihedral_swigregister
SPARTA_Dihedral_swigregister(SPARTA_Dihedral)
cvar = _sparta.cvar
SPARTA_Dihedral.MAXNUM = _sparta.cvar.SPARTA_Dihedral_MAXNUM

class SPARTA_HydrogenBond(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pdb = _swig_property(_sparta.SPARTA_HydrogenBond_pdb_get, _sparta.SPARTA_HydrogenBond_pdb_set)
    a = _swig_property(_sparta.SPARTA_HydrogenBond_a_get, _sparta.SPARTA_HydrogenBond_a_set)
    aB = _swig_property(_sparta.SPARTA_HydrogenBond_aB_get, _sparta.SPARTA_HydrogenBond_aB_set)
    d = _swig_property(_sparta.SPARTA_HydrogenBond_d_get, _sparta.SPARTA_HydrogenBond_d_set)
    dB = _swig_property(_sparta.SPARTA_HydrogenBond_dB_get, _sparta.SPARTA_HydrogenBond_dB_set)
    E = _swig_property(_sparta.SPARTA_HydrogenBond_E_get, _sparta.SPARTA_HydrogenBond_E_set)
    dist = _swig_property(_sparta.SPARTA_HydrogenBond_dist_get, _sparta.SPARTA_HydrogenBond_dist_set)

    def __init__(self, *args):
        this = _sparta.new_SPARTA_HydrogenBond(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valid(self, *args, **kwargs):
        return _sparta.SPARTA_HydrogenBond_valid(self, *args, **kwargs)

    def factor(self, *args, **kwargs):
        return _sparta.SPARTA_HydrogenBond_factor(self, *args, **kwargs)

    def cosDHO(self, *args, **kwargs):
        return _sparta.SPARTA_HydrogenBond_cosDHO(self, *args, **kwargs)

    def cosHOA(self, *args, **kwargs):
        return _sparta.SPARTA_HydrogenBond_cosHOA(self, *args, **kwargs)
    HB_prefactor = _swig_property(_sparta.SPARTA_HydrogenBond_HB_prefactor_get, _sparta.SPARTA_HydrogenBond_HB_prefactor_set)
    asympDist = _swig_property(_sparta.SPARTA_HydrogenBond_asympDist_get, _sparta.SPARTA_HydrogenBond_asympDist_set)
    __swig_destroy__ = _sparta.delete_SPARTA_HydrogenBond
    __del__ = lambda self: None

class SPARTA_HydrogenBondPtr(SPARTA_HydrogenBond):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SPARTA_HydrogenBond

SPARTA_HydrogenBond_swigregister = _sparta.SPARTA_HydrogenBond_swigregister
SPARTA_HydrogenBond_swigregister(SPARTA_HydrogenBond)

class SPARTA_PDB(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Rings = _swig_property(_sparta.SPARTA_PDB_Rings_get, _sparta.SPARTA_PDB_Rings_set)
    residueList = _swig_property(_sparta.SPARTA_PDB_residueList_get, _sparta.SPARTA_PDB_residueList_set)
    INTERNAL = _sparta.SPARTA_PDB_INTERNAL
    NTERMINAL = _sparta.SPARTA_PDB_NTERMINAL
    CTERMINAL = _sparta.SPARTA_PDB_CTERMINAL
    sel = _swig_property(_sparta.SPARTA_PDB_sel_get, _sparta.SPARTA_PDB_sel_set)
    lsel = _swig_property(_sparta.SPARTA_PDB_lsel_get, _sparta.SPARTA_PDB_lsel_set)

    def hbondOn(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_hbondOn(self, *args, **kwargs)

    def setHbondOn(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_setHbondOn(self, *args, **kwargs)

    def hbondOff(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_hbondOff(self, *args, **kwargs)

    def setHbondOff(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_setHbondOff(self, *args, **kwargs)

    def ringOn(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_ringOn(self, *args, **kwargs)

    def setRingOn(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_setRingOn(self, *args, **kwargs)

    def ringOff(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_ringOff(self, *args, **kwargs)

    def setRingOff(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_setRingOff(self, *args, **kwargs)

    def efieldOn(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_efieldOn(self, *args, **kwargs)

    def setEfieldOn(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_setEfieldOn(self, *args, **kwargs)

    def efieldOff(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_efieldOff(self, *args, **kwargs)

    def setEfieldOff(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_setEfieldOff(self, *args, **kwargs)
    phi = _swig_property(_sparta.SPARTA_PDB_phi_get, _sparta.SPARTA_PDB_phi_set)
    psi = _swig_property(_sparta.SPARTA_PDB_psi_get, _sparta.SPARTA_PDB_psi_set)
    omega = _swig_property(_sparta.SPARTA_PDB_omega_get, _sparta.SPARTA_PDB_omega_set)
    chi1 = _swig_property(_sparta.SPARTA_PDB_chi1_get, _sparta.SPARTA_PDB_chi1_set)
    chi2 = _swig_property(_sparta.SPARTA_PDB_chi2_get, _sparta.SPARTA_PDB_chi2_set)
    acceptorList = _swig_property(_sparta.SPARTA_PDB_acceptorList_get, _sparta.SPARTA_PDB_acceptorList_set)
    donorList = _swig_property(_sparta.SPARTA_PDB_donorList_get, _sparta.SPARTA_PDB_donorList_set)
    hbList = _swig_property(_sparta.SPARTA_PDB_hbList_get, _sparta.SPARTA_PDB_hbList_set)
    SpherePointNo = _swig_property(_sparta.SPARTA_PDB_SpherePointNo_get, _sparta.SPARTA_PDB_SpherePointNo_set)
    SpherePoints = _swig_property(_sparta.SPARTA_PDB_SpherePoints_get, _sparta.SPARTA_PDB_SpherePoints_set)
    SurfPrec = _swig_property(_sparta.SPARTA_PDB_SurfPrec_get, _sparta.SPARTA_PDB_SurfPrec_set)
    HN_S2 = _swig_property(_sparta.SPARTA_PDB_HN_S2_get, _sparta.SPARTA_PDB_HN_S2_set)
    ElectricField = _swig_property(_sparta.SPARTA_PDB_ElectricField_get, _sparta.SPARTA_PDB_ElectricField_set)

    def __init__(self, *args, **kwargs):
        this = _sparta.new_SPARTA_PDB(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    getThreeAAName = staticmethod(_sparta.SPARTA_PDB_getThreeAAName)
    getOneAAName = staticmethod(_sparta.SPARTA_PDB_getOneAAName)

    def loadPDB(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_loadPDB(self, *args, **kwargs)

    def getBondAngle(self, *args):
        return _sparta.SPARTA_PDB_getBondAngle(self, *args)

    def getPhi(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_getPhi(self, *args, **kwargs)

    def getPsi(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_getPsi(self, *args, **kwargs)

    def getOmega(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_getOmega(self, *args, **kwargs)

    def getChi1(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_getChi1(self, *args, **kwargs)

    def getChi2(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_getChi2(self, *args, **kwargs)

    def isSSBonded(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_isSSBonded(self, *args, **kwargs)

    def initOrbitalShift(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_initOrbitalShift(self, *args, **kwargs)

    def getOrbitalShifts(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_getOrbitalShifts(self, *args, **kwargs)

    def initHBond(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_initHBond(self, *args, **kwargs)

    def calcHBonds(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_calcHBonds(self, *args, **kwargs)

    def isAcceptor(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_isAcceptor(self, *args, **kwargs)

    def isDonor(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_isDonor(self, *args, **kwargs)

    def initEField(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_initEField(self, *args, **kwargs)

    def collect_HN_S2_and_EF(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_collect_HN_S2_and_EF(self, *args, **kwargs)

    def hbCutoff(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_hbCutoff(self, *args, **kwargs)

    def setHBCutoff(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_setHBCutoff(self, *args, **kwargs)

    def moveTol(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_moveTol(self, *args, **kwargs)

    def setMoveTol(self, *args, **kwargs):
        return _sparta.SPARTA_PDB_setMoveTol(self, *args, **kwargs)
    hb_savePos = _swig_property(_sparta.SPARTA_PDB_hb_savePos_get, _sparta.SPARTA_PDB_hb_savePos_set)
    ef_savePos = _swig_property(_sparta.SPARTA_PDB_ef_savePos_get, _sparta.SPARTA_PDB_ef_savePos_set)
    rc_savePos = _swig_property(_sparta.SPARTA_PDB_rc_savePos_get, _sparta.SPARTA_PDB_rc_savePos_set)
    charges = _swig_property(_sparta.SPARTA_PDB_charges_get, _sparta.SPARTA_PDB_charges_set)
    protonList = _swig_property(_sparta.SPARTA_PDB_protonList_get, _sparta.SPARTA_PDB_protonList_set)
    heavyAtoms = _swig_property(_sparta.SPARTA_PDB_heavyAtoms_get, _sparta.SPARTA_PDB_heavyAtoms_set)
    switchFunc = staticmethod(_sparta.SPARTA_PDB_switchFunc)
    switchFuncDeriv = staticmethod(_sparta.SPARTA_PDB_switchFuncDeriv)
    __swig_destroy__ = _sparta.delete_SPARTA_PDB
    __del__ = lambda self: None

class SPARTA_PDBPtr(SPARTA_PDB):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SPARTA_PDB

SPARTA_PDB_swigregister = _sparta.SPARTA_PDB_swigregister
SPARTA_PDB_swigregister(SPARTA_PDB)

def SPARTA_PDB_getThreeAAName(*args, **kwargs):
    return _sparta.SPARTA_PDB_getThreeAAName(*args, **kwargs)
SPARTA_PDB_getThreeAAName = _sparta.SPARTA_PDB_getThreeAAName

def SPARTA_PDB_getOneAAName(*args, **kwargs):
    return _sparta.SPARTA_PDB_getOneAAName(*args, **kwargs)
SPARTA_PDB_getOneAAName = _sparta.SPARTA_PDB_getOneAAName

def SPARTA_PDB_switchFunc(*args, **kwargs):
    return _sparta.SPARTA_PDB_switchFunc(*args, **kwargs)
SPARTA_PDB_switchFunc = _sparta.SPARTA_PDB_switchFunc

def SPARTA_PDB_switchFuncDeriv(*args, **kwargs):
    return _sparta.SPARTA_PDB_switchFuncDeriv(*args, **kwargs)
SPARTA_PDB_switchFuncDeriv = _sparta.SPARTA_PDB_switchFuncDeriv

class SPARTA_ResidueEntry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    terminal = _swig_property(_sparta.SPARTA_ResidueEntry_terminal_get, _sparta.SPARTA_ResidueEntry_terminal_set)
    resid = _swig_property(_sparta.SPARTA_ResidueEntry_resid_get, _sparta.SPARTA_ResidueEntry_resid_set)
    segid = _swig_property(_sparta.SPARTA_ResidueEntry_segid_get, _sparta.SPARTA_ResidueEntry_segid_set)
    resnameOne = _swig_property(_sparta.SPARTA_ResidueEntry_resnameOne_get, _sparta.SPARTA_ResidueEntry_resnameOne_set)
    atoms = _swig_property(_sparta.SPARTA_ResidueEntry_atoms_get, _sparta.SPARTA_ResidueEntry_atoms_set)

    def __init__(self, *args):
        this = _sparta.new_SPARTA_ResidueEntry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def resname(self, *args, **kwargs):
        return _sparta.SPARTA_ResidueEntry_resname(self, *args, **kwargs)
    __swig_destroy__ = _sparta.delete_SPARTA_ResidueEntry
    __del__ = lambda self: None

class SPARTA_ResidueEntryPtr(SPARTA_ResidueEntry):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SPARTA_ResidueEntry

SPARTA_ResidueEntry_swigregister = _sparta.SPARTA_ResidueEntry_swigregister
SPARTA_ResidueEntry_swigregister(SPARTA_ResidueEntry)


def cdsMapConvertToInt(*args, **kwargs):
    return _sparta.cdsMapConvertToInt(*args, **kwargs)
cdsMapConvertToInt = _sparta.cdsMapConvertToInt
class SPARTA_ANN(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ANN_IN_MTX_LEVEL1 = _swig_property(_sparta.SPARTA_ANN_ANN_IN_MTX_LEVEL1_get, _sparta.SPARTA_ANN_ANN_IN_MTX_LEVEL1_set)
    ANN_IN_MTX_LEVEL2 = _swig_property(_sparta.SPARTA_ANN_ANN_IN_MTX_LEVEL2_get, _sparta.SPARTA_ANN_ANN_IN_MTX_LEVEL2_set)
    ANN_OUT_MTX_LEVEL1 = _swig_property(_sparta.SPARTA_ANN_ANN_OUT_MTX_LEVEL1_get, _sparta.SPARTA_ANN_ANN_OUT_MTX_LEVEL1_set)
    gradMat = _swig_property(_sparta.SPARTA_ANN_gradMat_get, _sparta.SPARTA_ANN_gradMat_set)
    ANN_OUT_MTX_LEVEL2 = _swig_property(_sparta.SPARTA_ANN_ANN_OUT_MTX_LEVEL2_get, _sparta.SPARTA_ANN_ANN_OUT_MTX_LEVEL2_set)

    def __init__(self, *args):
        this = _sparta.new_SPARTA_ANN(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def init(self, *args, **kwargs):
        return _sparta.SPARTA_ANN_init(self, *args, **kwargs)

    def set_input_code(self, *args, **kwargs):
        return _sparta.SPARTA_ANN_set_input_code(self, *args, **kwargs)

    def loadWeights(self, *args, **kwargs):
        return _sparta.SPARTA_ANN_loadWeights(self, *args, **kwargs)

    def loadWeightBias3(self, *args, **kwargs):
        return _sparta.SPARTA_ANN_loadWeightBias3(self, *args, **kwargs)

    def runANN(self, *args, **kwargs):
        return _sparta.SPARTA_ANN_runANN(self, *args, **kwargs)

    def calcLevel1(self, *args, **kwargs):
        return _sparta.SPARTA_ANN_calcLevel1(self, *args, **kwargs)

    def runSpartaANN(self, *args, **kwargs):
        return _sparta.SPARTA_ANN_runSpartaANN(self, *args, **kwargs)

    def getConfidence(self, *args, **kwargs):
        return _sparta.SPARTA_ANN_getConfidence(self, *args, **kwargs)

    def getNumberMissCS(self, *args, **kwargs):
        return _sparta.SPARTA_ANN_getNumberMissCS(self, *args, **kwargs)
    __swig_destroy__ = _sparta.delete_SPARTA_ANN
    __del__ = lambda self: None

class SPARTA_ANNPtr(SPARTA_ANN):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SPARTA_ANN

SPARTA_ANN_swigregister = _sparta.SPARTA_ANN_swigregister
SPARTA_ANN_swigregister(SPARTA_ANN)

class GDB(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    GDBfileName = _swig_property(_sparta.GDB_GDBfileName_get, _sparta.GDB_GDBfileName_set)
    FORMAT_str = _swig_property(_sparta.GDB_FORMAT_str_get, _sparta.GDB_FORMAT_str_set)
    VARS_str = _swig_property(_sparta.GDB_VARS_str_get, _sparta.GDB_VARS_str_set)
    EMPTY = _swig_property(_sparta.GDB_EMPTY_get, _sparta.GDB_EMPTY_set)

    def __init__(self, *args):
        this = _sparta.new_GDB(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def entry(self, *args, **kwargs):
        return _sparta.GDB_entry(self, *args, **kwargs)

    def numEntries(self, *args, **kwargs):
        return _sparta.GDB_numEntries(self, *args, **kwargs)

    def remarks(self, *args, **kwargs):
        return _sparta.GDB_remarks(self, *args, **kwargs)

    def loadGDB(self, *args, **kwargs):
        return _sparta.GDB_loadGDB(self, *args, **kwargs)

    def saveGDB(self, *args):
        return _sparta.GDB_saveGDB(self, *args)

    def addVAR(self, *args, **kwargs):
        return _sparta.GDB_addVAR(self, *args, **kwargs)

    def setVAR(self, *args, **kwargs):
        return _sparta.GDB_setVAR(self, *args, **kwargs)

    def getVars(self, *args, **kwargs):
        return _sparta.GDB_getVars(self, *args, **kwargs)

    def setData(self, *args, **kwargs):
        return _sparta.GDB_setData(self, *args, **kwargs)

    def getData(self, *args, **kwargs):
        return _sparta.GDB_getData(self, *args, **kwargs)

    def data(self, *args, **kwargs):
        return _sparta.GDB_data(self, *args, **kwargs)

    def getEntry(self, *args):
        return _sparta.GDB_getEntry(self, *args)

    def getValues(self, *args, **kwargs):
        return _sparta.GDB_getValues(self, *args, **kwargs)

    def getEntries(self, *args, **kwargs):
        return _sparta.GDB_getEntries(self, *args, **kwargs)

    def setEntry(self, *args, **kwargs):
        return _sparta.GDB_setEntry(self, *args, **kwargs)

    def addEntry(self, *args, **kwargs):
        return _sparta.GDB_addEntry(self, *args, **kwargs)

    def addRemark(self, *args, **kwargs):
        return _sparta.GDB_addRemark(self, *args, **kwargs)

    def presetClass(self, *args, **kwargs):
        return _sparta.GDB_presetClass(self, *args, **kwargs)

    def checkFormat(self, *args, **kwargs):
        return _sparta.GDB_checkFormat(self, *args, **kwargs)

    def isVarFloat(self, *args):
        return _sparta.GDB_isVarFloat(self, *args)

    def isVarInt(self, *args):
        return _sparta.GDB_isVarInt(self, *args)

    def isVarString(self, *args):
        return _sparta.GDB_isVarString(self, *args)

    def VARS_str_parser(self, *args, **kwargs):
        return _sparta.GDB_VARS_str_parser(self, *args, **kwargs)

    def FORMAT_str_parser(self, *args, **kwargs):
        return _sparta.GDB_FORMAT_str_parser(self, *args, **kwargs)

    def set_plaintext(self, *args, **kwargs):
        return _sparta.GDB_set_plaintext(self, *args, **kwargs)
    isDigit = staticmethod(_sparta.GDB_isDigit)
    isSpace = staticmethod(_sparta.GDB_isSpace)
    section = staticmethod(_sparta.GDB_section)
    simplifyWhiteSpace = staticmethod(_sparta.GDB_simplifyWhiteSpace)
    __swig_destroy__ = _sparta.delete_GDB
    __del__ = lambda self: None

class GDBPtr(GDB):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = GDB

GDB_swigregister = _sparta.GDB_swigregister
GDB_swigregister(GDB)

def GDB_isDigit(*args, **kwargs):
    return _sparta.GDB_isDigit(*args, **kwargs)
GDB_isDigit = _sparta.GDB_isDigit

def GDB_isSpace(*args, **kwargs):
    return _sparta.GDB_isSpace(*args, **kwargs)
GDB_isSpace = _sparta.GDB_isSpace

def GDB_section(*args, **kwargs):
    return _sparta.GDB_section(*args, **kwargs)
GDB_section = _sparta.GDB_section

def GDB_simplifyWhiteSpace(*args, **kwargs):
    return _sparta.GDB_simplifyWhiteSpace(*args, **kwargs)
GDB_simplifyWhiteSpace = _sparta.GDB_simplifyWhiteSpace


s=SPARTA
SPARTA.TERM_DIHEDRAL = s.TERM_PHIM | s.TERM_PHI | s.TERM_PHIP | \
			 s.TERM_PSIM | s.TERM_PSI | s.TERM_PSIP | \
			 s.TERM_CHI1M | s.TERM_CHI1 | s.TERM_CHI1P | \
			 s.TERM_CHI2M | s.TERM_CHI2 | s.TERM_CHI2P
SPARTA.TERM_ALL = s.TERM_DIHEDRAL | s.TERM_RING | s.TERM_EFIELD | \
	            s.TERM_HBOND | s.TERM_ORDER

for name in ("DIHEDRAL",  "PHIM",  "PHI",  "PHIP",
	     "PSIM",  "PSI",  "PSIP",
	     "CHI1M", "CHI1", "CHI1P",
	     "CHI2M", "CHI2", "CHI2P", "ALL",
             "RING",  "EFIELD", "HBOND", "ORDER"):
  exec ("rc_ptr_SPARTA.TERM_%s = %d" %(name,eval("SPARTA.TERM_%s"%name)))



pyXplorHelp = help


def help(*args):
    return _sparta.help(*args)
help = _sparta.help


