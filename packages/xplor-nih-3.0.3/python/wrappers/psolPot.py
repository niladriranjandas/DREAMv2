# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_psolPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_psolPot')
    _psolPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_psolPot', [dirname(__file__)])
        except ImportError:
            import _psolPot
            return _psolPot
        try:
            _mod = imp.load_module('_psolPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _psolPot = swig_import_helper()
    del swig_import_helper
else:
    import _psolPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _psolPot.Modified_MOD_SELF
    MOD_SIMULATION = _psolPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _psolPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _psolPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _psolPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _psolPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _psolPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _psolPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _psolPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _psolPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_psolPot.ModifiedBase_modified_get, _psolPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_psolPot.ModifiedBase_registeredSimulations_get, _psolPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _psolPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _psolPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _psolPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _psolPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _psolPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_psolPot.VarEnsWeights_ensWeights_get, _psolPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_psolPot.VarEnsWeights_mult_get, _psolPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _psolPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _psolPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _psolPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _psolPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _psolPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _psolPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _psolPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _psolPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _psolPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _psolPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _psolPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _psolPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _psolPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _psolPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _psolPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _psolPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _psolPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _psolPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _psolPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _psolPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _psolPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _psolPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _psolPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _psolPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _psolPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _psolPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _psolPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _psolPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _psolPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _psolPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class PSolPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _psolPot.new_PSolPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _psolPot.PSolPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _psolPot.PSolPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _psolPot.PSolPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _psolPot.PSolPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _psolPot.PSolPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _psolPot.PSolPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _psolPot.PSolPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _psolPot.PSolPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _psolPot.delete_PSolPot
    __del__ = lambda self: None

    def selection(self, *args, **kwargs):
        return _psolPot.PSolPot_selection(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_addRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _psolPot.PSolPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _psolPot.PSolPot_energyMaybeDerivs1(self, *args, **kwargs)

    def findImportantAtoms(self, *args, **kwargs):
        return _psolPot.PSolPot_findImportantAtoms(self, *args, **kwargs)

    def AveSqObs(self, *args, **kwargs):
        return _psolPot.PSolPot_AveSqObs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _psolPot.PSolPot_rms(self, *args, **kwargs)

    def qFactor(self, *args, **kwargs):
        return _psolPot.PSolPot_qFactor(self, *args, **kwargs)

    def correlation(self, *args, **kwargs):
        return _psolPot.PSolPot_correlation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _psolPot.PSolPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _psolPot.PSolPot_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _psolPot.PSolPot_showViolations(self, *args, **kwargs)

    def surfInstance(self, *args, **kwargs):
        return _psolPot.PSolPot_surfInstance(self, *args, **kwargs)

    def tessellation(self, *args, **kwargs):
        return _psolPot.PSolPot_tessellation(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _psolPot.PSolPot_restraints(self, *args, **kwargs)

    def retessellateIfNecessary(self, *args, **kwargs):
        return _psolPot.PSolPot_retessellateIfNecessary(self, *args, **kwargs)

    def targetType(self, *args, **kwargs):
        return _psolPot.PSolPot_targetType(self, *args, **kwargs)

    def setTargetType(self, *args, **kwargs):
        return _psolPot.PSolPot_setTargetType(self, *args, **kwargs)

    def probeRadius(self, *args, **kwargs):
        return _psolPot.PSolPot_probeRadius(self, *args, **kwargs)

    def setProbeRadius(self, *args, **kwargs):
        return _psolPot.PSolPot_setProbeRadius(self, *args, **kwargs)

    def radiusOffset(self, *args, **kwargs):
        return _psolPot.PSolPot_radiusOffset(self, *args, **kwargs)

    def setRadiusOffset(self, *args, **kwargs):
        return _psolPot.PSolPot_setRadiusOffset(self, *args, **kwargs)

    def physicalAtoms(self, *args, **kwargs):
        return _psolPot.PSolPot_physicalAtoms(self, *args, **kwargs)

    def setPhysicalAtoms(self, *args, **kwargs):
        return _psolPot.PSolPot_setPhysicalAtoms(self, *args, **kwargs)

    def radii(self, *args, **kwargs):
        return _psolPot.PSolPot_radii(self, *args, **kwargs)

    def setRadii(self, *args, **kwargs):
        return _psolPot.PSolPot_setRadii(self, *args, **kwargs)

    def atomContribThreshold(self, *args, **kwargs):
        return _psolPot.PSolPot_atomContribThreshold(self, *args, **kwargs)

    def setAtomContribThreshold(self, *args, **kwargs):
        return _psolPot.PSolPot_setAtomContribThreshold(self, *args, **kwargs)

    def mScale(self, *args, **kwargs):
        return _psolPot.PSolPot_mScale(self, *args, **kwargs)

    def setMScale(self, *args, **kwargs):
        return _psolPot.PSolPot_setMScale(self, *args, **kwargs)

    def hardExp(self, *args, **kwargs):
        return _psolPot.PSolPot_hardExp(self, *args, **kwargs)

    def setHardExp(self, *args, **kwargs):
        return _psolPot.PSolPot_setHardExp(self, *args, **kwargs)

    def rSwitch(self, *args, **kwargs):
        return _psolPot.PSolPot_rSwitch(self, *args, **kwargs)

    def setRSwitch(self, *args, **kwargs):
        return _psolPot.PSolPot_setRSwitch(self, *args, **kwargs)

    def softExp(self, *args, **kwargs):
        return _psolPot.PSolPot_softExp(self, *args, **kwargs)

    def setSoftExp(self, *args, **kwargs):
        return _psolPot.PSolPot_setSoftExp(self, *args, **kwargs)

    def asympSlope(self, *args, **kwargs):
        return _psolPot.PSolPot_asympSlope(self, *args, **kwargs)

    def setAsympSlope(self, *args, **kwargs):
        return _psolPot.PSolPot_setAsympSlope(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _psolPot.PSolPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _psolPot.PSolPot_setVerbose(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_setShowAllRestraints(self, *args, **kwargs)

    def tauc(self, *args, **kwargs):
        return _psolPot.PSolPot_tauc(self, *args, **kwargs)

    def setTauC(self, *args, **kwargs):
        return _psolPot.PSolPot_setTauC(self, *args, **kwargs)

    def freqI(self, *args, **kwargs):
        return _psolPot.PSolPot_freqI(self, *args, **kwargs)

    def setFreqI(self, *args, **kwargs):
        return _psolPot.PSolPot_setFreqI(self, *args, **kwargs)

    def sqn(self, *args, **kwargs):
        return _psolPot.PSolPot_sqn(self, *args, **kwargs)

    def setSqn(self, *args, **kwargs):
        return _psolPot.PSolPot_setSqn(self, *args, **kwargs)

    def gfac(self, *args, **kwargs):
        return _psolPot.PSolPot_gfac(self, *args, **kwargs)

    def setGfac(self, *args, **kwargs):
        return _psolPot.PSolPot_setGfac(self, *args, **kwargs)

    def gammaI(self, *args, **kwargs):
        return _psolPot.PSolPot_gammaI(self, *args, **kwargs)

    def setGammaI(self, *args, **kwargs):
        return _psolPot.PSolPot_setGammaI(self, *args, **kwargs)

    def weightMax(self, *args, **kwargs):
        return _psolPot.PSolPot_weightMax(self, *args, **kwargs)

    def setWeightMax(self, *args, **kwargs):
        return _psolPot.PSolPot_setWeightMax(self, *args, **kwargs)

    def rmin(self, *args, **kwargs):
        return _psolPot.PSolPot_rmin(self, *args, **kwargs)

    def setRmin(self, *args, **kwargs):
        return _psolPot.PSolPot_setRmin(self, *args, **kwargs)

    def centerOffset(self, *args, **kwargs):
        return _psolPot.PSolPot_centerOffset(self, *args, **kwargs)

    def setCenterOffset(self, *args, **kwargs):
        return _psolPot.PSolPot_setCenterOffset(self, *args, **kwargs)

    def radiusNoise(self, *args, **kwargs):
        return _psolPot.PSolPot_radiusNoise(self, *args, **kwargs)

    def setRadiusNoise(self, *args, **kwargs):
        return _psolPot.PSolPot_setRadiusNoise(self, *args, **kwargs)

    def rho0(self, *args, **kwargs):
        return _psolPot.PSolPot_rho0(self, *args, **kwargs)

    def setRho0(self, *args, **kwargs):
        return _psolPot.PSolPot_setRho0(self, *args, **kwargs)

    def tcmax(self, *args, **kwargs):
        return _psolPot.PSolPot_tcmax(self, *args, **kwargs)

    def setTcMax(self, *args, **kwargs):
        return _psolPot.PSolPot_setTcMax(self, *args, **kwargs)

    def tcmin(self, *args, **kwargs):
        return _psolPot.PSolPot_tcmin(self, *args, **kwargs)

    def setTcMin(self, *args, **kwargs):
        return _psolPot.PSolPot_setTcMin(self, *args, **kwargs)

    def taAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_taAtom(self, *args, **kwargs)

    def setTaAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_setTaAtom(self, *args, **kwargs)

    def tbAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_tbAtom(self, *args, **kwargs)

    def setTbAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_setTbAtom(self, *args, **kwargs)

    def toAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_toAtom(self, *args, **kwargs)

    def setToAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_setToAtom(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _psolPot.PSolPot_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _psolPot.PSolPot_setPotType(self, *args, **kwargs)

    def rlxType(self, *args, **kwargs):
        return _psolPot.PSolPot_rlxType(self, *args, **kwargs)

    def setRlxType(self, *args, **kwargs):
        return _psolPot.PSolPot_setRlxType(self, *args, **kwargs)

    def funType(self, *args, **kwargs):
        return _psolPot.PSolPot_funType(self, *args, **kwargs)

    def setFunType(self, *args, **kwargs):
        return _psolPot.PSolPot_setFunType(self, *args, **kwargs)

    def sclType(self, *args, **kwargs):
        return _psolPot.PSolPot_sclType(self, *args, **kwargs)

    def setSclType(self, *args, **kwargs):
        return _psolPot.PSolPot_setSclType(self, *args, **kwargs)

    def fixTauc(self, *args, **kwargs):
        return _psolPot.PSolPot_fixTauc(self, *args, **kwargs)

    def setFixTauc(self, *args, **kwargs):
        return _psolPot.PSolPot_setFixTauc(self, *args, **kwargs)

    def coeff(self, *args, **kwargs):
        return _psolPot.PSolPot_coeff(self, *args, **kwargs)

    def kForOpt(self, *args, **kwargs):
        return _psolPot.PSolPot_kForOpt(self, *args, **kwargs)

    def setCoeff(self, *args, **kwargs):
        return _psolPot.PSolPot_setCoeff(self, *args, **kwargs)

    def updateRadii(self, *args, **kwargs):
        return _psolPot.PSolPot_updateRadii(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _psolPot.PSolPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _psolPot.PSolPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _psolPot.PSolPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _psolPot.PSolPot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _psolPot.PSolPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _psolPot.PSolPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _psolPot.PSolPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _psolPot.PSolPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _psolPot.PSolPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _psolPot.PSolPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _psolPot.PSolPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _psolPot.PSolPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _psolPot.PSolPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _psolPot.PSolPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _psolPot.PSolPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _psolPot.PSolPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _psolPot.PSolPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _psolPot.PSolPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _psolPot.PSolPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _psolPot.PSolPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _psolPot.PSolPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _psolPot.PSolPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _psolPot.PSolPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _psolPot.PSolPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _psolPot.PSolPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _psolPot.PSolPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _psolPot.PSolPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _psolPot.PSolPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _psolPot.PSolPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _psolPot.PSolPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _psolPot.PSolPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_psolPot.PSolPot_instanceData__get, _psolPot.PSolPot_instanceData__set)
    instanceDataCreate = _swig_property(_psolPot.PSolPot_instanceDataCreate_get, _psolPot.PSolPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_psolPot.PSolPot_instanceDataCleanup_get, _psolPot.PSolPot_instanceDataCleanup_set)
    modified = _swig_property(_psolPot.PSolPot_modified_get, _psolPot.PSolPot_modified_set)
    registeredSimulations = _swig_property(_psolPot.PSolPot_registeredSimulations_get, _psolPot.PSolPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _psolPot.PSolPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _psolPot.PSolPot_unRegister(self, *args, **kwargs)

class PSolPotPtr(PSolPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PSolPot

PSolPot_swigregister = _psolPot.PSolPot_swigregister
PSolPot_swigregister(PSolPot)


realPSolPot = PSolPot
def PSolPot(*args):
    from potProxy import PotProxy
    return PotProxy( realPSolPot(*args) )

class Restraint_PSolPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _psolPot.Restraint_PSolPot_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _psolPot.new_Restraint_PSolPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _psolPot.Restraint_PSolPot_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _psolPot.Restraint_PSolPot_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _psolPot.Restraint_PSolPot_setName(self, *args, **kwargs)
    __swig_destroy__ = _psolPot.delete_Restraint_PSolPot
    __del__ = lambda self: None

class Restraint_PSolPotPtr(Restraint_PSolPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_PSolPot

Restraint_PSolPot_swigregister = _psolPot.Restraint_PSolPot_swigregister
Restraint_PSolPot_swigregister(Restraint_PSolPot)

class PSolRestraint(Restraint_PSolPot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    LESS = _psolPot.PSolRestraint_LESS
    GREATER = _psolPot.PSolRestraint_GREATER
    INSIDE = _psolPot.PSolRestraint_INSIDE
    sel1 = _swig_property(_psolPot.PSolRestraint_sel1_get, _psolPot.PSolRestraint_sel1_set)
    importantAtoms = _swig_property(_psolPot.PSolRestraint_importantAtoms_get, _psolPot.PSolRestraint_importantAtoms_set)
    missingAtomFactor = _swig_property(_psolPot.PSolRestraint_missingAtomFactor_get, _psolPot.PSolRestraint_missingAtomFactor_set)
    triSpeedupFactor = _swig_property(_psolPot.PSolRestraint_triSpeedupFactor_get, _psolPot.PSolRestraint_triSpeedupFactor_set)

    def __init__(self, *args, **kwargs):
        this = _psolPot.new_PSolRestraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _psolPot.delete_PSolRestraint
    __del__ = lambda self: None

    def ok(self, *args, **kwargs):
        return _psolPot.PSolRestraint_ok(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _psolPot.PSolRestraint_name(self, *args, **kwargs)

    def status(self, *args, **kwargs):
        return _psolPot.PSolRestraint_status(self, *args, **kwargs)

    def sel(self, *args, **kwargs):
        return _psolPot.PSolRestraint_sel(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _psolPot.PSolRestraint_calcd(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _psolPot.PSolRestraint_obs(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _psolPot.PSolRestraint_setObs(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _psolPot.PSolRestraint_err(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _psolPot.PSolRestraint_setErr(self, *args, **kwargs)

    def weight(self, *args, **kwargs):
        return _psolPot.PSolRestraint_weight(self, *args, **kwargs)

    def setWeight(self, *args, **kwargs):
        return _psolPot.PSolRestraint_setWeight(self, *args, **kwargs)

    def itgIr6(self, *args, **kwargs):
        return _psolPot.PSolRestraint_itgIr6(self, *args, **kwargs)

    def gammaB(self, *args, **kwargs):
        return _psolPot.PSolRestraint_gammaB(self, *args, **kwargs)

    def gB(self, *args, **kwargs):
        return _psolPot.PSolRestraint_gB(self, *args, **kwargs)

    def gBSigma(self, *args, **kwargs):
        return _psolPot.PSolRestraint_gBSigma(self, *args, **kwargs)

    def sumAB(self, *args, **kwargs):
        return _psolPot.PSolRestraint_sumAB(self, *args, **kwargs)

    def difAB(self, *args, **kwargs):
        return _psolPot.PSolRestraint_difAB(self, *args, **kwargs)

    def sumCalc(self, *args, **kwargs):
        return _psolPot.PSolRestraint_sumCalc(self, *args, **kwargs)

    def sumObs(self, *args, **kwargs):
        return _psolPot.PSolRestraint_sumObs(self, *args, **kwargs)

    def smallObs(self, *args, **kwargs):
        return _psolPot.PSolRestraint_smallObs(self, *args, **kwargs)

    def largeObs(self, *args, **kwargs):
        return _psolPot.PSolRestraint_largeObs(self, *args, **kwargs)

    def smallCalc(self, *args, **kwargs):
        return _psolPot.PSolRestraint_smallCalc(self, *args, **kwargs)

    def largeCalc(self, *args, **kwargs):
        return _psolPot.PSolRestraint_largeCalc(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _psolPot.PSolRestraint_comment(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        return _psolPot.PSolRestraint___eq__(self, *args, **kwargs)

    def kdfsb(self, *args, **kwargs):
        return _psolPot.PSolRestraint_kdfsb(self, *args, **kwargs)

    def dtdp(self, *args, **kwargs):
        return _psolPot.PSolRestraint_dtdp(self, *args, **kwargs)

    def setClockDeriv(self, *args, **kwargs):
        return _psolPot.PSolRestraint_setClockDeriv(self, *args, **kwargs)

    def calcEderivClock(self, *args, **kwargs):
        return _psolPot.PSolRestraint_calcEderivClock(self, *args, **kwargs)

    def surfaceIntegration(self, *args, **kwargs):
        return _psolPot.PSolRestraint_surfaceIntegration(self, *args, **kwargs)

    def calcGandGderiv(self, *args, **kwargs):
        return _psolPot.PSolRestraint_calcGandGderiv(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _psolPot.PSolRestraint_calcContrib(self, *args, **kwargs)

    def calcDiff(self, *args, **kwargs):
        return _psolPot.PSolRestraint_calcDiff(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _psolPot.PSolRestraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _psolPot.PSolRestraint_deriv(self, *args, **kwargs)

    def asString(self, *args, **kwargs):
        return _psolPot.PSolRestraint_asString(self, *args, **kwargs)

    def minDist(self, *args, **kwargs):
        return _psolPot.PSolRestraint_minDist(self, *args, **kwargs)

class PSolRestraintPtr(PSolRestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PSolRestraint

PSolRestraint_swigregister = _psolPot.PSolRestraint_swigregister
PSolRestraint_swigregister(PSolRestraint)

class PSolPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SOFT = _psolPot.PSolPot_LetterClass_SOFT
    HARD = _psolPot.PSolPot_LetterClass_HARD
    R2DD = _psolPot.PSolPot_LetterClass_R2DD
    R1DD = _psolPot.PSolPot_LetterClass_R1DD
    SQUARE = _psolPot.PSolPot_LetterClass_SQUARE
    HARMONIC = _psolPot.PSolPot_LetterClass_HARMONIC
    CONST = _psolPot.PSolPot_LetterClass_CONST
    SIGMA = _psolPot.PSolPot_LetterClass_SIGMA
    OBSIG = _psolPot.PSolPot_LetterClass_OBSIG
    GAMMA = _psolPot.PSolPot_LetterClass_GAMMA
    CORRELATION = _psolPot.PSolPot_LetterClass_CORRELATION

    def __init__(self, *args, **kwargs):
        this = _psolPot.new_PSolPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _psolPot.delete_PSolPot_LetterClass
    __del__ = lambda self: None

    def selection(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_selection(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_addRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def findImportantAtoms(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_findImportantAtoms(self, *args, **kwargs)

    def AveSqObs(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_AveSqObs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_rms(self, *args, **kwargs)

    def qFactor(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_qFactor(self, *args, **kwargs)

    def correlation(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_correlation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_showViolations(self, *args, **kwargs)

    def surfInstance(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_surfInstance(self, *args, **kwargs)

    def tessellation(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_tessellation(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_restraints(self, *args, **kwargs)

    def retessellateIfNecessary(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_retessellateIfNecessary(self, *args, **kwargs)

    def targetType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_targetType(self, *args, **kwargs)

    def setTargetType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setTargetType(self, *args, **kwargs)

    def probeRadius(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_probeRadius(self, *args, **kwargs)

    def setProbeRadius(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setProbeRadius(self, *args, **kwargs)

    def radiusOffset(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_radiusOffset(self, *args, **kwargs)

    def setRadiusOffset(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setRadiusOffset(self, *args, **kwargs)

    def physicalAtoms(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_physicalAtoms(self, *args, **kwargs)

    def setPhysicalAtoms(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setPhysicalAtoms(self, *args, **kwargs)

    def radii(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_radii(self, *args, **kwargs)

    def setRadii(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setRadii(self, *args, **kwargs)

    def atomContribThreshold(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_atomContribThreshold(self, *args, **kwargs)

    def setAtomContribThreshold(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setAtomContribThreshold(self, *args, **kwargs)

    def mScale(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_mScale(self, *args, **kwargs)

    def setMScale(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setMScale(self, *args, **kwargs)

    def hardExp(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_hardExp(self, *args, **kwargs)

    def setHardExp(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setHardExp(self, *args, **kwargs)

    def rSwitch(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_rSwitch(self, *args, **kwargs)

    def setRSwitch(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setRSwitch(self, *args, **kwargs)

    def softExp(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_softExp(self, *args, **kwargs)

    def setSoftExp(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setSoftExp(self, *args, **kwargs)

    def asympSlope(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_asympSlope(self, *args, **kwargs)

    def setAsympSlope(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setAsympSlope(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setVerbose(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def tauc(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_tauc(self, *args, **kwargs)

    def setTauC(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setTauC(self, *args, **kwargs)

    def freqI(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_freqI(self, *args, **kwargs)

    def setFreqI(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setFreqI(self, *args, **kwargs)

    def sqn(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_sqn(self, *args, **kwargs)

    def setSqn(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setSqn(self, *args, **kwargs)

    def gfac(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_gfac(self, *args, **kwargs)

    def setGfac(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setGfac(self, *args, **kwargs)

    def gammaI(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_gammaI(self, *args, **kwargs)

    def setGammaI(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setGammaI(self, *args, **kwargs)

    def weightMax(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_weightMax(self, *args, **kwargs)

    def setWeightMax(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setWeightMax(self, *args, **kwargs)

    def rmin(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_rmin(self, *args, **kwargs)

    def setRmin(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setRmin(self, *args, **kwargs)

    def centerOffset(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_centerOffset(self, *args, **kwargs)

    def setCenterOffset(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setCenterOffset(self, *args, **kwargs)

    def radiusNoise(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_radiusNoise(self, *args, **kwargs)

    def setRadiusNoise(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setRadiusNoise(self, *args, **kwargs)

    def rho0(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_rho0(self, *args, **kwargs)

    def setRho0(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setRho0(self, *args, **kwargs)

    def tcmax(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_tcmax(self, *args, **kwargs)

    def setTcMax(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setTcMax(self, *args, **kwargs)

    def tcmin(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_tcmin(self, *args, **kwargs)

    def setTcMin(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setTcMin(self, *args, **kwargs)

    def taAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_taAtom(self, *args, **kwargs)

    def setTaAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setTaAtom(self, *args, **kwargs)

    def tbAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_tbAtom(self, *args, **kwargs)

    def setTbAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setTbAtom(self, *args, **kwargs)

    def toAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_toAtom(self, *args, **kwargs)

    def setToAtom(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setToAtom(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setPotType(self, *args, **kwargs)

    def rlxType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_rlxType(self, *args, **kwargs)

    def setRlxType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setRlxType(self, *args, **kwargs)

    def funType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_funType(self, *args, **kwargs)

    def setFunType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setFunType(self, *args, **kwargs)

    def sclType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_sclType(self, *args, **kwargs)

    def setSclType(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setSclType(self, *args, **kwargs)

    def fixTauc(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_fixTauc(self, *args, **kwargs)

    def setFixTauc(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setFixTauc(self, *args, **kwargs)

    def coeff(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_coeff(self, *args, **kwargs)

    def kForOpt(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_kForOpt(self, *args, **kwargs)

    def setCoeff(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_setCoeff(self, *args, **kwargs)

    def updateRadii(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_updateRadii(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _psolPot.PSolPot_LetterClass_help(self, *args, **kwargs)

class PSolPot_LetterClassPtr(PSolPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PSolPot_LetterClass

PSolPot_LetterClass_swigregister = _psolPot.PSolPot_LetterClass_swigregister
PSolPot_LetterClass_swigregister(PSolPot_LetterClass)

class rc_ptr_PSolRestraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _psolPot.new_rc_ptr_PSolRestraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _psolPot.delete_rc_ptr_PSolRestraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_release(self, *args, **kwargs)
    sel1 = _swig_property(_psolPot.rc_ptr_PSolRestraint_sel1_get, _psolPot.rc_ptr_PSolRestraint_sel1_set)
    importantAtoms = _swig_property(_psolPot.rc_ptr_PSolRestraint_importantAtoms_get, _psolPot.rc_ptr_PSolRestraint_importantAtoms_set)
    missingAtomFactor = _swig_property(_psolPot.rc_ptr_PSolRestraint_missingAtomFactor_get, _psolPot.rc_ptr_PSolRestraint_missingAtomFactor_set)
    triSpeedupFactor = _swig_property(_psolPot.rc_ptr_PSolRestraint_triSpeedupFactor_get, _psolPot.rc_ptr_PSolRestraint_triSpeedupFactor_set)

    def ok(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_ok(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_name(self, *args, **kwargs)

    def status(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_status(self, *args, **kwargs)

    def sel(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_sel(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_calcd(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_obs(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_setObs(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_err(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_setErr(self, *args, **kwargs)

    def weight(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_weight(self, *args, **kwargs)

    def setWeight(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_setWeight(self, *args, **kwargs)

    def itgIr6(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_itgIr6(self, *args, **kwargs)

    def gammaB(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_gammaB(self, *args, **kwargs)

    def gB(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_gB(self, *args, **kwargs)

    def gBSigma(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_gBSigma(self, *args, **kwargs)

    def sumAB(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_sumAB(self, *args, **kwargs)

    def difAB(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_difAB(self, *args, **kwargs)

    def sumCalc(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_sumCalc(self, *args, **kwargs)

    def sumObs(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_sumObs(self, *args, **kwargs)

    def smallObs(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_smallObs(self, *args, **kwargs)

    def largeObs(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_largeObs(self, *args, **kwargs)

    def smallCalc(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_smallCalc(self, *args, **kwargs)

    def largeCalc(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_largeCalc(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_comment(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint___eq__(self, *args, **kwargs)

    def kdfsb(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_kdfsb(self, *args, **kwargs)

    def dtdp(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_dtdp(self, *args, **kwargs)

    def setClockDeriv(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_setClockDeriv(self, *args, **kwargs)

    def calcEderivClock(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_calcEderivClock(self, *args, **kwargs)

    def surfaceIntegration(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_surfaceIntegration(self, *args, **kwargs)

    def calcGandGderiv(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_calcGandGderiv(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_calcContrib(self, *args, **kwargs)

    def calcDiff(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_calcDiff(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_deriv(self, *args, **kwargs)

    def asString(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_asString(self, *args, **kwargs)

    def minDist(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_minDist(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_violated(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _psolPot.rc_ptr_PSolRestraint_setName(self, *args, **kwargs)

class rc_ptr_PSolRestraintPtr(rc_ptr_PSolRestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_PSolRestraint

rc_ptr_PSolRestraint_swigregister = _psolPot.rc_ptr_PSolRestraint_swigregister
rc_ptr_PSolRestraint_swigregister(rc_ptr_PSolRestraint)

class CDSList_PSolRestraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _psolPot.CDSList_PSolRestraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _psolPot.new_CDSList_PSolRestraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _psolPot.CDSList_PSolRestraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _psolPot.CDSList_PSolRestraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _psolPot.CDSList_PSolRestraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _psolPot.CDSList_PSolRestraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _psolPot.CDSList_PSolRestraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _psolPot.CDSList_PSolRestraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _psolPot.CDSList_PSolRestraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _psolPot.CDSList_PSolRestraint_help(self, *args, **kwargs)
    __swig_destroy__ = _psolPot.delete_CDSList_PSolRestraint
    __del__ = lambda self: None

class CDSList_PSolRestraintPtr(CDSList_PSolRestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_PSolRestraint

CDSList_PSolRestraint_swigregister = _psolPot.CDSList_PSolRestraint_swigregister
CDSList_PSolRestraint_swigregister(CDSList_PSolRestraint)


import surfTessellation


pyXplorHelp = help


def help(*args):
    return _psolPot.help(*args)
help = _psolPot.help


