# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pasdPeak')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pasdPeak')
    _pasdPeak = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pasdPeak', [dirname(__file__)])
        except ImportError:
            import _pasdPeak
            return _pasdPeak
        try:
            _mod = imp.load_module('_pasdPeak', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pasdPeak = swig_import_helper()
    del swig_import_helper
else:
    import _pasdPeak
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Peak(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pasdPeak.new_Peak(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pasdPeak.delete_Peak
    __del__ = lambda self: None

    def name(self, *args, **kwargs):
        return _pasdPeak.Peak_name(self, *args, **kwargs)

    def note(self, *args, **kwargs):
        return _pasdPeak.Peak_note(self, *args, **kwargs)

    def setNote(self, *args, **kwargs):
        return _pasdPeak.Peak_setNote(self, *args, **kwargs)

    def appendToNote(self, *args, **kwargs):
        return _pasdPeak.Peak_appendToNote(self, *args, **kwargs)

    def upBound(self, *args, **kwargs):
        return _pasdPeak.Peak_upBound(self, *args, **kwargs)

    def setUpBound(self, *args, **kwargs):
        return _pasdPeak.Peak_setUpBound(self, *args, **kwargs)

    def lowBound(self, *args, **kwargs):
        return _pasdPeak.Peak_lowBound(self, *args, **kwargs)

    def setLowBound(self, *args, **kwargs):
        return _pasdPeak.Peak_setLowBound(self, *args, **kwargs)

    def resetFromProtonShift(self, *args, **kwargs):
        return _pasdPeak.Peak_resetFromProtonShift(self, *args, **kwargs)

    def hasFromProtonShift(self, *args, **kwargs):
        return _pasdPeak.Peak_hasFromProtonShift(self, *args, **kwargs)

    def fromProtonShift(self, *args, **kwargs):
        return _pasdPeak.Peak_fromProtonShift(self, *args, **kwargs)

    def setFromProtonShift(self, *args, **kwargs):
        return _pasdPeak.Peak_setFromProtonShift(self, *args, **kwargs)

    def resetToProtonShift(self, *args, **kwargs):
        return _pasdPeak.Peak_resetToProtonShift(self, *args, **kwargs)

    def hasToProtonShift(self, *args, **kwargs):
        return _pasdPeak.Peak_hasToProtonShift(self, *args, **kwargs)

    def toProtonShift(self, *args, **kwargs):
        return _pasdPeak.Peak_toProtonShift(self, *args, **kwargs)

    def setToProtonShift(self, *args, **kwargs):
        return _pasdPeak.Peak_setToProtonShift(self, *args, **kwargs)

    def resetFromHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.Peak_resetFromHeavyatomShift(self, *args, **kwargs)

    def hasFromHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.Peak_hasFromHeavyatomShift(self, *args, **kwargs)

    def fromHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.Peak_fromHeavyatomShift(self, *args, **kwargs)

    def setFromHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.Peak_setFromHeavyatomShift(self, *args, **kwargs)

    def resetToHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.Peak_resetToHeavyatomShift(self, *args, **kwargs)

    def hasToHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.Peak_hasToHeavyatomShift(self, *args, **kwargs)

    def toHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.Peak_toHeavyatomShift(self, *args, **kwargs)

    def setToHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.Peak_setToHeavyatomShift(self, *args, **kwargs)

    def resetIntensity(self, *args, **kwargs):
        return _pasdPeak.Peak_resetIntensity(self, *args, **kwargs)

    def hasIntensity(self, *args, **kwargs):
        return _pasdPeak.Peak_hasIntensity(self, *args, **kwargs)

    def intensity(self, *args, **kwargs):
        return _pasdPeak.Peak_intensity(self, *args, **kwargs)

    def setIntensity(self, *args, **kwargs):
        return _pasdPeak.Peak_setIntensity(self, *args, **kwargs)

    def peakAssignments(self, *args, **kwargs):
        return _pasdPeak.Peak_peakAssignments(self, *args, **kwargs)

    def addPeakAssignment(self, *args, **kwargs):
        return _pasdPeak.Peak_addPeakAssignment(self, *args, **kwargs)

    def removePeakAssignmentNamed(self, *args, **kwargs):
        return _pasdPeak.Peak_removePeakAssignmentNamed(self, *args, **kwargs)

    def removeAllPeakAssignments(self, *args, **kwargs):
        return _pasdPeak.Peak_removeAllPeakAssignments(self, *args, **kwargs)

    def hasPeakAssignmentNamed(self, *args, **kwargs):
        return _pasdPeak.Peak_hasPeakAssignmentNamed(self, *args, **kwargs)

    def peakAssignmentNamed(self, *args, **kwargs):
        return _pasdPeak.Peak_peakAssignmentNamed(self, *args, **kwargs)

    def numPeakAssignments(self, *args, **kwargs):
        return _pasdPeak.Peak_numPeakAssignments(self, *args, **kwargs)

    def isAssigned(self, *args, **kwargs):
        return _pasdPeak.Peak_isAssigned(self, *args, **kwargs)

    def fromShiftAssignments(self, *args, **kwargs):
        return _pasdPeak.Peak_fromShiftAssignments(self, *args, **kwargs)

    def toShiftAssignments(self, *args, **kwargs):
        return _pasdPeak.Peak_toShiftAssignments(self, *args, **kwargs)

    def numFromShiftAssignments(self, *args, **kwargs):
        return _pasdPeak.Peak_numFromShiftAssignments(self, *args, **kwargs)

    def numToShiftAssignments(self, *args, **kwargs):
        return _pasdPeak.Peak_numToShiftAssignments(self, *args, **kwargs)

    def addShiftAssignment(self, *args, **kwargs):
        return _pasdPeak.Peak_addShiftAssignment(self, *args, **kwargs)

    def removeShiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPeak.Peak_removeShiftAssignmentNamed(self, *args, **kwargs)

    def removeAllShiftAssignments(self, *args, **kwargs):
        return _pasdPeak.Peak_removeAllShiftAssignments(self, *args, **kwargs)

    def shiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPeak.Peak_shiftAssignmentNamed(self, *args, **kwargs)

    def hasShiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPeak.Peak_hasShiftAssignmentNamed(self, *args, **kwargs)

    def peakAssignmentsWithShiftAssignmentNamed(self, *args, **kwargs):
        return _pasdPeak.Peak_peakAssignmentsWithShiftAssignmentNamed(self, *args, **kwargs)

    def chosenPeakAssignment(self, *args, **kwargs):
        return _pasdPeak.Peak_chosenPeakAssignment(self, *args, **kwargs)

    def isCrowded(self, *args, **kwargs):
        return _pasdPeak.Peak_isCrowded(self, *args, **kwargs)

    def setIsCrowded(self, *args, **kwargs):
        return _pasdPeak.Peak_setIsCrowded(self, *args, **kwargs)

    def setNotCrowded(self, *args, **kwargs):
        return _pasdPeak.Peak_setNotCrowded(self, *args, **kwargs)

    def updatePrimarySeqDist(self, *args, **kwargs):
        return _pasdPeak.Peak_updatePrimarySeqDist(self, *args, **kwargs)

    def primarySeqDist(self, *args, **kwargs):
        return _pasdPeak.Peak_primarySeqDist(self, *args, **kwargs)

    def isIntraresidue(self, *args, **kwargs):
        return _pasdPeak.Peak_isIntraresidue(self, *args, **kwargs)

    def isSequential(self, *args, **kwargs):
        return _pasdPeak.Peak_isSequential(self, *args, **kwargs)

    def isShortRange(self, *args, **kwargs):
        return _pasdPeak.Peak_isShortRange(self, *args, **kwargs)

    def isLongRange(self, *args, **kwargs):
        return _pasdPeak.Peak_isLongRange(self, *args, **kwargs)

    def isIntermolecular(self, *args, **kwargs):
        return _pasdPeak.Peak_isIntermolecular(self, *args, **kwargs)

    def lowestViolation(self, *args, **kwargs):
        return _pasdPeak.Peak_lowestViolation(self, *args, **kwargs)

    def prevLikelihood(self, *args, **kwargs):
        return _pasdPeak.Peak_prevLikelihood(self, *args, **kwargs)

    def lowestViolationsPrimarySeqDist(self, *args, **kwargs):
        return _pasdPeak.Peak_lowestViolationsPrimarySeqDist(self, *args, **kwargs)

    def isGood(self, *args, **kwargs):
        return _pasdPeak.Peak_isGood(self, *args, **kwargs)

    def isActive(self, *args, **kwargs):
        return _pasdPeak.Peak_isActive(self, *args, **kwargs)

    def isInactive(self, *args, **kwargs):
        return _pasdPeak.Peak_isInactive(self, *args, **kwargs)

    def numActivePeakAssigns(self, *args, **kwargs):
        return _pasdPeak.Peak_numActivePeakAssigns(self, *args, **kwargs)

    def activateAllPeakAssigns(self, *args, **kwargs):
        return _pasdPeak.Peak_activateAllPeakAssigns(self, *args, **kwargs)

    def inactivateAllPeakAssigns(self, *args, **kwargs):
        return _pasdPeak.Peak_inactivateAllPeakAssigns(self, *args, **kwargs)

    def updateActivation(self, *args, **kwargs):
        return _pasdPeak.Peak_updateActivation(self, *args, **kwargs)

    def updateInWrongNeighborhood(self, *args, **kwargs):
        return _pasdPeak.Peak_updateInWrongNeighborhood(self, *args, **kwargs)

    def updateShiftAssignmentActivePeakPositions(self, *args, **kwargs):
        return _pasdPeak.Peak_updateShiftAssignmentActivePeakPositions(self, *args, **kwargs)

    def resetSavedState(self, *args, **kwargs):
        return _pasdPeak.Peak_resetSavedState(self, *args, **kwargs)

    def saveCurrentState(self, *args, **kwargs):
        return _pasdPeak.Peak_saveCurrentState(self, *args, **kwargs)

    def revertToSavedState(self, *args, **kwargs):
        return _pasdPeak.Peak_revertToSavedState(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _pasdPeak.Peak_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _pasdPeak.Peak_calcEnergyAndDerivs(self, *args, **kwargs)

    def peakAssignments_sorted(self, *args, **kwargs):
        return _pasdPeak.Peak_peakAssignments_sorted(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPeak.Peak_help(self, *args, **kwargs)

class PeakPtr(Peak):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Peak

Peak_swigregister = _pasdPeak.Peak_swigregister
Peak_swigregister(Peak)

class PeakAssignment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pasdPeak.new_PeakAssignment(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pasdPeak.delete_PeakAssignment
    __del__ = lambda self: None

    def name(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_name(self, *args, **kwargs)

    def note(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_note(self, *args, **kwargs)

    def setNote(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setNote(self, *args, **kwargs)

    def appendToNote(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_appendToNote(self, *args, **kwargs)

    def setToAssignment(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setToAssignment(self, *args, **kwargs)

    def setFromAssignment(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setFromAssignment(self, *args, **kwargs)

    def toAssignment(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_toAssignment(self, *args, **kwargs)

    def fromAssignment(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_fromAssignment(self, *args, **kwargs)

    def toAssignmentName(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_toAssignmentName(self, *args, **kwargs)

    def fromAssignmentName(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_fromAssignmentName(self, *args, **kwargs)

    def toProtonSelection(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_toProtonSelection(self, *args, **kwargs)

    def fromProtonSelection(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_fromProtonSelection(self, *args, **kwargs)

    def setUpBoundCorrection(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setUpBoundCorrection(self, *args, **kwargs)

    def upBoundCorrection(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_upBoundCorrection(self, *args, **kwargs)

    def setLowBoundCorrection(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setLowBoundCorrection(self, *args, **kwargs)

    def lowBoundCorrection(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_lowBoundCorrection(self, *args, **kwargs)

    def hasFromProtonShift(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_hasFromProtonShift(self, *args, **kwargs)

    def fromProtonShift(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_fromProtonShift(self, *args, **kwargs)

    def hasToProtonShift(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_hasToProtonShift(self, *args, **kwargs)

    def toProtonShift(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_toProtonShift(self, *args, **kwargs)

    def hasFromHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_hasFromHeavyatomShift(self, *args, **kwargs)

    def fromHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_fromHeavyatomShift(self, *args, **kwargs)

    def hasToHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_hasToHeavyatomShift(self, *args, **kwargs)

    def toHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_toHeavyatomShift(self, *args, **kwargs)

    def resetUnfoldedFromProtonPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_resetUnfoldedFromProtonPeakPosition(self, *args, **kwargs)

    def hasUnfoldedFromProtonPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_hasUnfoldedFromProtonPeakPosition(self, *args, **kwargs)

    def unfoldedFromProtonPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_unfoldedFromProtonPeakPosition(self, *args, **kwargs)

    def setUnfoldedFromProtonPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setUnfoldedFromProtonPeakPosition(self, *args, **kwargs)

    def resetUnfoldedFromHeavyatomPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_resetUnfoldedFromHeavyatomPeakPosition(self, *args, **kwargs)

    def hasUnfoldedFromHeavyatomPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_hasUnfoldedFromHeavyatomPeakPosition(self, *args, **kwargs)

    def unfoldedFromHeavyatomPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_unfoldedFromHeavyatomPeakPosition(self, *args, **kwargs)

    def setUnfoldedFromHeavyatomPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setUnfoldedFromHeavyatomPeakPosition(self, *args, **kwargs)

    def resetUnfoldedToProtonPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_resetUnfoldedToProtonPeakPosition(self, *args, **kwargs)

    def hasUnfoldedToProtonPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_hasUnfoldedToProtonPeakPosition(self, *args, **kwargs)

    def unfoldedToProtonPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_unfoldedToProtonPeakPosition(self, *args, **kwargs)

    def setUnfoldedToProtonPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setUnfoldedToProtonPeakPosition(self, *args, **kwargs)

    def resetUnfoldedToHeavyatomPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_resetUnfoldedToHeavyatomPeakPosition(self, *args, **kwargs)

    def hasUnfoldedToHeavyatomPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_hasUnfoldedToHeavyatomPeakPosition(self, *args, **kwargs)

    def unfoldedToHeavyatomPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_unfoldedToHeavyatomPeakPosition(self, *args, **kwargs)

    def setUnfoldedToHeavyatomPeakPosition(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setUnfoldedToHeavyatomPeakPosition(self, *args, **kwargs)

    def setGood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setGood(self, *args, **kwargs)

    def setBad(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setBad(self, *args, **kwargs)

    def isGood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isGood(self, *args, **kwargs)

    def resetPreviousLikelihood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_resetPreviousLikelihood(self, *args, **kwargs)

    def hasPreviousLikelihood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_hasPreviousLikelihood(self, *args, **kwargs)

    def previousLikelihood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_previousLikelihood(self, *args, **kwargs)

    def setPreviousLikelihood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setPreviousLikelihood(self, *args, **kwargs)

    def isActive(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isActive(self, *args, **kwargs)

    def activate(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_activate(self, *args, **kwargs)

    def inactivate(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_inactivate(self, *args, **kwargs)

    def isInWrongNeighborhood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isInWrongNeighborhood(self, *args, **kwargs)

    def setInWrongNeighborhood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setInWrongNeighborhood(self, *args, **kwargs)

    def setInRightNeighborhood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setInRightNeighborhood(self, *args, **kwargs)

    def resetSavedState(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_resetSavedState(self, *args, **kwargs)

    def saveCurrentState(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_saveCurrentState(self, *args, **kwargs)

    def revertToSavedState(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_revertToSavedState(self, *args, **kwargs)

    def addLinkedPeakAssignmentName(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_addLinkedPeakAssignmentName(self, *args, **kwargs)

    def resetLinkedPeakAssignmentNames(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_resetLinkedPeakAssignmentNames(self, *args, **kwargs)

    def linkedPeakAssignmentNames(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_linkedPeakAssignmentNames(self, *args, **kwargs)

    def removeLinkedPeakAssignmentName(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_removeLinkedPeakAssignmentName(self, *args, **kwargs)

    def resetLinkedPeakAssignments(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_resetLinkedPeakAssignments(self, *args, **kwargs)

    def addLinkedPeakAssignment(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_addLinkedPeakAssignment(self, *args, **kwargs)

    def linkedPeakAssignments(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_linkedPeakAssignments(self, *args, **kwargs)

    def primarySeqDist(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_primarySeqDist(self, *args, **kwargs)

    def isIntraresidue(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isIntraresidue(self, *args, **kwargs)

    def isBackboneSequential(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isBackboneSequential(self, *args, **kwargs)

    def isSequential(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isSequential(self, *args, **kwargs)

    def isShortRange(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isShortRange(self, *args, **kwargs)

    def isLongRange(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isLongRange(self, *args, **kwargs)

    def isIntermolecular(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isIntermolecular(self, *args, **kwargs)

    def updatePrimarySeqDist(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_updatePrimarySeqDist(self, *args, **kwargs)

    def isBackbone(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_isBackbone(self, *args, **kwargs)

    def updateIsBackbone(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_updateIsBackbone(self, *args, **kwargs)

    def selectionsIntersect(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_selectionsIntersect(self, *args, **kwargs)

    def updateSelectionsIntersect(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_updateSelectionsIntersect(self, *args, **kwargs)

    def numFiltersFailed(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_numFiltersFailed(self, *args, **kwargs)

    def resetNumFiltersFailed(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_resetNumFiltersFailed(self, *args, **kwargs)

    def incrementNumFiltersFailed(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_incrementNumFiltersFailed(self, *args, **kwargs)

    def distance(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_distance(self, *args, **kwargs)

    def nMono(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_nMono(self, *args, **kwargs)

    def setNMono(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setNMono(self, *args, **kwargs)

    def aveExp(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_aveExp(self, *args, **kwargs)

    def setAveExp(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_setAveExp(self, *args, **kwargs)

    def violation(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_violation(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_calcEnergyAndDerivs(self, *args, **kwargs)

    def updateActivation(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_updateActivation(self, *args, **kwargs)

    def updateInWrongNeighborhood(self, *args, **kwargs):
        return _pasdPeak.PeakAssignment_updateInWrongNeighborhood(self, *args, **kwargs)

class PeakAssignmentPtr(PeakAssignment):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PeakAssignment

PeakAssignment_swigregister = _pasdPeak.PeakAssignment_swigregister
PeakAssignment_swigregister(PeakAssignment)
cvar = _pasdPeak.cvar
PeakAssignment.defaultAveExp = _pasdPeak.cvar.PeakAssignment_defaultAveExp

class ShiftAssignment(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _pasdPeak.new_ShiftAssignment(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pasdPeak.delete_ShiftAssignment
    __del__ = lambda self: None

    def name(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_name(self, *args, **kwargs)

    def note(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_note(self, *args, **kwargs)

    def setNote(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setNote(self, *args, **kwargs)

    def appendToNote(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_appendToNote(self, *args, **kwargs)

    def protonSelectionString(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_protonSelectionString(self, *args, **kwargs)

    def setProtonSelectionString(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setProtonSelectionString(self, *args, **kwargs)

    def protonSelection(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_protonSelection(self, *args, **kwargs)

    def setProtonSelection(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setProtonSelection(self, *args, **kwargs)

    def hasProtonSelection(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasProtonSelection(self, *args, **kwargs)

    def heavyatomSelectionString(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_heavyatomSelectionString(self, *args, **kwargs)

    def setHeavyatomSelectionString(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setHeavyatomSelectionString(self, *args, **kwargs)

    def heavyatomSelection(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_heavyatomSelection(self, *args, **kwargs)

    def setHeavyatomSelection(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setHeavyatomSelection(self, *args, **kwargs)

    def hasHeavyatomSelection(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasHeavyatomSelection(self, *args, **kwargs)

    def setToFromPartnerName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setToFromPartnerName(self, *args, **kwargs)

    def toFromPartnerName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_toFromPartnerName(self, *args, **kwargs)

    def hasToFromPartnerName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasToFromPartnerName(self, *args, **kwargs)

    def resetToFromPartnerName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetToFromPartnerName(self, *args, **kwargs)

    def setToFromPartner(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setToFromPartner(self, *args, **kwargs)

    def hasToFromPartner(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasToFromPartner(self, *args, **kwargs)

    def resetToFromPartner(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetToFromPartner(self, *args, **kwargs)

    def toFromPartner(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_toFromPartner(self, *args, **kwargs)

    def setStereoPartnerName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setStereoPartnerName(self, *args, **kwargs)

    def stereoPartnerName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_stereoPartnerName(self, *args, **kwargs)

    def hasStereoPartnerName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasStereoPartnerName(self, *args, **kwargs)

    def resetStereoPartnerName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetStereoPartnerName(self, *args, **kwargs)

    def setStereoPartner(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setStereoPartner(self, *args, **kwargs)

    def hasStereoPartner(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasStereoPartner(self, *args, **kwargs)

    def resetStereoPartner(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetStereoPartner(self, *args, **kwargs)

    def stereoPartner(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_stereoPartner(self, *args, **kwargs)

    def addLinkedShiftAssignmentName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_addLinkedShiftAssignmentName(self, *args, **kwargs)

    def removeLinkedShiftAssignmentName(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_removeLinkedShiftAssignmentName(self, *args, **kwargs)

    def linkedShiftAssignmentNames(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_linkedShiftAssignmentNames(self, *args, **kwargs)

    def addLinkedShiftAssignment(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_addLinkedShiftAssignment(self, *args, **kwargs)

    def removeAllLinkedShiftAssignments(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_removeAllLinkedShiftAssignments(self, *args, **kwargs)

    def linkedShiftAssignments(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_linkedShiftAssignments(self, *args, **kwargs)

    def numLinkedShiftAssignments(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_numLinkedShiftAssignments(self, *args, **kwargs)

    def resetProtonShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetProtonShift(self, *args, **kwargs)

    def hasProtonShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasProtonShift(self, *args, **kwargs)

    def protonShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_protonShift(self, *args, **kwargs)

    def setProtonShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setProtonShift(self, *args, **kwargs)

    def resetHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetHeavyatomShift(self, *args, **kwargs)

    def hasHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasHeavyatomShift(self, *args, **kwargs)

    def heavyatomShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_heavyatomShift(self, *args, **kwargs)

    def setHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setHeavyatomShift(self, *args, **kwargs)

    def resetFoldedProtonShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetFoldedProtonShift(self, *args, **kwargs)

    def hasFoldedProtonShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasFoldedProtonShift(self, *args, **kwargs)

    def foldedProtonShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_foldedProtonShift(self, *args, **kwargs)

    def setFoldedProtonShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setFoldedProtonShift(self, *args, **kwargs)

    def resetFoldedHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetFoldedHeavyatomShift(self, *args, **kwargs)

    def hasFoldedHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasFoldedHeavyatomShift(self, *args, **kwargs)

    def foldedHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_foldedHeavyatomShift(self, *args, **kwargs)

    def setFoldedHeavyatomShift(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setFoldedHeavyatomShift(self, *args, **kwargs)

    def resetProtonTolerance(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetProtonTolerance(self, *args, **kwargs)

    def hasProtonTolerance(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasProtonTolerance(self, *args, **kwargs)

    def protonTolerance(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_protonTolerance(self, *args, **kwargs)

    def setProtonTolerance(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setProtonTolerance(self, *args, **kwargs)

    def resetHeavyatomTolerance(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetHeavyatomTolerance(self, *args, **kwargs)

    def hasHeavyatomTolerance(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasHeavyatomTolerance(self, *args, **kwargs)

    def heavyatomTolerance(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_heavyatomTolerance(self, *args, **kwargs)

    def setHeavyatomTolerance(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setHeavyatomTolerance(self, *args, **kwargs)

    def resetPreviousLikelihood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetPreviousLikelihood(self, *args, **kwargs)

    def hasPreviousLikelihood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasPreviousLikelihood(self, *args, **kwargs)

    def previousLikelihood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_previousLikelihood(self, *args, **kwargs)

    def setPreviousLikelihood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setPreviousLikelihood(self, *args, **kwargs)

    def foldedSign(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_foldedSign(self, *args, **kwargs)

    def setFoldedSign(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setFoldedSign(self, *args, **kwargs)

    def resetNoeCompleteness(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetNoeCompleteness(self, *args, **kwargs)

    def hasNoeCompleteness(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasNoeCompleteness(self, *args, **kwargs)

    def noeCompleteness(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_noeCompleteness(self, *args, **kwargs)

    def setNoeCompleteness(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setNoeCompleteness(self, *args, **kwargs)

    def resetProtonPeakPositions(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetProtonPeakPositions(self, *args, **kwargs)

    def recordProtonPeakPosition(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_recordProtonPeakPosition(self, *args, **kwargs)

    def protonPeakPositionScatter(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_protonPeakPositionScatter(self, *args, **kwargs)

    def scatterValues(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_scatterValues(self, *args, **kwargs)

    def updateInWrongNeighborhood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_updateInWrongNeighborhood(self, *args, **kwargs)

    def distanceToShiftAssignment(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_distanceToShiftAssignment(self, *args, **kwargs)

    def shiftAssignWithinDist(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_shiftAssignWithinDist(self, *args, **kwargs)

    def primarySeqDistToSA(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_primarySeqDistToSA(self, *args, **kwargs)

    def isMonomericallyEqualTo(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_isMonomericallyEqualTo(self, *args, **kwargs)

    def setIsFrom(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setIsFrom(self, *args, **kwargs)

    def setIsTo(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setIsTo(self, *args, **kwargs)

    def isFrom(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_isFrom(self, *args, **kwargs)

    def isTo(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_isTo(self, *args, **kwargs)

    def setIsMethyl(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setIsMethyl(self, *args, **kwargs)

    def setNotMethyl(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setNotMethyl(self, *args, **kwargs)

    def isMethyl(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_isMethyl(self, *args, **kwargs)

    def isInWrongNeighborhood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_isInWrongNeighborhood(self, *args, **kwargs)

    def setInWrongNeighborhood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setInWrongNeighborhood(self, *args, **kwargs)

    def setInRightNeighborhood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setInRightNeighborhood(self, *args, **kwargs)

    def setGood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setGood(self, *args, **kwargs)

    def setBad(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setBad(self, *args, **kwargs)

    def isGood(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_isGood(self, *args, **kwargs)

    def resetCachedIndex(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetCachedIndex(self, *args, **kwargs)

    def hasCachedIndex(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_hasCachedIndex(self, *args, **kwargs)

    def cachedIndex(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_cachedIndex(self, *args, **kwargs)

    def setCachedIndex(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_setCachedIndex(self, *args, **kwargs)

    def resetSavedState(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetSavedState(self, *args, **kwargs)

    def saveCurrentState(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_saveCurrentState(self, *args, **kwargs)

    def revertToSavedState(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_revertToSavedState(self, *args, **kwargs)

    def resetNumAccountedNeighbors(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetNumAccountedNeighbors(self, *args, **kwargs)

    def resetNumUnaccountedNeighbors(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_resetNumUnaccountedNeighbors(self, *args, **kwargs)

    def incrementNumAccountedNeighbors(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_incrementNumAccountedNeighbors(self, *args, **kwargs)

    def incrementNumUnaccountedNeighbors(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_incrementNumUnaccountedNeighbors(self, *args, **kwargs)

    def numAccountedNeighbors(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_numAccountedNeighbors(self, *args, **kwargs)

    def numUnaccountedNeighbors(self, *args, **kwargs):
        return _pasdPeak.ShiftAssignment_numUnaccountedNeighbors(self, *args, **kwargs)

class ShiftAssignmentPtr(ShiftAssignment):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ShiftAssignment

ShiftAssignment_swigregister = _pasdPeak.ShiftAssignment_swigregister
ShiftAssignment_swigregister(ShiftAssignment)

class CDSlist_PeakAssignmentPtr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _pasdPeak.CDSlist_PeakAssignmentPtr___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _pasdPeak.new_CDSlist_PeakAssignmentPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _pasdPeak.CDSlist_PeakAssignmentPtr___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _pasdPeak.CDSlist_PeakAssignmentPtr___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _pasdPeak.CDSlist_PeakAssignmentPtr_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _pasdPeak.CDSlist_PeakAssignmentPtr_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _pasdPeak.CDSlist_PeakAssignmentPtr_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _pasdPeak.CDSlist_PeakAssignmentPtr___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _pasdPeak.CDSlist_PeakAssignmentPtr___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPeak.CDSlist_PeakAssignmentPtr_help(self, *args, **kwargs)
    __swig_destroy__ = _pasdPeak.delete_CDSlist_PeakAssignmentPtr
    __del__ = lambda self: None

class CDSlist_PeakAssignmentPtrPtr(CDSlist_PeakAssignmentPtr):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSlist_PeakAssignmentPtr

CDSlist_PeakAssignmentPtr_swigregister = _pasdPeak.CDSlist_PeakAssignmentPtr_swigregister
CDSlist_PeakAssignmentPtr_swigregister(CDSlist_PeakAssignmentPtr)

class CDSlist_ShiftAssignmentPtr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _pasdPeak.CDSlist_ShiftAssignmentPtr___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _pasdPeak.new_CDSlist_ShiftAssignmentPtr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _pasdPeak.CDSlist_ShiftAssignmentPtr___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _pasdPeak.CDSlist_ShiftAssignmentPtr___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _pasdPeak.CDSlist_ShiftAssignmentPtr_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _pasdPeak.CDSlist_ShiftAssignmentPtr_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _pasdPeak.CDSlist_ShiftAssignmentPtr_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _pasdPeak.CDSlist_ShiftAssignmentPtr___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _pasdPeak.CDSlist_ShiftAssignmentPtr___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _pasdPeak.CDSlist_ShiftAssignmentPtr_help(self, *args, **kwargs)
    __swig_destroy__ = _pasdPeak.delete_CDSlist_ShiftAssignmentPtr
    __del__ = lambda self: None

class CDSlist_ShiftAssignmentPtrPtr(CDSlist_ShiftAssignmentPtr):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSlist_ShiftAssignmentPtr

CDSlist_ShiftAssignmentPtr_swigregister = _pasdPeak.CDSlist_ShiftAssignmentPtr_swigregister
CDSlist_ShiftAssignmentPtr_swigregister(CDSlist_ShiftAssignmentPtr)


pyXplorHelp = help


def help(*args):
    return _pasdPeak.help(*args)
help = _pasdPeak.help


