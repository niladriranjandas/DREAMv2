# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cstMagPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cstMagPot')
    _cstMagPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cstMagPot', [dirname(__file__)])
        except ImportError:
            import _cstMagPot
            return _cstMagPot
        try:
            _mod = imp.load_module('_cstMagPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cstMagPot = swig_import_helper()
    del swig_import_helper
else:
    import _cstMagPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _cstMagPot.Modified_MOD_SELF
    MOD_SIMULATION = _cstMagPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _cstMagPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _cstMagPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _cstMagPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _cstMagPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _cstMagPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _cstMagPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _cstMagPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _cstMagPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_cstMagPot.ModifiedBase_modified_get, _cstMagPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_cstMagPot.ModifiedBase_registeredSimulations_get, _cstMagPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _cstMagPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _cstMagPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _cstMagPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _cstMagPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _cstMagPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class CSTMagPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cstMagPot.new_CSTMagPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _cstMagPot.delete_CSTMagPot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_addRestraints(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_numRestraints(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_restraints(self, *args, **kwargs)

    def cstOffset(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_cstOffset(self, *args, **kwargs)

    def setCSTOffset(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_setCSTOffset(self, *args, **kwargs)

    def cstScale(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_cstScale(self, *args, **kwargs)

    def setCSTScale(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_setCSTScale(self, *args, **kwargs)

    def cstWeights(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_cstWeights(self, *args, **kwargs)

    def setCSTWeights(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_setCSTWeights(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_setShowAllRestraints(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_setVerbose(self, *args, **kwargs)
    angle1Vals = _swig_property(_cstMagPot.CSTMagPot_angle1Vals_get, _cstMagPot.CSTMagPot_angle1Vals_set)
    angle2Vals = _swig_property(_cstMagPot.CSTMagPot_angle2Vals_get, _cstMagPot.CSTMagPot_angle2Vals_set)
    surf1 = _swig_property(_cstMagPot.CSTMagPot_surf1_get, _cstMagPot.CSTMagPot_surf1_set)
    surf2 = _swig_property(_cstMagPot.CSTMagPot_surf2_get, _cstMagPot.CSTMagPot_surf2_set)
    surf3 = _swig_property(_cstMagPot.CSTMagPot_surf3_get, _cstMagPot.CSTMagPot_surf3_set)

    def help(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_cstMagPot.CSTMagPot_instanceData__get, _cstMagPot.CSTMagPot_instanceData__set)
    instanceDataCreate = _swig_property(_cstMagPot.CSTMagPot_instanceDataCreate_get, _cstMagPot.CSTMagPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_cstMagPot.CSTMagPot_instanceDataCleanup_get, _cstMagPot.CSTMagPot_instanceDataCleanup_set)
    modified = _swig_property(_cstMagPot.CSTMagPot_modified_get, _cstMagPot.CSTMagPot_modified_set)
    registeredSimulations = _swig_property(_cstMagPot.CSTMagPot_registeredSimulations_get, _cstMagPot.CSTMagPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_unRegister(self, *args, **kwargs)

class CSTMagPotPtr(CSTMagPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CSTMagPot

CSTMagPot_swigregister = _cstMagPot.CSTMagPot_swigregister
CSTMagPot_swigregister(CSTMagPot)


realCSTMagPot = CSTMagPot
def CSTMagPot(*args):
    from potProxy import PotProxy
    return PotProxy( realCSTMagPot(*args) )

class Restraint_CSTMag(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _cstMagPot.Restraint_CSTMag_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _cstMagPot.new_Restraint_CSTMag(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _cstMagPot.Restraint_CSTMag_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _cstMagPot.Restraint_CSTMag_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _cstMagPot.Restraint_CSTMag_setName(self, *args, **kwargs)
    __swig_destroy__ = _cstMagPot.delete_Restraint_CSTMag
    __del__ = lambda self: None

class Restraint_CSTMagPtr(Restraint_CSTMag):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_CSTMag

Restraint_CSTMag_swigregister = _cstMagPot.Restraint_CSTMag_swigregister
Restraint_CSTMag_swigregister(Restraint_CSTMag)

class CSTMagPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cstMagPot.new_CSTMagPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calcEnergy(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_addRestraints(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_numRestraints(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_restraints(self, *args, **kwargs)

    def cstOffset(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_cstOffset(self, *args, **kwargs)

    def setCSTOffset(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_setCSTOffset(self, *args, **kwargs)

    def cstScale(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_cstScale(self, *args, **kwargs)

    def setCSTScale(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_setCSTScale(self, *args, **kwargs)

    def cstWeights(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_cstWeights(self, *args, **kwargs)

    def setCSTWeights(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_setCSTWeights(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_setVerbose(self, *args, **kwargs)
    angle1Vals = _swig_property(_cstMagPot.CSTMagPot_LetterClass_angle1Vals_get, _cstMagPot.CSTMagPot_LetterClass_angle1Vals_set)
    angle2Vals = _swig_property(_cstMagPot.CSTMagPot_LetterClass_angle2Vals_get, _cstMagPot.CSTMagPot_LetterClass_angle2Vals_set)
    surf1 = _swig_property(_cstMagPot.CSTMagPot_LetterClass_surf1_get, _cstMagPot.CSTMagPot_LetterClass_surf1_set)
    surf2 = _swig_property(_cstMagPot.CSTMagPot_LetterClass_surf2_get, _cstMagPot.CSTMagPot_LetterClass_surf2_set)
    surf3 = _swig_property(_cstMagPot.CSTMagPot_LetterClass_surf3_get, _cstMagPot.CSTMagPot_LetterClass_surf3_set)

    def help(self, *args, **kwargs):
        return _cstMagPot.CSTMagPot_LetterClass_help(self, *args, **kwargs)
    __swig_destroy__ = _cstMagPot.delete_CSTMagPot_LetterClass
    __del__ = lambda self: None

class CSTMagPot_LetterClassPtr(CSTMagPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CSTMagPot_LetterClass

CSTMagPot_LetterClass_swigregister = _cstMagPot.CSTMagPot_LetterClass_swigregister
CSTMagPot_LetterClass_swigregister(CSTMagPot_LetterClass)

class CSTMag_Restraint(Restraint_CSTMag):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    phi1 = _swig_property(_cstMagPot.CSTMag_Restraint_phi1_get, _cstMagPot.CSTMag_Restraint_phi1_set)
    phi2 = _swig_property(_cstMagPot.CSTMag_Restraint_phi2_get, _cstMagPot.CSTMag_Restraint_phi2_set)
    vphi1 = _swig_property(_cstMagPot.CSTMag_Restraint_vphi1_get, _cstMagPot.CSTMag_Restraint_vphi1_set)
    vphi2 = _swig_property(_cstMagPot.CSTMag_Restraint_vphi2_get, _cstMagPot.CSTMag_Restraint_vphi2_set)
    calcd1 = _swig_property(_cstMagPot.CSTMag_Restraint_calcd1_get, _cstMagPot.CSTMag_Restraint_calcd1_set)
    calcd2 = _swig_property(_cstMagPot.CSTMag_Restraint_calcd2_get, _cstMagPot.CSTMag_Restraint_calcd2_set)
    calcd3 = _swig_property(_cstMagPot.CSTMag_Restraint_calcd3_get, _cstMagPot.CSTMag_Restraint_calcd3_set)
    obs1 = _swig_property(_cstMagPot.CSTMag_Restraint_obs1_get, _cstMagPot.CSTMag_Restraint_obs1_set)
    obs2 = _swig_property(_cstMagPot.CSTMag_Restraint_obs2_get, _cstMagPot.CSTMag_Restraint_obs2_set)
    obs3 = _swig_property(_cstMagPot.CSTMag_Restraint_obs3_get, _cstMagPot.CSTMag_Restraint_obs3_set)

    def __init__(self, *args, **kwargs):
        this = _cstMagPot.new_CSTMag_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def energy(self, *args, **kwargs):
        return _cstMagPot.CSTMag_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _cstMagPot.CSTMag_Restraint_deriv(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _cstMagPot.CSTMag_Restraint_name(self, *args, **kwargs)
    __swig_destroy__ = _cstMagPot.delete_CSTMag_Restraint
    __del__ = lambda self: None

class CSTMag_RestraintPtr(CSTMag_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CSTMag_Restraint

CSTMag_Restraint_swigregister = _cstMagPot.CSTMag_Restraint_swigregister
CSTMag_Restraint_swigregister(CSTMag_Restraint)

class rc_ptr_CSTMag_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cstMagPot.new_rc_ptr_CSTMag_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cstMagPot.delete_rc_ptr_CSTMag_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_release(self, *args, **kwargs)
    phi1 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_phi1_get, _cstMagPot.rc_ptr_CSTMag_Restraint_phi1_set)
    phi2 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_phi2_get, _cstMagPot.rc_ptr_CSTMag_Restraint_phi2_set)
    vphi1 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_vphi1_get, _cstMagPot.rc_ptr_CSTMag_Restraint_vphi1_set)
    vphi2 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_vphi2_get, _cstMagPot.rc_ptr_CSTMag_Restraint_vphi2_set)
    calcd1 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_calcd1_get, _cstMagPot.rc_ptr_CSTMag_Restraint_calcd1_set)
    calcd2 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_calcd2_get, _cstMagPot.rc_ptr_CSTMag_Restraint_calcd2_set)
    calcd3 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_calcd3_get, _cstMagPot.rc_ptr_CSTMag_Restraint_calcd3_set)
    obs1 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_obs1_get, _cstMagPot.rc_ptr_CSTMag_Restraint_obs1_set)
    obs2 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_obs2_get, _cstMagPot.rc_ptr_CSTMag_Restraint_obs2_set)
    obs3 = _swig_property(_cstMagPot.rc_ptr_CSTMag_Restraint_obs3_get, _cstMagPot.rc_ptr_CSTMag_Restraint_obs3_set)

    def energy(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_deriv(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_name(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_violated(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _cstMagPot.rc_ptr_CSTMag_Restraint_setName(self, *args, **kwargs)

class rc_ptr_CSTMag_RestraintPtr(rc_ptr_CSTMag_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_CSTMag_Restraint

rc_ptr_CSTMag_Restraint_swigregister = _cstMagPot.rc_ptr_CSTMag_Restraint_swigregister
rc_ptr_CSTMag_Restraint_swigregister(rc_ptr_CSTMag_Restraint)

class CDSList_CSTMag_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cstMagPot.CDSList_CSTMag_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cstMagPot.new_CDSList_CSTMag_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cstMagPot.CDSList_CSTMag_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cstMagPot.CDSList_CSTMag_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cstMagPot.CDSList_CSTMag_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cstMagPot.CDSList_CSTMag_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cstMagPot.CDSList_CSTMag_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cstMagPot.CDSList_CSTMag_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cstMagPot.CDSList_CSTMag_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cstMagPot.CDSList_CSTMag_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _cstMagPot.delete_CDSList_CSTMag_Restraint
    __del__ = lambda self: None

class CDSList_CSTMag_RestraintPtr(CDSList_CSTMag_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_CSTMag_Restraint

CDSList_CSTMag_Restraint_swigregister = _cstMagPot.CDSList_CSTMag_Restraint_swigregister
CDSList_CSTMag_Restraint_swigregister(CDSList_CSTMag_Restraint)


import spline


pyXplorHelp = help


def help(*args):
    return _cstMagPot.help(*args)
help = _cstMagPot.help


