# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cdsList')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cdsList')
    _cdsList = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cdsList', [dirname(__file__)])
        except ImportError:
            import _cdsList
            return _cdsList
        try:
            _mod = imp.load_module('_cdsList', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cdsList = swig_import_helper()
    del swig_import_helper
else:
    import _cdsList
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class CDSList_int(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsList.CDSList_int___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsList.new_CDSList_int(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cdsList.CDSList_int___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cdsList.CDSList_int___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cdsList.CDSList_int_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cdsList.CDSList_int_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cdsList.CDSList_int_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cdsList.CDSList_int___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsList.CDSList_int___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsList.CDSList_int_help(self, *args, **kwargs)
    __swig_destroy__ = _cdsList.delete_CDSList_int
    __del__ = lambda self: None

class CDSList_intPtr(CDSList_int):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_int

CDSList_int_swigregister = _cdsList.CDSList_int_swigregister
CDSList_int_swigregister(CDSList_int)

class CDSList_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsList.CDSList_double___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsList.new_CDSList_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cdsList.CDSList_double___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cdsList.CDSList_double___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cdsList.CDSList_double_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cdsList.CDSList_double_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cdsList.CDSList_double_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cdsList.CDSList_double___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsList.CDSList_double___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsList.CDSList_double_help(self, *args, **kwargs)
    __swig_destroy__ = _cdsList.delete_CDSList_double
    __del__ = lambda self: None

class CDSList_doublePtr(CDSList_double):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_double

CDSList_double_swigregister = _cdsList.CDSList_double_swigregister
CDSList_double_swigregister(CDSList_double)

class CDSList_Vec3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec3___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsList.new_CDSList_Vec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cdsList.CDSList_Vec3___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec3___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cdsList.CDSList_Vec3_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cdsList.CDSList_Vec3_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cdsList.CDSList_Vec3_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec3___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec3___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsList.CDSList_Vec3_help(self, *args, **kwargs)
    __swig_destroy__ = _cdsList.delete_CDSList_Vec3
    __del__ = lambda self: None

class CDSList_Vec3Ptr(CDSList_Vec3):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Vec3

CDSList_Vec3_swigregister = _cdsList.CDSList_Vec3_swigregister
CDSList_Vec3_swigregister(CDSList_Vec3)

class CDSList_Atom(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsList.CDSList_Atom___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsList.new_CDSList_Atom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cdsList.CDSList_Atom___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cdsList.CDSList_Atom___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cdsList.CDSList_Atom_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cdsList.CDSList_Atom_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cdsList.CDSList_Atom_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cdsList.CDSList_Atom___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsList.CDSList_Atom___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsList.CDSList_Atom_help(self, *args, **kwargs)
    __swig_destroy__ = _cdsList.delete_CDSList_Atom
    __del__ = lambda self: None

class CDSList_AtomPtr(CDSList_Atom):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Atom

CDSList_Atom_swigregister = _cdsList.CDSList_Atom_swigregister
CDSList_Atom_swigregister(CDSList_Atom)

class CDSList_Vec_double(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_double___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsList.new_CDSList_Vec_double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cdsList.CDSList_Vec_double___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_double___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_double_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_double_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_double_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_double___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_double___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_double_help(self, *args, **kwargs)
    __swig_destroy__ = _cdsList.delete_CDSList_Vec_double
    __del__ = lambda self: None

class CDSList_Vec_doublePtr(CDSList_Vec_double):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Vec_double

CDSList_Vec_double_swigregister = _cdsList.CDSList_Vec_double_swigregister
CDSList_Vec_double_swigregister(CDSList_Vec_double)

class CDSList_Vec_Vec3(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_Vec3___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _cdsList.new_CDSList_Vec_Vec3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _cdsList.CDSList_Vec_Vec3___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_Vec3___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_Vec3_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_Vec3_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_Vec3_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_Vec3___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_Vec3___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cdsList.CDSList_Vec_Vec3_help(self, *args, **kwargs)
    __swig_destroy__ = _cdsList.delete_CDSList_Vec_Vec3
    __del__ = lambda self: None

class CDSList_Vec_Vec3Ptr(CDSList_Vec_Vec3):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Vec_Vec3

CDSList_Vec_Vec3_swigregister = _cdsList.CDSList_Vec_Vec3_swigregister
CDSList_Vec_Vec3_swigregister(CDSList_Vec_Vec3)


pyXplorHelp = help


def help(*args):
    return _cdsList.help(*args)
help = _cdsList.help


