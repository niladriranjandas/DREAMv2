# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_diffPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_diffPot')
    _diffPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_diffPot', [dirname(__file__)])
        except ImportError:
            import _diffPot
            return _diffPot
        try:
            _mod = imp.load_module('_diffPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _diffPot = swig_import_helper()
    del swig_import_helper
else:
    import _diffPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _diffPot.Modified_MOD_SELF
    MOD_SIMULATION = _diffPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _diffPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _diffPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _diffPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _diffPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _diffPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _diffPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _diffPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _diffPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_diffPot.ModifiedBase_modified_get, _diffPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_diffPot.ModifiedBase_registeredSimulations_get, _diffPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _diffPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _diffPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _diffPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _diffPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _diffPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)


import mat3

class DiffPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _diffPot.new_DiffPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _diffPot.DiffPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _diffPot.DiffPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _diffPot.DiffPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _diffPot.DiffPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _diffPot.DiffPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _diffPot.DiffPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _diffPot.DiffPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _diffPot.DiffPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _diffPot.delete_DiffPot
    __del__ = lambda self: None

    def updateValues(self, *args, **kwargs):
        return _diffPot.DiffPot_updateValues(self, *args, **kwargs)

    def getAtomSel(self, *args, **kwargs):
        return _diffPot.DiffPot_getAtomSel(self, *args, **kwargs)

    def Diff_Tensor(self, *args, **kwargs):
        return _diffPot.DiffPot_Diff_Tensor(self, *args, **kwargs)

    def curr_Tmp(self, *args, **kwargs):
        return _diffPot.DiffPot_curr_Tmp(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _diffPot.DiffPot_calcEnergy(self, *args, **kwargs)

    def calcEnergy_eigen(self, *args, **kwargs):
        return _diffPot.DiffPot_calcEnergy_eigen(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _diffPot.DiffPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def get_TmpF(self, *args, **kwargs):
        return _diffPot.DiffPot_get_TmpF(self, *args, **kwargs)

    def setTmpAtoms(self, *args, **kwargs):
        return _diffPot.DiffPot_setTmpAtoms(self, *args, **kwargs)

    def diffShell(self, *args, **kwargs):
        return _diffPot.DiffPot_diffShell(self, *args, **kwargs)

    def setDiffShell(self, *args, **kwargs):
        return _diffPot.DiffPot_setDiffShell(self, *args, **kwargs)

    def setMedianTmp(self, *args, **kwargs):
        return _diffPot.DiffPot_setMedianTmp(self, *args, **kwargs)

    def getMedianTmp(self, *args, **kwargs):
        return _diffPot.DiffPot_getMedianTmp(self, *args, **kwargs)

    def get_O_TmP_atom(self, *args, **kwargs):
        return _diffPot.DiffPot_get_O_TmP_atom(self, *args, **kwargs)

    def get_X_TmP_atom(self, *args, **kwargs):
        return _diffPot.DiffPot_get_X_TmP_atom(self, *args, **kwargs)

    def get_Y_TmP_atom(self, *args, **kwargs):
        return _diffPot.DiffPot_get_Y_TmP_atom(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _diffPot.DiffPot_rms(self, *args, **kwargs)

    def rms_eigen(self, *args, **kwargs):
        return _diffPot.DiffPot_rms_eigen(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _diffPot.DiffPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _diffPot.DiffPot_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _diffPot.DiffPot_info(self, *args, **kwargs)

    def Tessellation(self, *args, **kwargs):
        return _diffPot.DiffPot_Tessellation(self, *args, **kwargs)

    def scale_Lin(self, *args, **kwargs):
        return _diffPot.DiffPot_scale_Lin(self, *args, **kwargs)

    def setScale_Lin(self, *args, **kwargs):
        return _diffPot.DiffPot_setScale_Lin(self, *args, **kwargs)

    def diffTarget(self, *args, **kwargs):
        return _diffPot.DiffPot_diffTarget(self, *args, **kwargs)

    def setDiffTarget(self, *args, **kwargs):
        return _diffPot.DiffPot_setDiffTarget(self, *args, **kwargs)

    def diffTmpF(self, *args, **kwargs):
        return _diffPot.DiffPot_diffTmpF(self, *args, **kwargs)

    def setDiffTmpF(self, *args, **kwargs):
        return _diffPot.DiffPot_setDiffTmpF(self, *args, **kwargs)

    def diffRstep(self, *args, **kwargs):
        return _diffPot.DiffPot_diffRstep(self, *args, **kwargs)

    def setDiffRstep(self, *args, **kwargs):
        return _diffPot.DiffPot_setDiffRstep(self, *args, **kwargs)

    def rangeTmpFit(self, *args, **kwargs):
        return _diffPot.DiffPot_rangeTmpFit(self, *args, **kwargs)

    def setRangeTmpFit(self, *args, **kwargs):
        return _diffPot.DiffPot_setRangeTmpFit(self, *args, **kwargs)

    def setDiffRrmsd(self, *args, **kwargs):
        return _diffPot.DiffPot_setDiffRrmsd(self, *args, **kwargs)

    def diffRrmsd(self, *args, **kwargs):
        return _diffPot.DiffPot_diffRrmsd(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _diffPot.DiffPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _diffPot.DiffPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _diffPot.DiffPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _diffPot.DiffPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _diffPot.DiffPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _diffPot.DiffPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _diffPot.DiffPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _diffPot.DiffPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _diffPot.DiffPot_setThreshold(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _diffPot.DiffPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_diffPot.DiffPot_instanceData__get, _diffPot.DiffPot_instanceData__set)
    instanceDataCreate = _swig_property(_diffPot.DiffPot_instanceDataCreate_get, _diffPot.DiffPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_diffPot.DiffPot_instanceDataCleanup_get, _diffPot.DiffPot_instanceDataCleanup_set)
    modified = _swig_property(_diffPot.DiffPot_modified_get, _diffPot.DiffPot_modified_set)
    registeredSimulations = _swig_property(_diffPot.DiffPot_registeredSimulations_get, _diffPot.DiffPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _diffPot.DiffPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _diffPot.DiffPot_unRegister(self, *args, **kwargs)

class DiffPotPtr(DiffPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = DiffPot

DiffPot_swigregister = _diffPot.DiffPot_swigregister
DiffPot_swigregister(DiffPot)


realDiffPot = DiffPot
def DiffPot(*args):
    from potProxy import PotProxy
    return PotProxy( realDiffPot(*args) )

class DiffPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def updateValues(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_updateValues(self, *args, **kwargs)

    def getAtomSel(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_getAtomSel(self, *args, **kwargs)

    def Diff_Tensor(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_Diff_Tensor(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _diffPot.new_DiffPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _diffPot.delete_DiffPot_LetterClass
    __del__ = lambda self: None

    def curr_Tmp(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_curr_Tmp(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergy_eigen(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_calcEnergy_eigen(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def get_TmpF(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_get_TmpF(self, *args, **kwargs)

    def setTmpAtoms(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_setTmpAtoms(self, *args, **kwargs)

    def diffShell(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_diffShell(self, *args, **kwargs)

    def setDiffShell(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_setDiffShell(self, *args, **kwargs)

    def setMedianTmp(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_setMedianTmp(self, *args, **kwargs)

    def getMedianTmp(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_getMedianTmp(self, *args, **kwargs)

    def get_O_TmP_atom(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_get_O_TmP_atom(self, *args, **kwargs)

    def get_X_TmP_atom(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_get_X_TmP_atom(self, *args, **kwargs)

    def get_Y_TmP_atom(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_get_Y_TmP_atom(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_rms(self, *args, **kwargs)

    def rms_eigen(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_rms_eigen(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_info(self, *args, **kwargs)

    def Tessellation(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_Tessellation(self, *args, **kwargs)

    def scale_Lin(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_scale_Lin(self, *args, **kwargs)

    def setScale_Lin(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_setScale_Lin(self, *args, **kwargs)

    def diffTarget(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_diffTarget(self, *args, **kwargs)

    def setDiffTarget(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_setDiffTarget(self, *args, **kwargs)

    def diffTmpF(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_diffTmpF(self, *args, **kwargs)

    def setDiffTmpF(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_setDiffTmpF(self, *args, **kwargs)

    def diffRstep(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_diffRstep(self, *args, **kwargs)

    def setDiffRstep(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_setDiffRstep(self, *args, **kwargs)

    def rangeTmpFit(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_rangeTmpFit(self, *args, **kwargs)

    def setRangeTmpFit(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_setRangeTmpFit(self, *args, **kwargs)

    def setDiffRrmsd(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_setDiffRrmsd(self, *args, **kwargs)

    def diffRrmsd(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_diffRrmsd(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _diffPot.DiffPot_LetterClass_help(self, *args, **kwargs)

class DiffPot_LetterClassPtr(DiffPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = DiffPot_LetterClass

DiffPot_LetterClass_swigregister = _diffPot.DiffPot_LetterClass_swigregister
DiffPot_LetterClass_swigregister(DiffPot_LetterClass)


pyXplorHelp = help


def help(*args):
    return _diffPot.help(*args)
help = _diffPot.help


