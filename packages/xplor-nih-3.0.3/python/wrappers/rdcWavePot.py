# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rdcWavePot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rdcWavePot')
    _rdcWavePot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rdcWavePot', [dirname(__file__)])
        except ImportError:
            import _rdcWavePot
            return _rdcWavePot
        try:
            _mod = imp.load_module('_rdcWavePot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rdcWavePot = swig_import_helper()
    del swig_import_helper
else:
    import _rdcWavePot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _rdcWavePot.Modified_MOD_SELF
    MOD_SIMULATION = _rdcWavePot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _rdcWavePot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _rdcWavePot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _rdcWavePot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _rdcWavePot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _rdcWavePot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _rdcWavePot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _rdcWavePot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _rdcWavePot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_rdcWavePot.ModifiedBase_modified_get, _rdcWavePot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_rdcWavePot.ModifiedBase_registeredSimulations_get, _rdcWavePot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _rdcWavePot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _rdcWavePot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _rdcWavePot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _rdcWavePot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _rdcWavePot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class RDCWavePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _rdcWavePot.new_RDCWavePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _rdcWavePot.delete_RDCWavePot
    __del__ = lambda self: None

    def restraints(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_restraints(self, *args, **kwargs)

    def addToRestraints(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_addToRestraints(self, *args, **kwargs)

    def setAlignmentTensorAtoms(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_setAlignmentTensorAtoms(self, *args, **kwargs)

    def atomO(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_atomO(self, *args, **kwargs)

    def atomX(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_atomX(self, *args, **kwargs)

    def atomY(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_atomY(self, *args, **kwargs)

    def atomZ(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_atomZ(self, *args, **kwargs)

    def setForceConst(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_setForceConst(self, *args, **kwargs)

    def forceConst(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_forceConst(self, *args, **kwargs)

    def axesOK(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_axesOK(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_numRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_rdcWavePot.RDCWavePot_instanceData__get, _rdcWavePot.RDCWavePot_instanceData__set)
    instanceDataCreate = _swig_property(_rdcWavePot.RDCWavePot_instanceDataCreate_get, _rdcWavePot.RDCWavePot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_rdcWavePot.RDCWavePot_instanceDataCleanup_get, _rdcWavePot.RDCWavePot_instanceDataCleanup_set)
    modified = _swig_property(_rdcWavePot.RDCWavePot_modified_get, _rdcWavePot.RDCWavePot_modified_set)
    registeredSimulations = _swig_property(_rdcWavePot.RDCWavePot_registeredSimulations_get, _rdcWavePot.RDCWavePot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_unRegister(self, *args, **kwargs)

class RDCWavePotPtr(RDCWavePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RDCWavePot

RDCWavePot_swigregister = _rdcWavePot.RDCWavePot_swigregister
RDCWavePot_swigregister(RDCWavePot)


realRDCWavePot = RDCWavePot
def RDCWavePot(*args):
    from potProxy import PotProxy
    return PotProxy( realRDCWavePot(*args) )

class RDCWavePot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _rdcWavePot.new_RDCWavePot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rdcWavePot.delete_RDCWavePot_LetterClass
    __del__ = lambda self: None

    def restraints(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_restraints(self, *args, **kwargs)

    def addToRestraints(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_addToRestraints(self, *args, **kwargs)

    def setAlignmentTensorAtoms(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_setAlignmentTensorAtoms(self, *args, **kwargs)

    def atomO(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_atomO(self, *args, **kwargs)

    def atomX(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_atomX(self, *args, **kwargs)

    def atomY(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_atomY(self, *args, **kwargs)

    def atomZ(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_atomZ(self, *args, **kwargs)

    def setForceConst(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_setForceConst(self, *args, **kwargs)

    def forceConst(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_forceConst(self, *args, **kwargs)

    def axesOK(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_axesOK(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_numRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _rdcWavePot.RDCWavePot_LetterClass_help(self, *args, **kwargs)

class RDCWavePot_LetterClassPtr(RDCWavePot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RDCWavePot_LetterClass

RDCWavePot_LetterClass_swigregister = _rdcWavePot.RDCWavePot_LetterClass_swigregister
RDCWavePot_LetterClass_swigregister(RDCWavePot_LetterClass)

class RDCWaveRestraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _rdcWavePot.new_RDCWaveRestraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rdcWavePot.delete_RDCWaveRestraint
    __del__ = lambda self: None

    def calcPhi(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_calcPhi(self, *args, **kwargs)

    def deltaPhi(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_deltaPhi(self, *args, **kwargs)

    def calcTheta(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_calcTheta(self, *args, **kwargs)

    def deltaTheta(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_deltaTheta(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_calcEnergyAndDerivs(self, *args, **kwargs)

    def setAtomA(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_setAtomA(self, *args, **kwargs)

    def setAtomB(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_setAtomB(self, *args, **kwargs)

    def setAtomC(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_setAtomC(self, *args, **kwargs)

    def setAtomD(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_setAtomD(self, *args, **kwargs)

    def setPhiTarget(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_setPhiTarget(self, *args, **kwargs)

    def setThetaTarget(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_setThetaTarget(self, *args, **kwargs)

    def setPhiWidth(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_setPhiWidth(self, *args, **kwargs)

    def setThetaWidth(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_setThetaWidth(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_name(self, *args, **kwargs)

    def atomA(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_atomA(self, *args, **kwargs)

    def atomB(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_atomB(self, *args, **kwargs)

    def atomC(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_atomC(self, *args, **kwargs)

    def atomD(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_atomD(self, *args, **kwargs)

    def phiTarget(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_phiTarget(self, *args, **kwargs)

    def thetaTarget(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_thetaTarget(self, *args, **kwargs)

    def phiWidth(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_phiWidth(self, *args, **kwargs)

    def thetaWidth(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_thetaWidth(self, *args, **kwargs)

    def makeSimpleRestraint(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_makeSimpleRestraint(self, *args, **kwargs)

    def makeNormRestraint(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_makeNormRestraint(self, *args, **kwargs)

    def mode(self, *args, **kwargs):
        return _rdcWavePot.RDCWaveRestraint_mode(self, *args, **kwargs)

class RDCWaveRestraintPtr(RDCWaveRestraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RDCWaveRestraint

RDCWaveRestraint_swigregister = _rdcWavePot.RDCWaveRestraint_swigregister
RDCWaveRestraint_swigregister(RDCWaveRestraint)


pyXplorHelp = help


def help(*args):
    return _rdcWavePot.help(*args)
help = _rdcWavePot.help


