# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_posSymmPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_posSymmPot')
    _posSymmPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_posSymmPot', [dirname(__file__)])
        except ImportError:
            import _posSymmPot
            return _posSymmPot
        try:
            _mod = imp.load_module('_posSymmPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _posSymmPot = swig_import_helper()
    del swig_import_helper
else:
    import _posSymmPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _posSymmPot.Modified_MOD_SELF
    MOD_SIMULATION = _posSymmPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _posSymmPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _posSymmPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _posSymmPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _posSymmPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _posSymmPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _posSymmPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _posSymmPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _posSymmPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_posSymmPot.ModifiedBase_modified_get, _posSymmPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_posSymmPot.ModifiedBase_registeredSimulations_get, _posSymmPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _posSymmPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _posSymmPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _posSymmPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _posSymmPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _posSymmPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_posSymmPot.VarEnsWeights_ensWeights_get, _posSymmPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_posSymmPot.VarEnsWeights_mult_get, _posSymmPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _posSymmPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _posSymmPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _posSymmPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _posSymmPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _posSymmPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _posSymmPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _posSymmPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _posSymmPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _posSymmPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _posSymmPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class PosSymmPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _posSymmPot.new_PosSymmPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _posSymmPot.delete_PosSymmPot
    __del__ = lambda self: None

    def equivAtomSelPairs(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_equivAtomSelPairs(self, *args, **kwargs)

    def addEquivAtomSelPair(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_addEquivAtomSelPair(self, *args, **kwargs)

    def addEquivAtoms(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_addEquivAtoms(self, *args, **kwargs)

    def removeEquivAtomSelPair(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_removeEquivAtomSelPair(self, *args, **kwargs)

    def numEquivPairs(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_numEquivPairs(self, *args, **kwargs)

    def absoluteFit(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_absoluteFit(self, *args, **kwargs)

    def setAbsoluteFit(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setAbsoluteFit(self, *args, **kwargs)

    def lowerBound(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_lowerBound(self, *args, **kwargs)

    def setLowerBound(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setLowerBound(self, *args, **kwargs)

    def upperBound(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_upperBound(self, *args, **kwargs)

    def setUpperBound(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setUpperBound(self, *args, **kwargs)

    def varScale(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_varScale(self, *args, **kwargs)

    def setVarScale(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setVarScale(self, *args, **kwargs)

    def planarFit(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_planarFit(self, *args, **kwargs)

    def setPlanarFit(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setPlanarFit(self, *args, **kwargs)

    def u(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_u(self, *args, **kwargs)

    def setU(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setU(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_energyMaybeDerivs1(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_numRestraints(self, *args, **kwargs)

    def calcVarTensTerm(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_calcVarTensTerm(self, *args, **kwargs)

    def calcVarTens(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_calcVarTens(self, *args, **kwargs)

    def deltaVariance(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_deltaVariance(self, *args, **kwargs)

    def individualRMSDs(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_individualRMSDs(self, *args, **kwargs)

    def getEnsWeight(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_getEnsWeight(self, *args, **kwargs)

    def rotMat(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_rotMat(self, *args, **kwargs)

    def centroid(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_centroid(self, *args, **kwargs)

    def aveCoords(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_aveCoords(self, *args, **kwargs)

    def fitCoords(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_fitCoords(self, *args, **kwargs)

    def weight(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_weight(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_updateValues(self, *args, **kwargs)
    A = _swig_property(_posSymmPot.PosSymmPot_A_get, _posSymmPot.PosSymmPot_A_set)
    ATAMhalf = _swig_property(_posSymmPot.PosSymmPot_ATAMhalf_get, _posSymmPot.PosSymmPot_ATAMhalf_set)
    vectors = _swig_property(_posSymmPot.PosSymmPot_vectors_get, _posSymmPot.PosSymmPot_vectors_set)
    values = _swig_property(_posSymmPot.PosSymmPot_values_get, _posSymmPot.PosSymmPot_values_set)
    gamma = _swig_property(_posSymmPot.PosSymmPot_gamma_get, _posSymmPot.PosSymmPot_gamma_set)
    posVarRoot = _swig_property(_posSymmPot.PosSymmPot_posVarRoot_get, _posSymmPot.PosSymmPot_posVarRoot_set)

    def help(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _posSymmPot.PosSymmPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_setThreshold(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_posSymmPot.PosSymmPot_instanceData__get, _posSymmPot.PosSymmPot_instanceData__set)
    instanceDataCreate = _swig_property(_posSymmPot.PosSymmPot_instanceDataCreate_get, _posSymmPot.PosSymmPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_posSymmPot.PosSymmPot_instanceDataCleanup_get, _posSymmPot.PosSymmPot_instanceDataCleanup_set)
    modified = _swig_property(_posSymmPot.PosSymmPot_modified_get, _posSymmPot.PosSymmPot_modified_set)
    registeredSimulations = _swig_property(_posSymmPot.PosSymmPot_registeredSimulations_get, _posSymmPot.PosSymmPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_unRegister(self, *args, **kwargs)

class PosSymmPotPtr(PosSymmPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PosSymmPot

PosSymmPot_swigregister = _posSymmPot.PosSymmPot_swigregister
PosSymmPot_swigregister(PosSymmPot)


realPosSymmPot = PosSymmPot
def PosSymmPot(*args):
    from potProxy import PotProxy
    return PotProxy( realPosSymmPot(*args) )

class PosSymmPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _posSymmPot.new_PosSymmPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _posSymmPot.delete_PosSymmPot_LetterClass
    __del__ = lambda self: None

    def equivAtomSelPairs(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_equivAtomSelPairs(self, *args, **kwargs)

    def addEquivAtomSelPair(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_addEquivAtomSelPair(self, *args, **kwargs)

    def addEquivAtoms(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_addEquivAtoms(self, *args, **kwargs)

    def removeEquivAtomSelPair(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_removeEquivAtomSelPair(self, *args, **kwargs)

    def numEquivPairs(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_numEquivPairs(self, *args, **kwargs)

    def absoluteFit(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_absoluteFit(self, *args, **kwargs)

    def setAbsoluteFit(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_setAbsoluteFit(self, *args, **kwargs)

    def lowerBound(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_lowerBound(self, *args, **kwargs)

    def setLowerBound(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_setLowerBound(self, *args, **kwargs)

    def upperBound(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_upperBound(self, *args, **kwargs)

    def setUpperBound(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_setUpperBound(self, *args, **kwargs)

    def varScale(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_varScale(self, *args, **kwargs)

    def setVarScale(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_setVarScale(self, *args, **kwargs)

    def planarFit(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_planarFit(self, *args, **kwargs)

    def setPlanarFit(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_setPlanarFit(self, *args, **kwargs)

    def u(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_u(self, *args, **kwargs)

    def setU(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_setU(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_numRestraints(self, *args, **kwargs)

    def calcVarTensTerm(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_calcVarTensTerm(self, *args, **kwargs)

    def calcVarTens(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_calcVarTens(self, *args, **kwargs)

    def deltaVariance(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_deltaVariance(self, *args, **kwargs)

    def individualRMSDs(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_individualRMSDs(self, *args, **kwargs)

    def getEnsWeight(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_getEnsWeight(self, *args, **kwargs)

    def rotMat(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_rotMat(self, *args, **kwargs)

    def centroid(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_centroid(self, *args, **kwargs)

    def aveCoords(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_aveCoords(self, *args, **kwargs)

    def fitCoords(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_fitCoords(self, *args, **kwargs)

    def weight(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_weight(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_updateValues(self, *args, **kwargs)
    A = _swig_property(_posSymmPot.PosSymmPot_LetterClass_A_get, _posSymmPot.PosSymmPot_LetterClass_A_set)
    ATAMhalf = _swig_property(_posSymmPot.PosSymmPot_LetterClass_ATAMhalf_get, _posSymmPot.PosSymmPot_LetterClass_ATAMhalf_set)
    vectors = _swig_property(_posSymmPot.PosSymmPot_LetterClass_vectors_get, _posSymmPot.PosSymmPot_LetterClass_vectors_set)
    values = _swig_property(_posSymmPot.PosSymmPot_LetterClass_values_get, _posSymmPot.PosSymmPot_LetterClass_values_set)
    gamma = _swig_property(_posSymmPot.PosSymmPot_LetterClass_gamma_get, _posSymmPot.PosSymmPot_LetterClass_gamma_set)
    posVarRoot = _swig_property(_posSymmPot.PosSymmPot_LetterClass_posVarRoot_get, _posSymmPot.PosSymmPot_LetterClass_posVarRoot_set)

    def help(self, *args, **kwargs):
        return _posSymmPot.PosSymmPot_LetterClass_help(self, *args, **kwargs)

class PosSymmPot_LetterClassPtr(PosSymmPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PosSymmPot_LetterClass

PosSymmPot_LetterClass_swigregister = _posSymmPot.PosSymmPot_LetterClass_swigregister
PosSymmPot_LetterClass_swigregister(PosSymmPot_LetterClass)

class CDSList_Pair_AtomSel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_AtomSel___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _posSymmPot.new_CDSList_Pair_AtomSel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _posSymmPot.CDSList_Pair_AtomSel___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_AtomSel___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_AtomSel_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_AtomSel_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_AtomSel_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_AtomSel___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_AtomSel___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_AtomSel_help(self, *args, **kwargs)
    __swig_destroy__ = _posSymmPot.delete_CDSList_Pair_AtomSel
    __del__ = lambda self: None

class CDSList_Pair_AtomSelPtr(CDSList_Pair_AtomSel):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Pair_AtomSel

CDSList_Pair_AtomSel_swigregister = _posSymmPot.CDSList_Pair_AtomSel_swigregister
CDSList_Pair_AtomSel_swigregister(CDSList_Pair_AtomSel)

class CDSList_Pair_Atom(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_Atom___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _posSymmPot.new_CDSList_Pair_Atom(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _posSymmPot.CDSList_Pair_Atom___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_Atom___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_Atom_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_Atom_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_Atom_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_Atom___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_Atom___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _posSymmPot.CDSList_Pair_Atom_help(self, *args, **kwargs)
    __swig_destroy__ = _posSymmPot.delete_CDSList_Pair_Atom
    __del__ = lambda self: None

class CDSList_Pair_AtomPtr(CDSList_Pair_Atom):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Pair_Atom

CDSList_Pair_Atom_swigregister = _posSymmPot.CDSList_Pair_Atom_swigregister
CDSList_Pair_Atom_swigregister(CDSList_Pair_Atom)

class Pair_AtomSel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    a = _swig_property(_posSymmPot.Pair_AtomSel_a_get, _posSymmPot.Pair_AtomSel_a_set)
    b = _swig_property(_posSymmPot.Pair_AtomSel_b_get, _posSymmPot.Pair_AtomSel_b_set)

    def __init__(self, *args):
        this = _posSymmPot.new_Pair_AtomSel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args, **kwargs):
        return _posSymmPot.Pair_AtomSel___eq__(self, *args, **kwargs)
    __swig_destroy__ = _posSymmPot.delete_Pair_AtomSel
    __del__ = lambda self: None

class Pair_AtomSelPtr(Pair_AtomSel):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Pair_AtomSel

Pair_AtomSel_swigregister = _posSymmPot.Pair_AtomSel_swigregister
Pair_AtomSel_swigregister(Pair_AtomSel)


pyXplorHelp = help


def help(*args):
    return _posSymmPot.help(*args)
help = _posSymmPot.help


