# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ccrPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ccrPot')
    _ccrPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ccrPot', [dirname(__file__)])
        except ImportError:
            import _ccrPot
            return _ccrPot
        try:
            _mod = imp.load_module('_ccrPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ccrPot = swig_import_helper()
    del swig_import_helper
else:
    import _ccrPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _ccrPot.Modified_MOD_SELF
    MOD_SIMULATION = _ccrPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _ccrPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _ccrPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _ccrPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _ccrPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _ccrPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _ccrPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _ccrPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _ccrPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_ccrPot.ModifiedBase_modified_get, _ccrPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_ccrPot.ModifiedBase_registeredSimulations_get, _ccrPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _ccrPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _ccrPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _ccrPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _ccrPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _ccrPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_ccrPot.VarEnsWeights_ensWeights_get, _ccrPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_ccrPot.VarEnsWeights_mult_get, _ccrPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _ccrPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccrPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _ccrPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ccrPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _ccrPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _ccrPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _ccrPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _ccrPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccrPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _ccrPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class CCRPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _ccrPot.new_CCRPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _ccrPot.CCRPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _ccrPot.CCRPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _ccrPot.CCRPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _ccrPot.CCRPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _ccrPot.CCRPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _ccrPot.CCRPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _ccrPot.CCRPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _ccrPot.CCRPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _ccrPot.delete_CCRPot
    __del__ = lambda self: None

    def addRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_addRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _ccrPot.CCRPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _ccrPot.CCRPot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _ccrPot.CCRPot_energyMaybeDerivs2(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _ccrPot.CCRPot_rms(self, *args, **kwargs)

    def chi2(self, *args, **kwargs):
        return _ccrPot.CCRPot_chi2(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _ccrPot.CCRPot_deviation(self, *args, **kwargs)

    def correlation(self, *args, **kwargs):
        return _ccrPot.CCRPot_correlation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _ccrPot.CCRPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_numRestraints(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_restraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _ccrPot.CCRPot_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _ccrPot.CCRPot_showViolations(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _ccrPot.CCRPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _ccrPot.CCRPot_setVerbose(self, *args, **kwargs)

    def prefactor(self, *args, **kwargs):
        return _ccrPot.CCRPot_prefactor(self, *args, **kwargs)

    def setPrefactor(self, *args, **kwargs):
        return _ccrPot.CCRPot_setPrefactor(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _ccrPot.CCRPot_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _ccrPot.CCRPot_setPotType(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_setShowAllRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _ccrPot.CCRPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _ccrPot.CCRPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _ccrPot.CCRPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _ccrPot.CCRPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _ccrPot.CCRPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _ccrPot.CCRPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _ccrPot.CCRPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _ccrPot.CCRPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _ccrPot.CCRPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _ccrPot.CCRPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _ccrPot.CCRPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _ccrPot.CCRPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _ccrPot.CCRPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _ccrPot.CCRPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _ccrPot.CCRPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _ccrPot.CCRPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _ccrPot.CCRPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _ccrPot.CCRPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _ccrPot.CCRPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _ccrPot.CCRPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _ccrPot.CCRPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _ccrPot.CCRPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _ccrPot.CCRPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _ccrPot.CCRPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _ccrPot.CCRPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _ccrPot.CCRPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _ccrPot.CCRPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _ccrPot.CCRPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _ccrPot.CCRPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _ccrPot.CCRPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_ccrPot.CCRPot_instanceData__get, _ccrPot.CCRPot_instanceData__set)
    instanceDataCreate = _swig_property(_ccrPot.CCRPot_instanceDataCreate_get, _ccrPot.CCRPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_ccrPot.CCRPot_instanceDataCleanup_get, _ccrPot.CCRPot_instanceDataCleanup_set)
    modified = _swig_property(_ccrPot.CCRPot_modified_get, _ccrPot.CCRPot_modified_set)
    registeredSimulations = _swig_property(_ccrPot.CCRPot_registeredSimulations_get, _ccrPot.CCRPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _ccrPot.CCRPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _ccrPot.CCRPot_unRegister(self, *args, **kwargs)

class CCRPotPtr(CCRPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CCRPot

CCRPot_swigregister = _ccrPot.CCRPot_swigregister
CCRPot_swigregister(CCRPot)


realCCRPot = CCRPot
def CCRPot(*args):
    from potProxy import PotProxy
    return PotProxy( realCCRPot(*args) )

class Restraint_CCRPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _ccrPot.Restraint_CCRPot_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _ccrPot.new_Restraint_CCRPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _ccrPot.Restraint_CCRPot_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _ccrPot.Restraint_CCRPot_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _ccrPot.Restraint_CCRPot_setName(self, *args, **kwargs)
    __swig_destroy__ = _ccrPot.delete_Restraint_CCRPot
    __del__ = lambda self: None

class Restraint_CCRPotPtr(Restraint_CCRPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_CCRPot

Restraint_CCRPot_swigregister = _ccrPot.Restraint_CCRPot_swigregister
Restraint_CCRPot_swigregister(Restraint_CCRPot)

class CCRPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HARMONIC = _ccrPot.CCRPot_LetterClass_HARMONIC
    SQUARE = _ccrPot.CCRPot_LetterClass_SQUARE
    CORRELATION = _ccrPot.CCRPot_LetterClass_CORRELATION

    def __init__(self, *args, **kwargs):
        this = _ccrPot.new_CCRPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccrPot.delete_CCRPot_LetterClass
    __del__ = lambda self: None

    def addRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_addRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_energyMaybeDerivs2(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_rms(self, *args, **kwargs)

    def chi2(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_chi2(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_deviation(self, *args, **kwargs)

    def correlation(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_correlation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_numRestraints(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_restraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_showViolations(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_setVerbose(self, *args, **kwargs)

    def prefactor(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_prefactor(self, *args, **kwargs)

    def setPrefactor(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_setPrefactor(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_setPotType(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _ccrPot.CCRPot_LetterClass_help(self, *args, **kwargs)

class CCRPot_LetterClassPtr(CCRPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CCRPot_LetterClass

CCRPot_LetterClass_swigregister = _ccrPot.CCRPot_LetterClass_swigregister
CCRPot_LetterClass_swigregister(CCRPot_LetterClass)

class CCR_Restraint(Restraint_CCRPot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def calcd(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_calcd(self, *args, **kwargs)

    def setCalcd(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_setCalcd(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_obs(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_setObs(self, *args, **kwargs)

    def variance(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_variance(self, *args, **kwargs)

    def setVariance(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_setVariance(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_err(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_setErr(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_comment(self, *args, **kwargs)

    def setComment(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_setComment(self, *args, **kwargs)
    verbose = _swig_property(_ccrPot.CCR_Restraint_verbose_get, _ccrPot.CCR_Restraint_verbose_set)

    def __init__(self, *args, **kwargs):
        this = _ccrPot.new_CCR_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccrPot.delete_CCR_Restraint
    __del__ = lambda self: None

    def ok(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_ok(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_calcContrib(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_deriv(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_name(self, *args, **kwargs)
    contrib = _swig_property(_ccrPot.CCR_Restraint_contrib_get, _ccrPot.CCR_Restraint_contrib_set)

    def atomX1(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_atomX1(self, *args, **kwargs)

    def atomX2(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_atomX2(self, *args, **kwargs)

    def atomY1(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_atomY1(self, *args, **kwargs)

    def atomY2(self, *args, **kwargs):
        return _ccrPot.CCR_Restraint_atomY2(self, *args, **kwargs)

class CCR_RestraintPtr(CCR_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CCR_Restraint

CCR_Restraint_swigregister = _ccrPot.CCR_Restraint_swigregister
CCR_Restraint_swigregister(CCR_Restraint)

class rc_ptr_CCR_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _ccrPot.new_rc_ptr_CCR_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccrPot.delete_rc_ptr_CCR_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_release(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_calcd(self, *args, **kwargs)

    def setCalcd(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_setCalcd(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_obs(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_setObs(self, *args, **kwargs)

    def variance(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_variance(self, *args, **kwargs)

    def setVariance(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_setVariance(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_err(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_setErr(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_comment(self, *args, **kwargs)

    def setComment(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_setComment(self, *args, **kwargs)
    verbose = _swig_property(_ccrPot.rc_ptr_CCR_Restraint_verbose_get, _ccrPot.rc_ptr_CCR_Restraint_verbose_set)

    def ok(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_ok(self, *args, **kwargs)

    def calcContrib(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_calcContrib(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_deriv(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_name(self, *args, **kwargs)
    contrib = _swig_property(_ccrPot.rc_ptr_CCR_Restraint_contrib_get, _ccrPot.rc_ptr_CCR_Restraint_contrib_set)

    def atomX1(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_atomX1(self, *args, **kwargs)

    def atomX2(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_atomX2(self, *args, **kwargs)

    def atomY1(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_atomY1(self, *args, **kwargs)

    def atomY2(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_atomY2(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_violated(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _ccrPot.rc_ptr_CCR_Restraint_setName(self, *args, **kwargs)

class rc_ptr_CCR_RestraintPtr(rc_ptr_CCR_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_CCR_Restraint

rc_ptr_CCR_Restraint_swigregister = _ccrPot.rc_ptr_CCR_Restraint_swigregister
rc_ptr_CCR_Restraint_swigregister(rc_ptr_CCR_Restraint)

class CDSList_CCR_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _ccrPot.CDSList_CCR_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _ccrPot.new_CDSList_CCR_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _ccrPot.CDSList_CCR_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _ccrPot.CDSList_CCR_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _ccrPot.CDSList_CCR_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _ccrPot.CDSList_CCR_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _ccrPot.CDSList_CCR_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _ccrPot.CDSList_CCR_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _ccrPot.CDSList_CCR_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _ccrPot.CDSList_CCR_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _ccrPot.delete_CDSList_CCR_Restraint
    __del__ = lambda self: None

class CDSList_CCR_RestraintPtr(CDSList_CCR_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_CCR_Restraint

CDSList_CCR_Restraint_swigregister = _ccrPot.CDSList_CCR_Restraint_swigregister
CDSList_CCR_Restraint_swigregister(CDSList_CCR_Restraint)


pyXplorHelp = help


def help(*args):
    return _ccrPot.help(*args)
help = _ccrPot.help


