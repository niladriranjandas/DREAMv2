# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_xplorSimulation')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_xplorSimulation')
    _xplorSimulation = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_xplorSimulation', [dirname(__file__)])
        except ImportError:
            import _xplorSimulation
            return _xplorSimulation
        try:
            _mod = imp.load_module('_xplorSimulation', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _xplorSimulation = swig_import_helper()
    del swig_import_helper
else:
    import _xplorSimulation
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _xplorSimulation.Modified_MOD_SELF
    MOD_SIMULATION = _xplorSimulation.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _xplorSimulation.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _xplorSimulation.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _xplorSimulation.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _xplorSimulation.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _xplorSimulation.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _xplorSimulation.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _xplorSimulation.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _xplorSimulation.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_xplorSimulation.ModifiedBase_modified_get, _xplorSimulation.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_xplorSimulation.ModifiedBase_registeredSimulations_get, _xplorSimulation.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _xplorSimulation.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _xplorSimulation.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _xplorSimulation.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _xplorSimulation.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _xplorSimulation.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)


def fromSimulation(*args, **kwargs):
    return _xplorSimulation.fromSimulation(*args, **kwargs)
fromSimulation = _xplorSimulation.fromSimulation

def getXplorSimulation(simulation=0):
   """ given a simulation, determine the associated XplorSimulation
   if simulation is None, use <m simulation>.currentSimulation.
   """
   sim = simulation
   if not sim:
       import simulation
       sim = simulation.currentSimulation()
       pass
   if sim.type() == "EnsembleSimulation":
       from ensembleSimulation import fromSimulation
       sim = fromSimulation(sim).subSim()
   if sim.type() == "EnsembleMemberSimulation":
       try:
           sim = sim.subSim()
       except:
           from ensembleSimulation import memberFromSimulation
           sim = memberFromSimulation(sim).subSim()
           pass
       pass
   while sim.type() == "SymSimulation":
       from symSimulation import fromSimulation
       sim = fromSimulation(sim).subSel().simulation()
       pass
   if sim.type() != "XplorSimulation":
       raise Exception("could not find an XplorSimulation")
   import xplorSimulation
   return xplorSimulation.fromSimulation(sim)


import simulation
class XplorSimulation(simulation.Simulation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _xplorSimulation.new_XplorSimulation(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _xplorSimulation.delete_XplorSimulation
    __del__ = lambda self: None

    def type(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_type(self, *args, **kwargs)

    def deleteAtoms_byIndex(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_deleteAtoms_byIndex(self, *args, **kwargs)

    def setAtomPosArr(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setAtomPosArr(self, *args, **kwargs)

    def setAtomVelArr(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setAtomVelArr(self, *args, **kwargs)

    def setAtomMassArr(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setAtomMassArr(self, *args, **kwargs)

    def setAtomPos(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setAtomPos(self, *args, **kwargs)

    def setAtomVel(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setAtomVel(self, *args, **kwargs)

    def setAtomMass(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setAtomMass(self, *args, **kwargs)

    def setAtomFric(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setAtomFric(self, *args, **kwargs)

    def setAtomCharge(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setAtomCharge(self, *args, **kwargs)

    def setSegmentName(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setSegmentName(self, *args, **kwargs)

    def setResidueName(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setResidueName(self, *args, **kwargs)

    def setResidueNum(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setResidueNum(self, *args, **kwargs)

    def setAtomName(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setAtomName(self, *args, **kwargs)

    def setChemType(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setChemType(self, *args, **kwargs)

    def wrap(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_wrap(self, *args, **kwargs)

    def rcWrap(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_rcWrap(self, *args, **kwargs)

    def select(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_select(self, *args, **kwargs)

    def potList(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_potList(self, *args, **kwargs)

    def xplorVars(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_xplorVars(self, *args, **kwargs)

    def initFrom(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_initFrom(self, *args, **kwargs)

    def syncFrom(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_syncFrom(self, *args, **kwargs)

    def syncAtomIDFrom(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_syncAtomIDFrom(self, *args, **kwargs)

    def syncPosFrom(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_syncPosFrom(self, *args, **kwargs)

    def syncVelFrom(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_syncVelFrom(self, *args, **kwargs)

    def syncFricFrom(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_syncFricFrom(self, *args, **kwargs)

    def syncChargeFrom(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_syncChargeFrom(self, *args, **kwargs)

    def syncMassFrom(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_syncMassFrom(self, *args, **kwargs)

    def syncTo(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_syncTo(self, *args, **kwargs)

    def scriptingIndex(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_scriptingIndex(self, *args, **kwargs)
    initSimulation = staticmethod(_xplorSimulation.XplorSimulation_initSimulation)
    defaultSimulation = staticmethod(_xplorSimulation.XplorSimulation_defaultSimulation)
    resetDefaultSimulation = staticmethod(_xplorSimulation.XplorSimulation_resetDefaultSimulation)
    deleteDefaultSimulation = staticmethod(_xplorSimulation.XplorSimulation_deleteDefaultSimulation)

    def calcNonXplorEnergyAndDeriv(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_calcNonXplorEnergyAndDeriv(self, *args, **kwargs)

    def setModifiedProp(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_setModifiedProp(self, *args, **kwargs)


    def deleteAtoms(self,arg,
                    noSync=False):
        from atomSel import AtomSel
        if str(type(arg)).find('AtomSel')>=0:
          self.deleteAtoms_byIndex( arg.indices() , noSync )
        else:
          self.deleteAtoms_byIndex( AtomSel(arg,self).indices() , noSync )
        import protocol
        protocol.updatePseudoAtoms(self)
        import ensembleSimulation
        if ensembleSimulation.currentSimulation()!= None:
            print("Warning: deleteAtoms: call EnsembleSimulation.deleteAtoms() "
                  "instead.")
        pass

    def addAtom(self,
                atomName,
                residueNum,
                residueName,
                chemicalType="",
                segmentName="",
                mass=10.,
                pos=None,
                isPseudo=False):
        index = self.numAtoms()
        cmd = psfTemplate.replace('_n__','%-4d'%residueNum)
        cmd = cmd.replace('MAAAAAS','%7f'%mass)
        cmd = cmd.replace('SGMT','%-4s'%segmentName)
        cmd = cmd.replace('-a--','%-4s'%atomName)
        cmd = cmd.replace('-r--','%-4s'%residueName)
        cmd = cmd.replace('-c--','%-4s'%chemicalType)
        self.fastCommand(cmd)
        self.syncFrom()

        if pos:
            self.setAtomPos(index,pos)
            pass
        if isPseudo:
            import protocol
            protocol.addPseudoResName(residueName)
            protocol.updatePseudoAtoms()
            pass
        return self.atomByID(index)

    def enableOutput(self,state):
    	return self.wrap().enableOutput(state)
    def disableOutput(self):
    	return self.wrap().disableOutput()

    def shell(self):
            ret = self.wrap().shell()
            import protocol
            protocol.updatePseudoAtoms(self)
            return ret
    def select(self,selString):
    	return self.wrap().select(selString);
    def command(self,c,r=()): 
            ret = self.wrap().command(c,r)
            import protocol
            protocol.updatePseudoAtoms()
            return ret
    def fastCommand(self,c,r=()):
       """call <m xplorWrap>.XplorWrap.fastCommand
       """
       return self.wrap().fastCommand(c,r)


    __oldinit__=__init__
    def __init__(self, clone=False):
        if not clone: #need to reset LD_LIBRARY_PATH to run bare xplor executable
            import os
            LD_LIBPATH_VAR = os.environ['LD_LIBPATH_VAR']
    #global orig_LD_LIBRARY_PATH
            os.environ[LD_LIBPATH_VAR] = orig_LD_LIBRARY_PATH
            pass
        self.__oldinit__(clone)
        if clone:
    #update protocol.topologyInitialized to reflect fact
    #that cloned XplorSimulation has already been initialized.
    # Should fix s.t. protocol.paramsInitialized also updated
            import protocol
            from simulation import currentSimulation
            from xplorSimulation import getXplorSimulation
            parentSim = getXplorSimulation(currentSimulation())
            for key in protocol.topologyInitialized.keys():
                if parentSim.name() in protocol.topologyInitialized[key]:
                    protocol.topologyInitialized[key].append( self.name() )
                    pass
                pass
            pass
        return


    def help(self, *args, **kwargs):
        return _xplorSimulation.XplorSimulation_help(self, *args, **kwargs)

class XplorSimulationPtr(XplorSimulation):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = XplorSimulation

XplorSimulation_swigregister = _xplorSimulation.XplorSimulation_swigregister
XplorSimulation_swigregister(XplorSimulation)

def XplorSimulation_initSimulation(*args):
    return _xplorSimulation.XplorSimulation_initSimulation(*args)
XplorSimulation_initSimulation = _xplorSimulation.XplorSimulation_initSimulation

def XplorSimulation_defaultSimulation(*args):
    return _xplorSimulation.XplorSimulation_defaultSimulation(*args)
XplorSimulation_defaultSimulation = _xplorSimulation.XplorSimulation_defaultSimulation

def XplorSimulation_resetDefaultSimulation(*args):
    return _xplorSimulation.XplorSimulation_resetDefaultSimulation(*args)
XplorSimulation_resetDefaultSimulation = _xplorSimulation.XplorSimulation_resetDefaultSimulation

def XplorSimulation_deleteDefaultSimulation(*args):
    return _xplorSimulation.XplorSimulation_deleteDefaultSimulation(*args)
XplorSimulation_deleteDefaultSimulation = _xplorSimulation.XplorSimulation_deleteDefaultSimulation


# the string _n__ is replaced by the residue number
# the string SGMT is replaced by the segment name
# the string -r-- is replaced by the residue name
# the string -a-- is replaced by the atom name
# the string -a-- is replaced by the chemical type
# the string MAAAAAS is replaced by the mass
psfTemplate = """
structure
PSF

       1 !NTITLE
 REMARKS   addDummyAtom: auto-generated structure parameters

       1 !NATOM
       1 SGMT _n__ -r-- -a-- -c--   0.000000E+00   MAAAAAS           0

       0 !NBOND: bonds


       0 !NTHETA: angles


       0 !NPHI: dihedrals


       0 !NIMPHI: impropers


       0 !NDON: donors


       0 !NACC: acceptors


       0 !NNB

       0       0       0       0

       1       0 !NGRP
       0       0       0
end       
"""


def currentSimulation(*args):
    return _xplorSimulation.currentSimulation(*args)
currentSimulation = _xplorSimulation.currentSimulation

def makeCurrent(*args, **kwargs):
    return _xplorSimulation.makeCurrent(*args, **kwargs)
makeCurrent = _xplorSimulation.makeCurrent

pyXplorHelp = help


def help(*args):
    return _xplorSimulation.help(*args)
help = _xplorSimulation.help


