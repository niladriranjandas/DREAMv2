# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cosRatioPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cosRatioPot')
    _cosRatioPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cosRatioPot', [dirname(__file__)])
        except ImportError:
            import _cosRatioPot
            return _cosRatioPot
        try:
            _mod = imp.load_module('_cosRatioPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cosRatioPot = swig_import_helper()
    del swig_import_helper
else:
    import _cosRatioPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _cosRatioPot.Modified_MOD_SELF
    MOD_SIMULATION = _cosRatioPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _cosRatioPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _cosRatioPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _cosRatioPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _cosRatioPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _cosRatioPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _cosRatioPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _cosRatioPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _cosRatioPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_cosRatioPot.ModifiedBase_modified_get, _cosRatioPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_cosRatioPot.ModifiedBase_registeredSimulations_get, _cosRatioPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _cosRatioPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _cosRatioPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _cosRatioPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _cosRatioPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _cosRatioPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_cosRatioPot.VarEnsWeights_ensWeights_get, _cosRatioPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_cosRatioPot.VarEnsWeights_mult_get, _cosRatioPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _cosRatioPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosRatioPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _cosRatioPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _cosRatioPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _cosRatioPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _cosRatioPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _cosRatioPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cosRatioPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosRatioPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _cosRatioPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class CosRatioPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cosRatioPot.new_CosRatioPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _cosRatioPot.delete_CosRatioPot
    __del__ = lambda self: None

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_energyMaybeDerivs2(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_info(self, *args, **kwargs)

    def ratio(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_ratio(self, *args, **kwargs)

    def setRatio(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setRatio(self, *args, **kwargs)

    def targetType(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_targetType(self, *args, **kwargs)

    def setTargetType(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setTargetType(self, *args, **kwargs)

    def atom01(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_atom01(self, *args, **kwargs)

    def setAtom01(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setAtom01(self, *args, **kwargs)

    def atoma1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_atoma1(self, *args, **kwargs)

    def setAtoma1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setAtoma1(self, *args, **kwargs)

    def atomb1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_atomb1(self, *args, **kwargs)

    def setAtomb1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setAtomb1(self, *args, **kwargs)

    def atom02(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_atom02(self, *args, **kwargs)

    def setAtom02(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setAtom02(self, *args, **kwargs)

    def atoma2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_atoma2(self, *args, **kwargs)

    def setAtoma2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setAtoma2(self, *args, **kwargs)

    def atomb2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_atomb2(self, *args, **kwargs)

    def setAtomb2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setAtomb2(self, *args, **kwargs)

    def cos1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_cos1(self, *args, **kwargs)

    def cos2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_cos2(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _cosRatioPot.CosRatioPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_cosRatioPot.CosRatioPot_instanceData__get, _cosRatioPot.CosRatioPot_instanceData__set)
    instanceDataCreate = _swig_property(_cosRatioPot.CosRatioPot_instanceDataCreate_get, _cosRatioPot.CosRatioPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_cosRatioPot.CosRatioPot_instanceDataCleanup_get, _cosRatioPot.CosRatioPot_instanceDataCleanup_set)
    modified = _swig_property(_cosRatioPot.CosRatioPot_modified_get, _cosRatioPot.CosRatioPot_modified_set)
    registeredSimulations = _swig_property(_cosRatioPot.CosRatioPot_registeredSimulations_get, _cosRatioPot.CosRatioPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_unRegister(self, *args, **kwargs)

class CosRatioPotPtr(CosRatioPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CosRatioPot

CosRatioPot_swigregister = _cosRatioPot.CosRatioPot_swigregister
CosRatioPot_swigregister(CosRatioPot)


realCosRatioPot = CosRatioPot
def CosRatioPot(*args):
    from potProxy import PotProxy
    return PotProxy( realCosRatioPot(*args) )

class Cos2RatioPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cosRatioPot.new_Cos2RatioPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _cosRatioPot.delete_Cos2RatioPot
    __del__ = lambda self: None

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_energyMaybeDerivs1(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_info(self, *args, **kwargs)

    def atom01(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atom01(self, *args, **kwargs)

    def setAtom01(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtom01(self, *args, **kwargs)

    def atoma1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atoma1(self, *args, **kwargs)

    def setAtoma1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtoma1(self, *args, **kwargs)

    def atomb1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atomb1(self, *args, **kwargs)

    def setAtomb1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtomb1(self, *args, **kwargs)

    def atom02(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atom02(self, *args, **kwargs)

    def setAtom02(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtom02(self, *args, **kwargs)

    def atoma2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atoma2(self, *args, **kwargs)

    def setAtoma2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtoma2(self, *args, **kwargs)

    def atomb2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atomb2(self, *args, **kwargs)

    def setAtomb2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtomb2(self, *args, **kwargs)

    def atom03(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atom03(self, *args, **kwargs)

    def setAtom03(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtom03(self, *args, **kwargs)

    def atoma3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atoma3(self, *args, **kwargs)

    def setAtoma3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtoma3(self, *args, **kwargs)

    def atomb3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atomb3(self, *args, **kwargs)

    def setAtomb3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtomb3(self, *args, **kwargs)

    def atom04(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atom04(self, *args, **kwargs)

    def setAtom04(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtom04(self, *args, **kwargs)

    def atoma4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atoma4(self, *args, **kwargs)

    def setAtoma4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtoma4(self, *args, **kwargs)

    def atomb4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_atomb4(self, *args, **kwargs)

    def setAtomb4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setAtomb4(self, *args, **kwargs)

    def cos1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_cos1(self, *args, **kwargs)

    def cos2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_cos2(self, *args, **kwargs)

    def cos3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_cos3(self, *args, **kwargs)

    def cos4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_cos4(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _cosRatioPot.Cos2RatioPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_cosRatioPot.Cos2RatioPot_instanceData__get, _cosRatioPot.Cos2RatioPot_instanceData__set)
    instanceDataCreate = _swig_property(_cosRatioPot.Cos2RatioPot_instanceDataCreate_get, _cosRatioPot.Cos2RatioPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_cosRatioPot.Cos2RatioPot_instanceDataCleanup_get, _cosRatioPot.Cos2RatioPot_instanceDataCleanup_set)
    modified = _swig_property(_cosRatioPot.Cos2RatioPot_modified_get, _cosRatioPot.Cos2RatioPot_modified_set)
    registeredSimulations = _swig_property(_cosRatioPot.Cos2RatioPot_registeredSimulations_get, _cosRatioPot.Cos2RatioPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_unRegister(self, *args, **kwargs)

class Cos2RatioPotPtr(Cos2RatioPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Cos2RatioPot

Cos2RatioPot_swigregister = _cosRatioPot.Cos2RatioPot_swigregister
Cos2RatioPot_swigregister(Cos2RatioPot)


realCos2RatioPot = Cos2RatioPot
def Cos2RatioPot(*args):
    from potProxy import PotProxy
    return PotProxy( realCos2RatioPot(*args) )

class CosRatioPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    AVERAGE = _cosRatioPot.CosRatioPot_LetterClass_AVERAGE
    FIXED = _cosRatioPot.CosRatioPot_LetterClass_FIXED

    def __init__(self, *args, **kwargs):
        this = _cosRatioPot.new_CosRatioPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosRatioPot.delete_CosRatioPot_LetterClass
    __del__ = lambda self: None

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_energyMaybeDerivs2(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_info(self, *args, **kwargs)

    def ratio(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_ratio(self, *args, **kwargs)

    def setRatio(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_setRatio(self, *args, **kwargs)

    def targetType(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_targetType(self, *args, **kwargs)

    def setTargetType(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_setTargetType(self, *args, **kwargs)

    def atom01(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_atom01(self, *args, **kwargs)

    def setAtom01(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_setAtom01(self, *args, **kwargs)

    def atoma1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_atoma1(self, *args, **kwargs)

    def setAtoma1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_setAtoma1(self, *args, **kwargs)

    def atomb1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_atomb1(self, *args, **kwargs)

    def setAtomb1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_setAtomb1(self, *args, **kwargs)

    def atom02(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_atom02(self, *args, **kwargs)

    def setAtom02(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_setAtom02(self, *args, **kwargs)

    def atoma2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_atoma2(self, *args, **kwargs)

    def setAtoma2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_setAtoma2(self, *args, **kwargs)

    def atomb2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_atomb2(self, *args, **kwargs)

    def setAtomb2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_setAtomb2(self, *args, **kwargs)

    def cos1(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_cos1(self, *args, **kwargs)

    def cos2(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_cos2(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cosRatioPot.CosRatioPot_LetterClass_help(self, *args, **kwargs)

class CosRatioPot_LetterClassPtr(CosRatioPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CosRatioPot_LetterClass

CosRatioPot_LetterClass_swigregister = _cosRatioPot.CosRatioPot_LetterClass_swigregister
CosRatioPot_LetterClass_swigregister(CosRatioPot_LetterClass)

class Cos2RatioPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _cosRatioPot.new_Cos2RatioPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cosRatioPot.delete_Cos2RatioPot_LetterClass
    __del__ = lambda self: None

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_info(self, *args, **kwargs)

    def atom01(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atom01(self, *args, **kwargs)

    def setAtom01(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtom01(self, *args, **kwargs)

    def atoma1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atoma1(self, *args, **kwargs)

    def setAtoma1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtoma1(self, *args, **kwargs)

    def atomb1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atomb1(self, *args, **kwargs)

    def setAtomb1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtomb1(self, *args, **kwargs)

    def atom02(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atom02(self, *args, **kwargs)

    def setAtom02(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtom02(self, *args, **kwargs)

    def atoma2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atoma2(self, *args, **kwargs)

    def setAtoma2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtoma2(self, *args, **kwargs)

    def atomb2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atomb2(self, *args, **kwargs)

    def setAtomb2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtomb2(self, *args, **kwargs)

    def atom03(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atom03(self, *args, **kwargs)

    def setAtom03(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtom03(self, *args, **kwargs)

    def atoma3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atoma3(self, *args, **kwargs)

    def setAtoma3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtoma3(self, *args, **kwargs)

    def atomb3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atomb3(self, *args, **kwargs)

    def setAtomb3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtomb3(self, *args, **kwargs)

    def atom04(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atom04(self, *args, **kwargs)

    def setAtom04(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtom04(self, *args, **kwargs)

    def atoma4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atoma4(self, *args, **kwargs)

    def setAtoma4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtoma4(self, *args, **kwargs)

    def atomb4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_atomb4(self, *args, **kwargs)

    def setAtomb4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_setAtomb4(self, *args, **kwargs)

    def cos1(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_cos1(self, *args, **kwargs)

    def cos2(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_cos2(self, *args, **kwargs)

    def cos3(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_cos3(self, *args, **kwargs)

    def cos4(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_cos4(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _cosRatioPot.Cos2RatioPot_LetterClass_help(self, *args, **kwargs)

class Cos2RatioPot_LetterClassPtr(Cos2RatioPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Cos2RatioPot_LetterClass

Cos2RatioPot_LetterClass_swigregister = _cosRatioPot.Cos2RatioPot_LetterClass_swigregister
Cos2RatioPot_LetterClass_swigregister(Cos2RatioPot_LetterClass)


pyXplorHelp = help


def help(*args):
    return _cosRatioPot.help(*args)
help = _cosRatioPot.help


