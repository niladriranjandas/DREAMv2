# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_saTensor')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_saTensor')
    _saTensor = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_saTensor', [dirname(__file__)])
        except ImportError:
            import _saTensor
            return _saTensor
        try:
            _mod = imp.load_module('_saTensor', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _saTensor = swig_import_helper()
    del swig_import_helper
else:
    import _saTensor
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _saTensor.Modified_MOD_SELF
    MOD_SIMULATION = _saTensor.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _saTensor.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _saTensor.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _saTensor.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _saTensor.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _saTensor.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _saTensor.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _saTensor.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _saTensor.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_saTensor.ModifiedBase_modified_get, _saTensor.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_saTensor.ModifiedBase_registeredSimulations_get, _saTensor.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _saTensor.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _saTensor.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _saTensor.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _saTensor.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _saTensor.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_saTensor.VarEnsWeights_ensWeights_get, _saTensor.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_saTensor.VarEnsWeights_mult_get, _saTensor.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _saTensor.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _saTensor.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _saTensor.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _saTensor.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _saTensor.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _saTensor.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _saTensor.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _saTensor.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _saTensor.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _saTensor.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _saTensor.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _saTensor.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _saTensor.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _saTensor.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _saTensor.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _saTensor.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _saTensor.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _saTensor.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _saTensor.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _saTensor.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _saTensor.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _saTensor.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _saTensor.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _saTensor.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _saTensor.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _saTensor.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _saTensor.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _saTensor.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _saTensor.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _saTensor.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class SATensor(ModifiedBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _saTensor.new_SATensor(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    esim = _swig_property(_saTensor.SATensor_esim_get, _saTensor.SATensor_esim_set)

    def spherical_sampling_init(self, *args, **kwargs):
        return _saTensor.SATensor_spherical_sampling_init(self, *args, **kwargs)

    def spherical_probability_get(self, *args, **kwargs):
        return _saTensor.SATensor_spherical_probability_get(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _saTensor.SATensor_instanceName(self, *args, **kwargs)

    def setInstanceName(self, *args, **kwargs):
        return _saTensor.SATensor_setInstanceName(self, *args, **kwargs)

    def domainSel(self, *args, **kwargs):
        return _saTensor.SATensor_domainSel(self, *args, **kwargs)

    def setDomainSel(self, *args, **kwargs):
        return _saTensor.SATensor_setDomainSel(self, *args, **kwargs)

    def freeDist(self, *args, **kwargs):
        return _saTensor.SATensor_freeDist(self, *args, **kwargs)

    def setFreeDist(self, *args, **kwargs):
        return _saTensor.SATensor_setFreeDist(self, *args, **kwargs)

    def sphericalN(self, *args, **kwargs):
        return _saTensor.SATensor_sphericalN(self, *args, **kwargs)

    def setSphericalN(self, *args, **kwargs):
        return _saTensor.SATensor_setSphericalN(self, *args, **kwargs)

    def sphericalG(self, *args, **kwargs):
        return _saTensor.SATensor_sphericalG(self, *args, **kwargs)

    def setSphericalG(self, *args, **kwargs):
        return _saTensor.SATensor_setSphericalG(self, *args, **kwargs)

    def irredTensor(self, *args, **kwargs):
        return _saTensor.SATensor_irredTensor(self, *args, **kwargs)

    def oritensor_irred_get(self, *args, **kwargs):
        return _saTensor.SATensor_oritensor_irred_get(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _saTensor.SATensor_updateValues(self, *args, **kwargs)

    def accumDerivs(self, *args, **kwargs):
        return _saTensor.SATensor_accumDerivs(self, *args, **kwargs)
    c2_real = staticmethod(_saTensor.SATensor_c2_real)
    c2_real_deriv = staticmethod(_saTensor.SATensor_c2_real_deriv)
    probSum = _swig_property(_saTensor.SATensor_probSum_get, _saTensor.SATensor_probSum_set)
    avector_real = _swig_property(_saTensor.SATensor_avector_real_get, _saTensor.SATensor_avector_real_set)
    __swig_destroy__ = _saTensor.delete_SATensor
    __del__ = lambda self: None

class SATensorPtr(SATensor):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SATensor

SATensor_swigregister = _saTensor.SATensor_swigregister
SATensor_swigregister(SATensor)

def SATensor_c2_real(*args, **kwargs):
    return _saTensor.SATensor_c2_real(*args, **kwargs)
SATensor_c2_real = _saTensor.SATensor_c2_real

def SATensor_c2_real_deriv(*args, **kwargs):
    return _saTensor.SATensor_c2_real_deriv(*args, **kwargs)
SATensor_c2_real_deriv = _saTensor.SATensor_c2_real_deriv

class rc_SATensor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _saTensor.new_rc_SATensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _saTensor.delete_rc_SATensor
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _saTensor.rc_SATensor___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _saTensor.rc_SATensor___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _saTensor.rc_SATensor_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _saTensor.rc_SATensor_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _saTensor.rc_SATensor_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _saTensor.rc_SATensor_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _saTensor.rc_SATensor_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _saTensor.rc_SATensor_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _saTensor.rc_SATensor_release(self, *args, **kwargs)
    esim = _swig_property(_saTensor.rc_SATensor_esim_get, _saTensor.rc_SATensor_esim_set)

    def spherical_sampling_init(self, *args, **kwargs):
        return _saTensor.rc_SATensor_spherical_sampling_init(self, *args, **kwargs)

    def spherical_probability_get(self, *args, **kwargs):
        return _saTensor.rc_SATensor_spherical_probability_get(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _saTensor.rc_SATensor_instanceName(self, *args, **kwargs)

    def setInstanceName(self, *args, **kwargs):
        return _saTensor.rc_SATensor_setInstanceName(self, *args, **kwargs)

    def domainSel(self, *args, **kwargs):
        return _saTensor.rc_SATensor_domainSel(self, *args, **kwargs)

    def setDomainSel(self, *args, **kwargs):
        return _saTensor.rc_SATensor_setDomainSel(self, *args, **kwargs)

    def freeDist(self, *args, **kwargs):
        return _saTensor.rc_SATensor_freeDist(self, *args, **kwargs)

    def setFreeDist(self, *args, **kwargs):
        return _saTensor.rc_SATensor_setFreeDist(self, *args, **kwargs)

    def sphericalN(self, *args, **kwargs):
        return _saTensor.rc_SATensor_sphericalN(self, *args, **kwargs)

    def setSphericalN(self, *args, **kwargs):
        return _saTensor.rc_SATensor_setSphericalN(self, *args, **kwargs)

    def sphericalG(self, *args, **kwargs):
        return _saTensor.rc_SATensor_sphericalG(self, *args, **kwargs)

    def setSphericalG(self, *args, **kwargs):
        return _saTensor.rc_SATensor_setSphericalG(self, *args, **kwargs)

    def irredTensor(self, *args, **kwargs):
        return _saTensor.rc_SATensor_irredTensor(self, *args, **kwargs)

    def oritensor_irred_get(self, *args, **kwargs):
        return _saTensor.rc_SATensor_oritensor_irred_get(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _saTensor.rc_SATensor_updateValues(self, *args, **kwargs)

    def accumDerivs(self, *args, **kwargs):
        return _saTensor.rc_SATensor_accumDerivs(self, *args, **kwargs)

    def c2_real(self, *args, **kwargs):
        return _saTensor.rc_SATensor_c2_real(self, *args, **kwargs)

    def c2_real_deriv(self, *args, **kwargs):
        return _saTensor.rc_SATensor_c2_real_deriv(self, *args, **kwargs)
    probSum = _swig_property(_saTensor.rc_SATensor_probSum_get, _saTensor.rc_SATensor_probSum_set)
    avector_real = _swig_property(_saTensor.rc_SATensor_avector_real_get, _saTensor.rc_SATensor_avector_real_set)
    modified = _swig_property(_saTensor.rc_SATensor_modified_get, _saTensor.rc_SATensor_modified_set)
    registeredSimulations = _swig_property(_saTensor.rc_SATensor_registeredSimulations_get, _saTensor.rc_SATensor_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _saTensor.rc_SATensor_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _saTensor.rc_SATensor_unRegister(self, *args, **kwargs)

class rc_SATensorPtr(rc_SATensor):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_SATensor

rc_SATensor_swigregister = _saTensor.rc_SATensor_swigregister
rc_SATensor_swigregister(rc_SATensor)


(SATensor,wrapped_SATensor) = (rc_SATensor,SATensor)

__oldinit__ = SATensor.__init__
def newinit(self,*args):
    wrapped = wrapped_SATensor(*args)
    wrapped.this.disown()
    __oldinit__(self,wrapped)
SATensor.__init__=newinit


pyXplorHelp = help


def help(*args):
    return _saTensor.help(*args)
help = _saTensor.help


