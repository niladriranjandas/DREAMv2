# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_distSplinePot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_distSplinePot')
    _distSplinePot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_distSplinePot', [dirname(__file__)])
        except ImportError:
            import _distSplinePot
            return _distSplinePot
        try:
            _mod = imp.load_module('_distSplinePot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _distSplinePot = swig_import_helper()
    del swig_import_helper
else:
    import _distSplinePot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _distSplinePot.Modified_MOD_SELF
    MOD_SIMULATION = _distSplinePot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _distSplinePot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _distSplinePot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _distSplinePot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _distSplinePot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _distSplinePot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _distSplinePot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _distSplinePot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _distSplinePot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_distSplinePot.ModifiedBase_modified_get, _distSplinePot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_distSplinePot.ModifiedBase_registeredSimulations_get, _distSplinePot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _distSplinePot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _distSplinePot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _distSplinePot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _distSplinePot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _distSplinePot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class DistSplinePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _distSplinePot.new_DistSplinePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _distSplinePot.delete_DistSplinePot
    __del__ = lambda self: None

    def simulation(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_simulation(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_energy(self, *args, **kwargs)

    def sw(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_sw(self, *args, **kwargs)

    def dsw(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_dsw(self, *args, **kwargs)

    def dE_dr(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_dE_dr(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_info(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_numRestraints(self, *args, **kwargs)

    def clearRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_clearRestraints(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_addRestraints(self, *args, **kwargs)

    def addRestraint(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_addRestraint(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_restraints(self, *args, **kwargs)
    spline = _swig_property(_distSplinePot.DistSplinePot_spline_get, _distSplinePot.DistSplinePot_spline_set)

    def rValues(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_rValues(self, *args, **kwargs)

    def eValues(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_eValues(self, *args, **kwargs)

    def rOn(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_rOn(self, *args, **kwargs)

    def setROn(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_setROn(self, *args, **kwargs)

    def rOff(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_rOff(self, *args, **kwargs)

    def setROff(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_setROff(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_setAveType(self, *args, **kwargs)

    def violEnergy(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_violEnergy(self, *args, **kwargs)

    def setViolEnergy(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_setViolEnergy(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_setShowAllRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_distSplinePot.DistSplinePot_instanceData__get, _distSplinePot.DistSplinePot_instanceData__set)
    instanceDataCreate = _swig_property(_distSplinePot.DistSplinePot_instanceDataCreate_get, _distSplinePot.DistSplinePot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_distSplinePot.DistSplinePot_instanceDataCleanup_get, _distSplinePot.DistSplinePot_instanceDataCleanup_set)
    modified = _swig_property(_distSplinePot.DistSplinePot_modified_get, _distSplinePot.DistSplinePot_modified_set)
    registeredSimulations = _swig_property(_distSplinePot.DistSplinePot_registeredSimulations_get, _distSplinePot.DistSplinePot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_unRegister(self, *args, **kwargs)

class DistSplinePotPtr(DistSplinePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = DistSplinePot

DistSplinePot_swigregister = _distSplinePot.DistSplinePot_swigregister
DistSplinePot_swigregister(DistSplinePot)


realDistSplinePot = DistSplinePot
def DistSplinePot(*args):
    from potProxy import PotProxy
    return PotProxy( realDistSplinePot(*args) )

PERIODIC_NOT = _distSplinePot.PERIODIC_NOT
PERIODIC_X = _distSplinePot.PERIODIC_X
PERIODIC_Y = _distSplinePot.PERIODIC_Y
class Restraint_DistSplinePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _distSplinePot.Restraint_DistSplinePot_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _distSplinePot.new_Restraint_DistSplinePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _distSplinePot.Restraint_DistSplinePot_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _distSplinePot.Restraint_DistSplinePot_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _distSplinePot.Restraint_DistSplinePot_setName(self, *args, **kwargs)
    __swig_destroy__ = _distSplinePot.delete_Restraint_DistSplinePot
    __del__ = lambda self: None

class Restraint_DistSplinePotPtr(Restraint_DistSplinePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_DistSplinePot

Restraint_DistSplinePot_swigregister = _distSplinePot.Restraint_DistSplinePot_swigregister
Restraint_DistSplinePot_swigregister(Restraint_DistSplinePot)

class DistSplinePot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    CENTER = _distSplinePot.DistSplinePot_LetterClass_CENTER
    SHORTEST = _distSplinePot.DistSplinePot_LetterClass_SHORTEST

    def __init__(self, *args, **kwargs):
        this = _distSplinePot.new_DistSplinePot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _distSplinePot.delete_DistSplinePot_LetterClass
    __del__ = lambda self: None

    def simulation(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_simulation(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_energy(self, *args, **kwargs)

    def sw(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_sw(self, *args, **kwargs)

    def dsw(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_dsw(self, *args, **kwargs)

    def dE_dr(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_dE_dr(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_info(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_numRestraints(self, *args, **kwargs)

    def clearRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_clearRestraints(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_addRestraints(self, *args, **kwargs)

    def addRestraint(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_addRestraint(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_showViolations(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_restraints(self, *args, **kwargs)
    spline = _swig_property(_distSplinePot.DistSplinePot_LetterClass_spline_get, _distSplinePot.DistSplinePot_LetterClass_spline_set)

    def rValues(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_rValues(self, *args, **kwargs)

    def eValues(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_eValues(self, *args, **kwargs)

    def rOn(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_rOn(self, *args, **kwargs)

    def setROn(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_setROn(self, *args, **kwargs)

    def rOff(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_rOff(self, *args, **kwargs)

    def setROff(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_setROff(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_setAveType(self, *args, **kwargs)

    def violEnergy(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_violEnergy(self, *args, **kwargs)

    def setViolEnergy(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_setViolEnergy(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _distSplinePot.DistSplinePot_LetterClass_help(self, *args, **kwargs)

class DistSplinePot_LetterClassPtr(DistSplinePot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = DistSplinePot_LetterClass

DistSplinePot_LetterClass_swigregister = _distSplinePot.DistSplinePot_LetterClass_swigregister
DistSplinePot_LetterClass_swigregister(DistSplinePot_LetterClass)

class DistSpline_Restraint(Restraint_DistSplinePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _distSplinePot.new_DistSpline_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def energy(self, *args, **kwargs):
        return _distSplinePot.DistSpline_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _distSplinePot.DistSpline_Restraint_deriv(self, *args, **kwargs)
    comment = _swig_property(_distSplinePot.DistSpline_Restraint_comment_get, _distSplinePot.DistSpline_Restraint_comment_set)
    dv = _swig_property(_distSplinePot.DistSpline_Restraint_dv_get, _distSplinePot.DistSpline_Restraint_dv_set)
    dist = _swig_property(_distSplinePot.DistSpline_Restraint_dist_get, _distSplinePot.DistSpline_Restraint_dist_set)
    sel0 = _swig_property(_distSplinePot.DistSpline_Restraint_sel0_get, _distSplinePot.DistSpline_Restraint_sel0_set)
    sel1 = _swig_property(_distSplinePot.DistSpline_Restraint_sel1_get, _distSplinePot.DistSpline_Restraint_sel1_set)
    atom0 = _swig_property(_distSplinePot.DistSpline_Restraint_atom0_get, _distSplinePot.DistSpline_Restraint_atom0_set)
    atom1 = _swig_property(_distSplinePot.DistSpline_Restraint_atom1_get, _distSplinePot.DistSpline_Restraint_atom1_set)

    def violated(self, *args, **kwargs):
        return _distSplinePot.DistSpline_Restraint_violated(self, *args, **kwargs)
    __swig_destroy__ = _distSplinePot.delete_DistSpline_Restraint
    __del__ = lambda self: None

class DistSpline_RestraintPtr(DistSpline_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = DistSpline_Restraint

DistSpline_Restraint_swigregister = _distSplinePot.DistSpline_Restraint_swigregister
DistSpline_Restraint_swigregister(DistSpline_Restraint)

class rc_ptr_DistSpline_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _distSplinePot.new_rc_ptr_DistSpline_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _distSplinePot.delete_rc_ptr_DistSpline_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_release(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_deriv(self, *args, **kwargs)
    comment = _swig_property(_distSplinePot.rc_ptr_DistSpline_Restraint_comment_get, _distSplinePot.rc_ptr_DistSpline_Restraint_comment_set)
    dv = _swig_property(_distSplinePot.rc_ptr_DistSpline_Restraint_dv_get, _distSplinePot.rc_ptr_DistSpline_Restraint_dv_set)
    dist = _swig_property(_distSplinePot.rc_ptr_DistSpline_Restraint_dist_get, _distSplinePot.rc_ptr_DistSpline_Restraint_dist_set)
    sel0 = _swig_property(_distSplinePot.rc_ptr_DistSpline_Restraint_sel0_get, _distSplinePot.rc_ptr_DistSpline_Restraint_sel0_set)
    sel1 = _swig_property(_distSplinePot.rc_ptr_DistSpline_Restraint_sel1_get, _distSplinePot.rc_ptr_DistSpline_Restraint_sel1_set)
    atom0 = _swig_property(_distSplinePot.rc_ptr_DistSpline_Restraint_atom0_get, _distSplinePot.rc_ptr_DistSpline_Restraint_atom0_set)
    atom1 = _swig_property(_distSplinePot.rc_ptr_DistSpline_Restraint_atom1_get, _distSplinePot.rc_ptr_DistSpline_Restraint_atom1_set)

    def violated(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_violated(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_diff(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _distSplinePot.rc_ptr_DistSpline_Restraint_setName(self, *args, **kwargs)

class rc_ptr_DistSpline_RestraintPtr(rc_ptr_DistSpline_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_DistSpline_Restraint

rc_ptr_DistSpline_Restraint_swigregister = _distSplinePot.rc_ptr_DistSpline_Restraint_swigregister
rc_ptr_DistSpline_Restraint_swigregister(rc_ptr_DistSpline_Restraint)

class CDSList_DistSpline_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _distSplinePot.CDSList_DistSpline_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _distSplinePot.new_CDSList_DistSpline_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _distSplinePot.CDSList_DistSpline_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _distSplinePot.CDSList_DistSpline_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _distSplinePot.CDSList_DistSpline_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _distSplinePot.CDSList_DistSpline_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _distSplinePot.CDSList_DistSpline_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _distSplinePot.CDSList_DistSpline_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _distSplinePot.CDSList_DistSpline_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _distSplinePot.CDSList_DistSpline_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _distSplinePot.delete_CDSList_DistSpline_Restraint
    __del__ = lambda self: None

class CDSList_DistSpline_RestraintPtr(CDSList_DistSpline_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_DistSpline_Restraint

CDSList_DistSpline_Restraint_swigregister = _distSplinePot.CDSList_DistSpline_Restraint_swigregister
CDSList_DistSpline_Restraint_swigregister(CDSList_DistSpline_Restraint)


pyXplorHelp = help


def help(*args):
    return _distSplinePot.help(*args)
help = _distSplinePot.help


