# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_atomSelAction')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_atomSelAction')
    _atomSelAction = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_atomSelAction', [dirname(__file__)])
        except ImportError:
            import _atomSelAction
            return _atomSelAction
        try:
            _mod = imp.load_module('_atomSelAction', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _atomSelAction = swig_import_helper()
    del swig_import_helper
else:
    import _atomSelAction
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



import vec3
import mat3

class CDSList_String(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _atomSelAction.CDSList_String___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _atomSelAction.new_CDSList_String(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _atomSelAction.CDSList_String___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _atomSelAction.CDSList_String___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _atomSelAction.CDSList_String_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _atomSelAction.CDSList_String_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _atomSelAction.CDSList_String_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _atomSelAction.CDSList_String___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _atomSelAction.CDSList_String___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _atomSelAction.CDSList_String_help(self, *args, **kwargs)
    __swig_destroy__ = _atomSelAction.delete_CDSList_String
    __del__ = lambda self: None

class CDSList_StringPtr(CDSList_String):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_String

CDSList_String_swigregister = _atomSelAction.CDSList_String_swigregister
CDSList_String_swigregister(CDSList_String)


def cdsMapConvertToInt(*args, **kwargs):
    return _atomSelAction.cdsMapConvertToInt(*args, **kwargs)
cdsMapConvertToInt = _atomSelAction.cdsMapConvertToInt
class String(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _atomSelAction.new_String(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _atomSelAction.delete_String
    __del__ = lambda self: None

    def charPtr(self, *args, **kwargs):
        return _atomSelAction.String_charPtr(self, *args, **kwargs)

    def resize(self, *args, **kwargs):
        return _atomSelAction.String_resize(self, *args, **kwargs)

    def blockSize(self, *args):
        return _atomSelAction.String_blockSize(self, *args)

    def __iadd__(self, *args):
        return _atomSelAction.String___iadd__(self, *args)

    def find(self, *args):
        return _atomSelAction.String_find(self, *args)

    def copy(self, *args, **kwargs):
        return _atomSelAction.String_copy(self, *args, **kwargs)

    def downcase(self, *args, **kwargs):
        return _atomSelAction.String_downcase(self, *args, **kwargs)

    def upcase(self, *args, **kwargs):
        return _atomSelAction.String_upcase(self, *args, **kwargs)

    def length(self, *args, **kwargs):
        return _atomSelAction.String_length(self, *args, **kwargs)

    def strip(self, *args, **kwargs):
        return _atomSelAction.String_strip(self, *args, **kwargs)

    def split(self, *args, **kwargs):
        return _atomSelAction.String_split(self, *args, **kwargs)

    def contains(self, *args):
        return _atomSelAction.String_contains(self, *args)

    def count(self, *args, **kwargs):
        return _atomSelAction.String_count(self, *args, **kwargs)

    def matches(self, *args, **kwargs):
        return _atomSelAction.String_matches(self, *args, **kwargs)

    def startswith(self, *args, **kwargs):
        return _atomSelAction.String_startswith(self, *args, **kwargs)

    def gsub(self, *args, **kwargs):
        return _atomSelAction.String_gsub(self, *args, **kwargs)

    def replace(self, *args, **kwargs):
        return _atomSelAction.String_replace(self, *args, **kwargs)

    def glob(self, *args, **kwargs):
        return _atomSelAction.String_glob(self, *args, **kwargs)

class StringPtr(String):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = String

String_swigregister = _atomSelAction.String_swigregister
String_swigregister(String)

class Base(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _atomSelAction.delete_Base
    __del__ = lambda self: None

    def run(self, *args, **kwargs):
        return _atomSelAction.Base_run(self, *args, **kwargs)

    def init_unused(self, *args, **kwargs):
        return _atomSelAction.Base_init_unused(self, *args, **kwargs)

    def finish_unused(self, *args, **kwargs):
        return _atomSelAction.Base_finish_unused(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _atomSelAction.new_Base(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

class BasePtr(Base):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Base

Base_swigregister = _atomSelAction.Base_swigregister
Base_swigregister(Base)

class SetVelAction(Base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _atomSelAction.new_SetVelAction(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, *args, **kwargs):
        return _atomSelAction.SetVelAction_run(self, *args, **kwargs)
    __swig_destroy__ = _atomSelAction.delete_SetVelAction
    __del__ = lambda self: None

class SetVelActionPtr(SetVelAction):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SetVelAction

SetVelAction_swigregister = _atomSelAction.SetVelAction_swigregister
SetVelAction_swigregister(SetVelAction)

class Translate(Base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _atomSelAction.new_Translate(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, *args, **kwargs):
        return _atomSelAction.Translate_run(self, *args, **kwargs)
    __swig_destroy__ = _atomSelAction.delete_Translate
    __del__ = lambda self: None

class TranslatePtr(Translate):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Translate

Translate_swigregister = _atomSelAction.Translate_swigregister
Translate_swigregister(Translate)

class Rotate(Base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _atomSelAction.new_Rotate(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, *args, **kwargs):
        return _atomSelAction.Rotate_run(self, *args, **kwargs)
    __swig_destroy__ = _atomSelAction.delete_Rotate
    __del__ = lambda self: None

class RotatePtr(Rotate):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Rotate

Rotate_swigregister = _atomSelAction.Rotate_swigregister
Rotate_swigregister(Rotate)

class Fit(Base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _atomSelAction.new_Fit(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    fitToSel = _swig_property(_atomSelAction.Fit_fitToSel_get, _atomSelAction.Fit_fitToSel_set)

    def init_unused(self, *args, **kwargs):
        return _atomSelAction.Fit_init_unused(self, *args, **kwargs)

    def run(self, *args, **kwargs):
        return _atomSelAction.Fit_run(self, *args, **kwargs)

    def rotation(self, *args, **kwargs):
        return _atomSelAction.Fit_rotation(self, *args, **kwargs)

    def translation(self, *args, **kwargs):
        return _atomSelAction.Fit_translation(self, *args, **kwargs)

    def transDiff(self, *args, **kwargs):
        return _atomSelAction.Fit_transDiff(self, *args, **kwargs)
    __swig_destroy__ = _atomSelAction.delete_Fit
    __del__ = lambda self: None

class FitPtr(Fit):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Fit

Fit_swigregister = _atomSelAction.Fit_swigregister
Fit_swigregister(Fit)

class RMSD(Base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _atomSelAction.new_RMSD(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    compareSel = _swig_property(_atomSelAction.RMSD_compareSel_get, _atomSelAction.RMSD_compareSel_set)

    def init_unused(self, *args, **kwargs):
        return _atomSelAction.RMSD_init_unused(self, *args, **kwargs)

    def run(self, *args, **kwargs):
        return _atomSelAction.RMSD_run(self, *args, **kwargs)

    def finish_unused(self, *args, **kwargs):
        return _atomSelAction.RMSD_finish_unused(self, *args, **kwargs)

    def rmsd(self, *args, **kwargs):
        return _atomSelAction.RMSD_rmsd(self, *args, **kwargs)

    def perResidue(self, *args, **kwargs):
        return _atomSelAction.RMSD_perResidue(self, *args, **kwargs)


    def byResidue(s):
        perResidue=s.perResidue()
        ret={}
        for name,val in perResidue:
            if ' ' in name:
                resid = int(name.split()[-1])
            else:
                resid = int(name)
            ret[resid] = val
        return ret

    __swig_destroy__ = _atomSelAction.delete_RMSD
    __del__ = lambda self: None

class RMSDPtr(RMSD):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RMSD

RMSD_swigregister = _atomSelAction.RMSD_swigregister
RMSD_swigregister(RMSD)

class SetProperty(Base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _atomSelAction.new_SetProperty(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def run(self, *args, **kwargs):
        return _atomSelAction.SetProperty_run(self, *args, **kwargs)
    __swig_destroy__ = _atomSelAction.delete_SetProperty
    __del__ = lambda self: None

class SetPropertyPtr(SetProperty):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SetProperty

SetProperty_swigregister = _atomSelAction.SetProperty_swigregister
SetProperty_swigregister(SetProperty)


def minDistance(*args):
    return _atomSelAction.minDistance(*args)
minDistance = _atomSelAction.minDistance
class PyAtomSelAction(Base):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _atomSelAction.new_PyAtomSelAction(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _atomSelAction.delete_PyAtomSelAction
    __del__ = lambda self: None

    def help(self, *args, **kwargs):
        return _atomSelAction.PyAtomSelAction_help(self, *args, **kwargs)

class PyAtomSelActionPtr(PyAtomSelAction):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = PyAtomSelAction

PyAtomSelAction_swigregister = _atomSelAction.PyAtomSelAction_swigregister
PyAtomSelAction_swigregister(PyAtomSelAction)



def RMSD__init__(s,arg):
    from atomSel import AtomSel
    if type(arg) == type("string"):
        arg = AtomSel(arg)
    if type(arg) == type(AtomSel()):
       sim = arg.simulation()
       s.__init__renamed(sim.atomPosArr())
       s.compareSel = arg
       return
    s.__init__renamed(arg)

RMSD.__init__renamed = RMSD.__init__
RMSD.__init__ = RMSD__init__

def SetProperty__init__(s,name,val):
    import vec3
    name=String(name)
    if type(val)==type("string") or type(val)==type(b"string"):
      val=String(val)
    elif type(val)==type(1):
      pass
    elif type(val)==type(1.0):
      pass
    elif ((type(val)==type([]) or type(val)==type( tuple()))
	   and len(val)==3 and (type(val[0])==type(1.0) or
				type(val[0])==type(1))):
      val=vec3.Vec3(val)
    elif ((type(val)==type([]) or type(val)==type( tuple() ))
	  and (type(val[0])==type(1.0) or type(val[0])==type(1))): 
       from cdsVector import CDSVector_double
       val=CDSVector_double(val)
       pass
    elif ((type(val)==type([]) or type(val)==type( tuple() ))
		      and type(val[0])==type("string")): 
       val=CDSList_String(val)
       pass
    elif ((type(val)==type([]) or type(val)==type( tuple() ))):
       from cdsVector import CDSVector_Vec3
       val=CDSVector_Vec3(val)

    s.__init__renamed(name,val)


SetProperty.__init__renamed = SetProperty.__init__
SetProperty.__init__ = SetProperty__init__


pyXplorHelp = help


def help(*args):
    return _atomSelAction.help(*args)
help = _atomSelAction.help


