# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_csPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_csPot')
    _csPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_csPot', [dirname(__file__)])
        except ImportError:
            import _csPot
            return _csPot
        try:
            _mod = imp.load_module('_csPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _csPot = swig_import_helper()
    del swig_import_helper
else:
    import _csPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _csPot.Modified_MOD_SELF
    MOD_SIMULATION = _csPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _csPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _csPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _csPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _csPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _csPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _csPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _csPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _csPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_csPot.ModifiedBase_modified_get, _csPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_csPot.ModifiedBase_registeredSimulations_get, _csPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _csPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _csPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _csPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _csPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _csPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_csPot.VarEnsWeights_ensWeights_get, _csPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_csPot.VarEnsWeights_mult_get, _csPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _csPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _csPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _csPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _csPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _csPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _csPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _csPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _csPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _csPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _csPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _csPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _csPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _csPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _csPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _csPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _csPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _csPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _csPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _csPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _csPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _csPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _csPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _csPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _csPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _csPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _csPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _csPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _csPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class csPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _csPot.new_csPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _csPot.csPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _csPot.csPot___ref__(self, *args, **kwargs)

    def domainSel(self):
        return self.selection()
    def setDomainSel(self,val):
        self.setSelection(val)


    def registerInstanceData(self, *args, **kwargs):
        return _csPot.csPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _csPot.csPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _csPot.csPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _csPot.csPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _csPot.csPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _csPot.csPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _csPot.delete_csPot
    __del__ = lambda self: None

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _csPot.csPot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _csPot.csPot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _csPot.csPot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _csPot.csPot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivs5(self, *args, **kwargs):
        return _csPot.csPot_energyMaybeDerivs5(self, *args, **kwargs)
    D_dEdD = _swig_property(_csPot.csPot_D_dEdD_get, _csPot.csPot_D_dEdD_set)

    def read_cs_data_to_restraints(self, *args, **kwargs):
        return _csPot.csPot_read_cs_data_to_restraints(self, *args, **kwargs)

    def removeRestraint(self, *args, **kwargs):
        return _csPot.csPot_removeRestraint(self, *args, **kwargs)

    def addRestraint(self, *args, **kwargs):
        return _csPot.csPot_addRestraint(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _csPot.csPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _csPot.csPot_violations(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _csPot.csPot_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _csPot.csPot_setPotType(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _csPot.csPot_numRestraints(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _csPot.csPot_addRestraints(self, *args, **kwargs)
    energy = _swig_property(_csPot.csPot_energy_get, _csPot.csPot_energy_set)

    def restraints(self, *args, **kwargs):
        return _csPot.csPot_restraints(self, *args, **kwargs)

    def camshift(self, *args, **kwargs):
        return _csPot.csPot_camshift(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _csPot.csPot_selection(self, *args, **kwargs)

    def setSelection(self, *args, **kwargs):
        return _csPot.csPot_setSelection(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _csPot.csPot_info(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _csPot.csPot_showViolations(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _csPot.csPot_showRestraints(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _csPot.csPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _csPot.csPot_setVerbose(self, *args, **kwargs)

    def version(self, *args, **kwargs):
        return _csPot.csPot_version(self, *args, **kwargs)

    def setVoid(self, *args, **kwargs):
        return _csPot.csPot_setVoid(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _csPot.csPot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _csPot.csPot_setShowAllRestraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _csPot.csPot_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _csPot.csPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _csPot.csPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _csPot.csPot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _csPot.csPot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _csPot.csPot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _csPot.csPot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _csPot.csPot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _csPot.csPot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _csPot.csPot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _csPot.csPot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _csPot.csPot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _csPot.csPot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _csPot.csPot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _csPot.csPot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _csPot.csPot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _csPot.csPot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _csPot.csPot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _csPot.csPot_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _csPot.csPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _csPot.csPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _csPot.csPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _csPot.csPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _csPot.csPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _csPot.csPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _csPot.csPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _csPot.csPot_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _csPot.csPot_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _csPot.csPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_csPot.csPot_instanceData__get, _csPot.csPot_instanceData__set)
    instanceDataCreate = _swig_property(_csPot.csPot_instanceDataCreate_get, _csPot.csPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_csPot.csPot_instanceDataCleanup_get, _csPot.csPot_instanceDataCleanup_set)
    modified = _swig_property(_csPot.csPot_modified_get, _csPot.csPot_modified_set)
    registeredSimulations = _swig_property(_csPot.csPot_registeredSimulations_get, _csPot.csPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _csPot.csPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _csPot.csPot_unRegister(self, *args, **kwargs)

class csPotPtr(csPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = csPot

csPot_swigregister = _csPot.csPot_swigregister
csPot_swigregister(csPot)


realcsPot = csPot
def csPot(*args):
    from potProxy import PotProxy
    return PotProxy( realcsPot(*args) )

class Restraint_csPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _csPot.Restraint_csPot_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _csPot.new_Restraint_csPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _csPot.Restraint_csPot_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _csPot.Restraint_csPot_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _csPot.Restraint_csPot_setName(self, *args, **kwargs)
    __swig_destroy__ = _csPot.delete_Restraint_csPot
    __del__ = lambda self: None

class Restraint_csPotPtr(Restraint_csPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_csPot

Restraint_csPot_swigregister = _csPot.Restraint_csPot_swigregister
Restraint_csPot_swigregister(Restraint_csPot)

class csPot_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HARMONIC = _csPot.csPot_LetterClass_HARMONIC
    SQUARE = _csPot.csPot_LetterClass_SQUARE
    HYPERBOLIC = _csPot.csPot_LetterClass_HYPERBOLIC

    def __init__(self, *args, **kwargs):
        this = _csPot.new_csPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csPot.delete_csPot_LetterClass
    __del__ = lambda self: None

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivs5(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_energyMaybeDerivs5(self, *args, **kwargs)
    D_dEdD = _swig_property(_csPot.csPot_LetterClass_D_dEdD_get, _csPot.csPot_LetterClass_D_dEdD_set)

    def read_cs_data_to_restraints(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_read_cs_data_to_restraints(self, *args, **kwargs)

    def removeRestraint(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_removeRestraint(self, *args, **kwargs)

    def addRestraint(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_addRestraint(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_violations(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_setPotType(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_numRestraints(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_addRestraints(self, *args, **kwargs)
    energy = _swig_property(_csPot.csPot_LetterClass_energy_get, _csPot.csPot_LetterClass_energy_set)

    def restraints(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_restraints(self, *args, **kwargs)

    def camshift(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_camshift(self, *args, **kwargs)

    def selection(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_selection(self, *args, **kwargs)

    def setSelection(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_setSelection(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_info(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_showViolations(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_showRestraints(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_setVerbose(self, *args, **kwargs)

    def version(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_version(self, *args, **kwargs)

    def setVoid(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_setVoid(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def domainSel(self):
        return self.selection()
    def setDomainSel(self,val):
        self.setSelection(val)


    def help(self, *args, **kwargs):
        return _csPot.csPot_LetterClass_help(self, *args, **kwargs)

class csPot_LetterClassPtr(csPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = csPot_LetterClass

csPot_LetterClass_swigregister = _csPot.csPot_LetterClass_swigregister
csPot_LetterClass_swigregister(csPot_LetterClass)

class csPot_Restraint(Restraint_csPot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    numb = _swig_property(_csPot.csPot_Restraint_numb_get, _csPot.csPot_Restraint_numb_set)
    ep = _swig_property(_csPot.csPot_Restraint_ep_get, _csPot.csPot_Restraint_ep_set)
    x0 = _swig_property(_csPot.csPot_Restraint_x0_get, _csPot.csPot_Restraint_x0_set)
    gamma = _swig_property(_csPot.csPot_Restraint_gamma_get, _csPot.csPot_Restraint_gamma_set)
    beta = _swig_property(_csPot.csPot_Restraint_beta_get, _csPot.csPot_Restraint_beta_set)
    res_num = _swig_property(_csPot.csPot_Restraint_res_num_get, _csPot.csPot_Restraint_res_num_set)
    atomSel = _swig_property(_csPot.csPot_Restraint_atomSel_get, _csPot.csPot_Restraint_atomSel_set)
    error = _swig_property(_csPot.csPot_Restraint_error_get, _csPot.csPot_Restraint_error_set)
    CS = _swig_property(_csPot.csPot_Restraint_CS_get, _csPot.csPot_Restraint_CS_set)
    CS_calc = _swig_property(_csPot.csPot_Restraint_CS_calc_get, _csPot.csPot_Restraint_CS_calc_set)
    ok_ = _swig_property(_csPot.csPot_Restraint_ok__get, _csPot.csPot_Restraint_ok__set)
    chem_type = _swig_property(_csPot.csPot_Restraint_chem_type_get, _csPot.csPot_Restraint_chem_type_set)
    calcd_ = _swig_property(_csPot.csPot_Restraint_calcd__get, _csPot.csPot_Restraint_calcd__set)
    factor = _swig_property(_csPot.csPot_Restraint_factor_get, _csPot.csPot_Restraint_factor_set)

    def energy(self, *args, **kwargs):
        return _csPot.csPot_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _csPot.csPot_Restraint_deriv(self, *args, **kwargs)
    atom_indices = _swig_property(_csPot.csPot_Restraint_atom_indices_get, _csPot.csPot_Restraint_atom_indices_set)

    def __init__(self, *args, **kwargs):
        this = _csPot.new_csPot_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csPot.delete_csPot_Restraint
    __del__ = lambda self: None

    def calcContrib(self, *args, **kwargs):
        return _csPot.csPot_Restraint_calcContrib(self, *args, **kwargs)
    contrib = _swig_property(_csPot.csPot_Restraint_contrib_get, _csPot.csPot_Restraint_contrib_set)

    def calcd(self, *args, **kwargs):
        return _csPot.csPot_Restraint_calcd(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _csPot.csPot_Restraint_obs(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _csPot.csPot_Restraint_err(self, *args, **kwargs)
    deltaMinusErr = _swig_property(_csPot.csPot_Restraint_deltaMinusErr_get, _csPot.csPot_Restraint_deltaMinusErr_set)
    deltaPlusErr = _swig_property(_csPot.csPot_Restraint_deltaPlusErr_get, _csPot.csPot_Restraint_deltaPlusErr_set)

    def getContrib(self, *args, **kwargs):
        return _csPot.csPot_Restraint_getContrib(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _csPot.csPot_Restraint_setObs(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _csPot.csPot_Restraint_setErr(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _csPot.csPot_Restraint_name(self, *args, **kwargs)

class csPot_RestraintPtr(csPot_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = csPot_Restraint

csPot_Restraint_swigregister = _csPot.csPot_Restraint_swigregister
csPot_Restraint_swigregister(csPot_Restraint)

class rc_ptr_csPot_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _csPot.new_rc_ptr_csPot_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _csPot.delete_rc_ptr_csPot_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_release(self, *args, **kwargs)
    numb = _swig_property(_csPot.rc_ptr_csPot_Restraint_numb_get, _csPot.rc_ptr_csPot_Restraint_numb_set)
    ep = _swig_property(_csPot.rc_ptr_csPot_Restraint_ep_get, _csPot.rc_ptr_csPot_Restraint_ep_set)
    x0 = _swig_property(_csPot.rc_ptr_csPot_Restraint_x0_get, _csPot.rc_ptr_csPot_Restraint_x0_set)
    gamma = _swig_property(_csPot.rc_ptr_csPot_Restraint_gamma_get, _csPot.rc_ptr_csPot_Restraint_gamma_set)
    beta = _swig_property(_csPot.rc_ptr_csPot_Restraint_beta_get, _csPot.rc_ptr_csPot_Restraint_beta_set)
    res_num = _swig_property(_csPot.rc_ptr_csPot_Restraint_res_num_get, _csPot.rc_ptr_csPot_Restraint_res_num_set)
    atomSel = _swig_property(_csPot.rc_ptr_csPot_Restraint_atomSel_get, _csPot.rc_ptr_csPot_Restraint_atomSel_set)
    error = _swig_property(_csPot.rc_ptr_csPot_Restraint_error_get, _csPot.rc_ptr_csPot_Restraint_error_set)
    CS = _swig_property(_csPot.rc_ptr_csPot_Restraint_CS_get, _csPot.rc_ptr_csPot_Restraint_CS_set)
    CS_calc = _swig_property(_csPot.rc_ptr_csPot_Restraint_CS_calc_get, _csPot.rc_ptr_csPot_Restraint_CS_calc_set)
    ok_ = _swig_property(_csPot.rc_ptr_csPot_Restraint_ok__get, _csPot.rc_ptr_csPot_Restraint_ok__set)
    chem_type = _swig_property(_csPot.rc_ptr_csPot_Restraint_chem_type_get, _csPot.rc_ptr_csPot_Restraint_chem_type_set)
    calcd_ = _swig_property(_csPot.rc_ptr_csPot_Restraint_calcd__get, _csPot.rc_ptr_csPot_Restraint_calcd__set)
    factor = _swig_property(_csPot.rc_ptr_csPot_Restraint_factor_get, _csPot.rc_ptr_csPot_Restraint_factor_set)

    def energy(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_deriv(self, *args, **kwargs)
    atom_indices = _swig_property(_csPot.rc_ptr_csPot_Restraint_atom_indices_get, _csPot.rc_ptr_csPot_Restraint_atom_indices_set)

    def calcContrib(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_calcContrib(self, *args, **kwargs)
    contrib = _swig_property(_csPot.rc_ptr_csPot_Restraint_contrib_get, _csPot.rc_ptr_csPot_Restraint_contrib_set)

    def calcd(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_calcd(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_obs(self, *args, **kwargs)

    def err(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_err(self, *args, **kwargs)
    deltaMinusErr = _swig_property(_csPot.rc_ptr_csPot_Restraint_deltaMinusErr_get, _csPot.rc_ptr_csPot_Restraint_deltaMinusErr_set)
    deltaPlusErr = _swig_property(_csPot.rc_ptr_csPot_Restraint_deltaPlusErr_get, _csPot.rc_ptr_csPot_Restraint_deltaPlusErr_set)

    def getContrib(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_getContrib(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_setObs(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_setErr(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_name(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_violated(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _csPot.rc_ptr_csPot_Restraint_setName(self, *args, **kwargs)

class rc_ptr_csPot_RestraintPtr(rc_ptr_csPot_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_csPot_Restraint

rc_ptr_csPot_Restraint_swigregister = _csPot.rc_ptr_csPot_Restraint_swigregister
rc_ptr_csPot_Restraint_swigregister(rc_ptr_csPot_Restraint)

class CDSList_csPot_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _csPot.CDSList_csPot_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _csPot.new_CDSList_csPot_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _csPot.CDSList_csPot_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _csPot.CDSList_csPot_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _csPot.CDSList_csPot_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _csPot.CDSList_csPot_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _csPot.CDSList_csPot_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _csPot.CDSList_csPot_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _csPot.CDSList_csPot_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _csPot.CDSList_csPot_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _csPot.delete_CDSList_csPot_Restraint
    __del__ = lambda self: None

class CDSList_csPot_RestraintPtr(CDSList_csPot_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_csPot_Restraint

CDSList_csPot_Restraint_swigregister = _csPot.CDSList_csPot_Restraint_swigregister
CDSList_csPot_Restraint_swigregister(CDSList_csPot_Restraint)


import camshift


pyXplorHelp = help


def help(*args):
    return _csPot.help(*args)
help = _csPot.help


