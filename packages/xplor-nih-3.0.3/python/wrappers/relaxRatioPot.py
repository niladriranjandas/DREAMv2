# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_relaxRatioPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_relaxRatioPot')
    _relaxRatioPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_relaxRatioPot', [dirname(__file__)])
        except ImportError:
            import _relaxRatioPot
            return _relaxRatioPot
        try:
            _mod = imp.load_module('_relaxRatioPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _relaxRatioPot = swig_import_helper()
    del swig_import_helper
else:
    import _relaxRatioPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _relaxRatioPot.Modified_MOD_SELF
    MOD_SIMULATION = _relaxRatioPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _relaxRatioPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _relaxRatioPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _relaxRatioPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _relaxRatioPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _relaxRatioPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _relaxRatioPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _relaxRatioPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _relaxRatioPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_relaxRatioPot.ModifiedBase_modified_get, _relaxRatioPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_relaxRatioPot.ModifiedBase_registeredSimulations_get, _relaxRatioPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _relaxRatioPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _relaxRatioPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _relaxRatioPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _relaxRatioPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _relaxRatioPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class RelaxRatioPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _relaxRatioPot.new_RelaxRatioPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _relaxRatioPot.delete_RelaxRatioPot
    __del__ = lambda self: None

    def updateValues(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_updateValues(self, *args, **kwargs)

    def getAtomSel(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_getAtomSel(self, *args, **kwargs)

    def Diff_Tensor(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Diff_Tensor(self, *args, **kwargs)

    def getEigen(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_getEigen(self, *args, **kwargs)

    def rotMat(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_rotMat(self, *args, **kwargs)

    def addRestraint(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_addRestraint(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_simulation(self, *args, **kwargs)

    def curr_Tmp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_curr_Tmp(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_calcEnergy(self, *args, **kwargs)

    def calcSigma(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_calcSigma(self, *args, **kwargs)

    def update_cutOff(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_update_cutOff(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def get_TmpF(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_get_TmpF(self, *args, **kwargs)

    def setTmpAtoms(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setTmpAtoms(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setShowAllRestraints(self, *args, **kwargs)

    def diffShell(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_diffShell(self, *args, **kwargs)

    def setDiffShell(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setDiffShell(self, *args, **kwargs)

    def forceTessellation(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_forceTessellation(self, *args, **kwargs)

    def freq(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_freq(self, *args, **kwargs)

    def setFreq(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setFreq(self, *args, **kwargs)

    def medianTmp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_medianTmp(self, *args, **kwargs)

    def setMedianTmp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setMedianTmp(self, *args, **kwargs)

    def gyroR(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_gyroR(self, *args, **kwargs)

    def setGyroR(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setGyroR(self, *args, **kwargs)

    def dipC2(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_dipC2(self, *args, **kwargs)

    def setDipC2(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setDipC2(self, *args, **kwargs)

    def cutoff(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_cutoff(self, *args, **kwargs)

    def get_omegas(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_get_omegas(self, *args, **kwargs)

    def get_O_TmP_atom(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_get_O_TmP_atom(self, *args, **kwargs)

    def get_X_TmP_atom(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_get_X_TmP_atom(self, *args, **kwargs)

    def get_Y_TmP_atom(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_get_Y_TmP_atom(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_numRestraints(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_restraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_info(self, *args, **kwargs)
    sigmaFactor_ = _swig_property(_relaxRatioPot.RelaxRatioPot_sigmaFactor__get, _relaxRatioPot.RelaxRatioPot_sigmaFactor__set)
    softExp_ = _swig_property(_relaxRatioPot.RelaxRatioPot_softExp__get, _relaxRatioPot.RelaxRatioPot_softExp__set)
    asympSlope_ = _swig_property(_relaxRatioPot.RelaxRatioPot_asympSlope__get, _relaxRatioPot.RelaxRatioPot_asympSlope__set)

    def sigmaFactor(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_sigmaFactor(self, *args, **kwargs)

    def setSigmaFactor(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setSigmaFactor(self, *args, **kwargs)

    def softExp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_softExp(self, *args, **kwargs)

    def setSoftExp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setSoftExp(self, *args, **kwargs)

    def asympSlope(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_asympSlope(self, *args, **kwargs)

    def setAsympSlope(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setAsympSlope(self, *args, **kwargs)

    def Tessellation(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Tessellation(self, *args, **kwargs)

    def diffTmpF(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_diffTmpF(self, *args, **kwargs)

    def setDiffTmpF(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setDiffTmpF(self, *args, **kwargs)

    def diffRstep(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_diffRstep(self, *args, **kwargs)

    def setDiffRstep(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setDiffRstep(self, *args, **kwargs)

    def tempRange(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_tempRange(self, *args, **kwargs)

    def setTempRange(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setTempRange(self, *args, **kwargs)

    def scaleNHgrad(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_scaleNHgrad(self, *args, **kwargs)

    def setScaleNHgrad(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setScaleNHgrad(self, *args, **kwargs)

    def scaleSAgrad(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_scaleSAgrad(self, *args, **kwargs)

    def setScaleSAgrad(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setScaleSAgrad(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setVerbose(self, *args, **kwargs)

    def removeRestraint(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_removeRestraint(self, *args, **kwargs)

    def setDiffRrmsd(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setDiffRrmsd(self, *args, **kwargs)

    def diffRrmsd(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_diffRrmsd(self, *args, **kwargs)

    def rangeTmpFit(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_rangeTmpFit(self, *args, **kwargs)

    def setRangeTmpFit(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setRangeTmpFit(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_setThreshold(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_relaxRatioPot.RelaxRatioPot_instanceData__get, _relaxRatioPot.RelaxRatioPot_instanceData__set)
    instanceDataCreate = _swig_property(_relaxRatioPot.RelaxRatioPot_instanceDataCreate_get, _relaxRatioPot.RelaxRatioPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_relaxRatioPot.RelaxRatioPot_instanceDataCleanup_get, _relaxRatioPot.RelaxRatioPot_instanceDataCleanup_set)
    modified = _swig_property(_relaxRatioPot.RelaxRatioPot_modified_get, _relaxRatioPot.RelaxRatioPot_modified_set)
    registeredSimulations = _swig_property(_relaxRatioPot.RelaxRatioPot_registeredSimulations_get, _relaxRatioPot.RelaxRatioPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_unRegister(self, *args, **kwargs)

class RelaxRatioPotPtr(RelaxRatioPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RelaxRatioPot

RelaxRatioPot_swigregister = _relaxRatioPot.RelaxRatioPot_swigregister
RelaxRatioPot_swigregister(RelaxRatioPot)


realRelaxRatioPot = RelaxRatioPot
def RelaxRatioPot(*args):
    from potProxy import PotProxy
    return PotProxy( realRelaxRatioPot(*args) )

class Restraint_RelaxRatioPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _relaxRatioPot.Restraint_RelaxRatioPot_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _relaxRatioPot.new_Restraint_RelaxRatioPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _relaxRatioPot.Restraint_RelaxRatioPot_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _relaxRatioPot.Restraint_RelaxRatioPot_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _relaxRatioPot.Restraint_RelaxRatioPot_setName(self, *args, **kwargs)
    __swig_destroy__ = _relaxRatioPot.delete_Restraint_RelaxRatioPot
    __del__ = lambda self: None

class Restraint_RelaxRatioPotPtr(Restraint_RelaxRatioPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_RelaxRatioPot

Restraint_RelaxRatioPot_swigregister = _relaxRatioPot.Restraint_RelaxRatioPot_swigregister
Restraint_RelaxRatioPot_swigregister(Restraint_RelaxRatioPot)

class RelaxRatioPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def updateValues(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_updateValues(self, *args, **kwargs)

    def getAtomSel(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_getAtomSel(self, *args, **kwargs)

    def Diff_Tensor(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_Diff_Tensor(self, *args, **kwargs)

    def getEigen(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_getEigen(self, *args, **kwargs)

    def rotMat(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_rotMat(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _relaxRatioPot.new_RelaxRatioPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _relaxRatioPot.delete_RelaxRatioPot_LetterClass
    __del__ = lambda self: None

    def addRestraint(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_addRestraint(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_simulation(self, *args, **kwargs)

    def curr_Tmp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_curr_Tmp(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcSigma(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_calcSigma(self, *args, **kwargs)

    def update_cutOff(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_update_cutOff(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def get_TmpF(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_get_TmpF(self, *args, **kwargs)

    def setTmpAtoms(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setTmpAtoms(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def diffShell(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_diffShell(self, *args, **kwargs)

    def setDiffShell(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setDiffShell(self, *args, **kwargs)

    def forceTessellation(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_forceTessellation(self, *args, **kwargs)

    def freq(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_freq(self, *args, **kwargs)

    def setFreq(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setFreq(self, *args, **kwargs)

    def medianTmp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_medianTmp(self, *args, **kwargs)

    def setMedianTmp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setMedianTmp(self, *args, **kwargs)

    def gyroR(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_gyroR(self, *args, **kwargs)

    def setGyroR(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setGyroR(self, *args, **kwargs)

    def dipC2(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_dipC2(self, *args, **kwargs)

    def setDipC2(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setDipC2(self, *args, **kwargs)

    def cutoff(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_cutoff(self, *args, **kwargs)

    def get_omegas(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_get_omegas(self, *args, **kwargs)

    def get_O_TmP_atom(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_get_O_TmP_atom(self, *args, **kwargs)

    def get_X_TmP_atom(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_get_X_TmP_atom(self, *args, **kwargs)

    def get_Y_TmP_atom(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_get_Y_TmP_atom(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_numRestraints(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_restraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_info(self, *args, **kwargs)
    sigmaFactor_ = _swig_property(_relaxRatioPot.RelaxRatioPot_LetterClass_sigmaFactor__get, _relaxRatioPot.RelaxRatioPot_LetterClass_sigmaFactor__set)
    softExp_ = _swig_property(_relaxRatioPot.RelaxRatioPot_LetterClass_softExp__get, _relaxRatioPot.RelaxRatioPot_LetterClass_softExp__set)
    asympSlope_ = _swig_property(_relaxRatioPot.RelaxRatioPot_LetterClass_asympSlope__get, _relaxRatioPot.RelaxRatioPot_LetterClass_asympSlope__set)

    def sigmaFactor(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_sigmaFactor(self, *args, **kwargs)

    def setSigmaFactor(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setSigmaFactor(self, *args, **kwargs)

    def softExp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_softExp(self, *args, **kwargs)

    def setSoftExp(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setSoftExp(self, *args, **kwargs)

    def asympSlope(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_asympSlope(self, *args, **kwargs)

    def setAsympSlope(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setAsympSlope(self, *args, **kwargs)

    def Tessellation(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_Tessellation(self, *args, **kwargs)

    def diffTmpF(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_diffTmpF(self, *args, **kwargs)

    def setDiffTmpF(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setDiffTmpF(self, *args, **kwargs)

    def diffRstep(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_diffRstep(self, *args, **kwargs)

    def setDiffRstep(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setDiffRstep(self, *args, **kwargs)

    def tempRange(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_tempRange(self, *args, **kwargs)

    def setTempRange(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setTempRange(self, *args, **kwargs)

    def scaleNHgrad(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_scaleNHgrad(self, *args, **kwargs)

    def setScaleNHgrad(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setScaleNHgrad(self, *args, **kwargs)

    def scaleSAgrad(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_scaleSAgrad(self, *args, **kwargs)

    def setScaleSAgrad(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setScaleSAgrad(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setVerbose(self, *args, **kwargs)

    def removeRestraint(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_removeRestraint(self, *args, **kwargs)

    def setDiffRrmsd(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setDiffRrmsd(self, *args, **kwargs)

    def diffRrmsd(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_diffRrmsd(self, *args, **kwargs)

    def rangeTmpFit(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_rangeTmpFit(self, *args, **kwargs)

    def setRangeTmpFit(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_setRangeTmpFit(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_LetterClass_help(self, *args, **kwargs)

class RelaxRatioPot_LetterClassPtr(RelaxRatioPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RelaxRatioPot_LetterClass

RelaxRatioPot_LetterClass_swigregister = _relaxRatioPot.RelaxRatioPot_LetterClass_swigregister
RelaxRatioPot_LetterClass_swigregister(RelaxRatioPot_LetterClass)

class RelaxRatioPot_Restraint(Restraint_RelaxRatioPot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _relaxRatioPot.new_RelaxRatioPot_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _relaxRatioPot.delete_RelaxRatioPot_Restraint
    __del__ = lambda self: None

    def calcd(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_calcd(self, *args, **kwargs)

    def r1(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_r1(self, *args, **kwargs)

    def r2(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_r2(self, *args, **kwargs)

    def noe(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_noe(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_obs(self, *args, **kwargs)

    def csa(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_csa(self, *args, **kwargs)

    def excluded(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_excluded(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_setObs(self, *args, **kwargs)

    def aSelection(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_aSelection(self, *args, **kwargs)

    def bSelection(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_bSelection(self, *args, **kwargs)

    def err(self, *args):
        return _relaxRatioPot.RelaxRatioPot_Restraint_err(self, *args)

    def name(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_name(self, *args, **kwargs)

    def calcValues(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_calcValues(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _relaxRatioPot.RelaxRatioPot_Restraint_deriv(self, *args, **kwargs)
    csa2 = _swig_property(_relaxRatioPot.RelaxRatioPot_Restraint_csa2_get, _relaxRatioPot.RelaxRatioPot_Restraint_csa2_set)

class RelaxRatioPot_RestraintPtr(RelaxRatioPot_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RelaxRatioPot_Restraint

RelaxRatioPot_Restraint_swigregister = _relaxRatioPot.RelaxRatioPot_Restraint_swigregister
RelaxRatioPot_Restraint_swigregister(RelaxRatioPot_Restraint)

class rc_ptr_RelaxRatioPot_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _relaxRatioPot.new_rc_ptr_RelaxRatioPot_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _relaxRatioPot.delete_rc_ptr_RelaxRatioPot_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_release(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_calcd(self, *args, **kwargs)

    def r1(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_r1(self, *args, **kwargs)

    def r2(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_r2(self, *args, **kwargs)

    def noe(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_noe(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_obs(self, *args, **kwargs)

    def err(self, *args):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_err(self, *args)

    def csa(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_csa(self, *args, **kwargs)

    def excluded(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_excluded(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_setObs(self, *args, **kwargs)

    def aSelection(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_aSelection(self, *args, **kwargs)

    def bSelection(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_bSelection(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_name(self, *args, **kwargs)

    def calcValues(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_calcValues(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_deriv(self, *args, **kwargs)
    csa2 = _swig_property(_relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_csa2_get, _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_csa2_set)

    def diff(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_violated(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_setName(self, *args, **kwargs)

class rc_ptr_RelaxRatioPot_RestraintPtr(rc_ptr_RelaxRatioPot_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_RelaxRatioPot_Restraint

rc_ptr_RelaxRatioPot_Restraint_swigregister = _relaxRatioPot.rc_ptr_RelaxRatioPot_Restraint_swigregister
rc_ptr_RelaxRatioPot_Restraint_swigregister(rc_ptr_RelaxRatioPot_Restraint)

class CDSList_RelaxRatioPot_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _relaxRatioPot.CDSList_RelaxRatioPot_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _relaxRatioPot.new_CDSList_RelaxRatioPot_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _relaxRatioPot.CDSList_RelaxRatioPot_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _relaxRatioPot.CDSList_RelaxRatioPot_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _relaxRatioPot.CDSList_RelaxRatioPot_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _relaxRatioPot.CDSList_RelaxRatioPot_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _relaxRatioPot.CDSList_RelaxRatioPot_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _relaxRatioPot.CDSList_RelaxRatioPot_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _relaxRatioPot.CDSList_RelaxRatioPot_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _relaxRatioPot.CDSList_RelaxRatioPot_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _relaxRatioPot.delete_CDSList_RelaxRatioPot_Restraint
    __del__ = lambda self: None

class CDSList_RelaxRatioPot_RestraintPtr(CDSList_RelaxRatioPot_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_RelaxRatioPot_Restraint

CDSList_RelaxRatioPot_Restraint_swigregister = _relaxRatioPot.CDSList_RelaxRatioPot_Restraint_swigregister
CDSList_RelaxRatioPot_Restraint_swigregister(CDSList_RelaxRatioPot_Restraint)


pyXplorHelp = help


def help(*args):
    return _relaxRatioPot.help(*args)
help = _relaxRatioPot.help


