# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rdcPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rdcPot')
    _rdcPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rdcPot', [dirname(__file__)])
        except ImportError:
            import _rdcPot
            return _rdcPot
        try:
            _mod = imp.load_module('_rdcPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rdcPot = swig_import_helper()
    del swig_import_helper
else:
    import _rdcPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _rdcPot.Modified_MOD_SELF
    MOD_SIMULATION = _rdcPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _rdcPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _rdcPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _rdcPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _rdcPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _rdcPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _rdcPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _rdcPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _rdcPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_rdcPot.ModifiedBase_modified_get, _rdcPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_rdcPot.ModifiedBase_registeredSimulations_get, _rdcPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _rdcPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _rdcPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _rdcPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _rdcPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _rdcPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class VarEnsWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ensWeights = _swig_property(_rdcPot.VarEnsWeights_ensWeights_get, _rdcPot.VarEnsWeights_ensWeights_set)
    mult = _swig_property(_rdcPot.VarEnsWeights_mult_get, _rdcPot.VarEnsWeights_mult_set)

    def __init__(self, *args, **kwargs):
        this = _rdcPot.new_VarEnsWeights(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rdcPot.delete_VarEnsWeights
    __del__ = lambda self: None

class VarEnsWeightsPtr(VarEnsWeights):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = VarEnsWeights

VarEnsWeights_swigregister = _rdcPot.VarEnsWeights_swigregister
VarEnsWeights_swigregister(VarEnsWeights)

class EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rdcPot.delete_EnsemblePot
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_energyMaybeDerivsPre(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_energyMaybeDerivsPost(self, *args, **kwargs)

    def simulation(self, *args):
        return _rdcPot.EnsemblePot_simulation(self, *args)

    def ensWeight(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _rdcPot.EnsemblePot_ensWeightsInfo(self, *args, **kwargs)

class EnsemblePotPtr(EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = EnsemblePot

EnsemblePot_swigregister = _rdcPot.EnsemblePot_swigregister
EnsemblePot_swigregister(EnsemblePot)

class rc_EnsemblePot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _rdcPot.new_rc_EnsemblePot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rdcPot.delete_rc_EnsemblePot
    __del__ = lambda self: None

class rc_EnsemblePotPtr(rc_EnsemblePot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_EnsemblePot

rc_EnsemblePot_swigregister = _rdcPot.rc_EnsemblePot_swigregister
rc_EnsemblePot_swigregister(rc_EnsemblePot)

class RDCPot1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _rdcPot.new_RDCPot1(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _rdcPot.RDCPot1___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _rdcPot.RDCPot1___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _rdcPot.RDCPot1_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _rdcPot.RDCPot1_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _rdcPot.RDCPot1_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _rdcPot.RDCPot1_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _rdcPot.RDCPot1_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _rdcPot.RDCPot1_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _rdcPot.delete_RDCPot1
    __del__ = lambda self: None

    def addRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_addRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _rdcPot.RDCPot1_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _rdcPot.RDCPot1_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _rdcPot.RDCPot1_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _rdcPot.RDCPot1_energyMaybeDerivsPost(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _rdcPot.RDCPot1_rms(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _rdcPot.RDCPot1_deviation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _rdcPot.RDCPot1_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_numRestraints(self, *args, **kwargs)

    def useLocalTensor(self, *args, **kwargs):
        return _rdcPot.RDCPot1_useLocalTensor(self, *args, **kwargs)

    def setUseLocalTensor(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setUseLocalTensor(self, *args, **kwargs)
    oTensor = _swig_property(_rdcPot.RDCPot1_oTensor_get, _rdcPot.RDCPot1_oTensor_set)
    localTensors = _swig_property(_rdcPot.RDCPot1_localTensors_get, _rdcPot.RDCPot1_localTensors_set)

    def getLocalTensors(self, *args, **kwargs):
        return _rdcPot.RDCPot1_getLocalTensors(self, *args, **kwargs)

    def setLocalTensors(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setLocalTensors(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_restraints(self, *args, **kwargs)

    def rawRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_rawRestraints(self, *args, **kwargs)

    def removeRestraint(self, *args, **kwargs):
        return _rdcPot.RDCPot1_removeRestraint(self, *args, **kwargs)

    def addRestraint(self, *args, **kwargs):
        return _rdcPot.RDCPot1_addRestraint(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _rdcPot.RDCPot1_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _rdcPot.RDCPot1_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _rdcPot.RDCPot1_showViolations(self, *args, **kwargs)

    def allowBadRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_allowBadRestraints(self, *args, **kwargs)

    def setAllowBadRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setAllowBadRestraints(self, *args, **kwargs)

    def deltaDFS(self, *args, **kwargs):
        return _rdcPot.RDCPot1_deltaDFS(self, *args, **kwargs)

    def setDeltaDFS(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setDeltaDFS(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _rdcPot.RDCPot1_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setVerbose(self, *args, **kwargs)

    def useDistance(self, *args, **kwargs):
        return _rdcPot.RDCPot1_useDistance(self, *args, **kwargs)

    def setUseDistance(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setUseDistance(self, *args, **kwargs)

    def gyroA(self, *args, **kwargs):
        return _rdcPot.RDCPot1_gyroA(self, *args, **kwargs)

    def setGyroA(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setGyroA(self, *args, **kwargs)

    def gyroB(self, *args, **kwargs):
        return _rdcPot.RDCPot1_gyroB(self, *args, **kwargs)

    def setGyroB(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setGyroB(self, *args, **kwargs)

    def bondLength(self, *args, **kwargs):
        return _rdcPot.RDCPot1_bondLength(self, *args, **kwargs)

    def setBondLength(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setBondLength(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setShowAllRestraints(self, *args, **kwargs)

    def useSign(self, *args, **kwargs):
        return _rdcPot.RDCPot1_useSign(self, *args, **kwargs)

    def setUseSign(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setUseSign(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _rdcPot.RDCPot1_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setPotType(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _rdcPot.RDCPot1_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setAveType(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _rdcPot.RDCPot1_help(self, *args, **kwargs)

    def calcEnergy(self, *args, **kwargs):
        return _rdcPot.RDCPot1_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _rdcPot.RDCPot1_calcEnergyAndDerivs(self, *args, **kwargs)

    def energyMaybeDerivs3(self, *args, **kwargs):
        return _rdcPot.RDCPot1_energyMaybeDerivs3(self, *args, **kwargs)

    def energyMaybeDerivs4(self, *args, **kwargs):
        return _rdcPot.RDCPot1_energyMaybeDerivs4(self, *args, **kwargs)

    def energyMaybeDerivsPre(self, *args, **kwargs):
        return _rdcPot.RDCPot1_energyMaybeDerivsPre(self, *args, **kwargs)

    def ensWeight(self, *args, **kwargs):
        return _rdcPot.RDCPot1_ensWeight(self, *args, **kwargs)

    def ensWeights(self, *args, **kwargs):
        return _rdcPot.RDCPot1_ensWeights(self, *args, **kwargs)

    def setEnsWeights(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setEnsWeights(self, *args, **kwargs)

    def addEnsWeights(self, *args, **kwargs):
        return _rdcPot.RDCPot1_addEnsWeights(self, *args, **kwargs)

    def getEnsWeights(self, *args, **kwargs):
        return _rdcPot.RDCPot1_getEnsWeights(self, *args, **kwargs)

    def clearEnsWeights(self, *args, **kwargs):
        return _rdcPot.RDCPot1_clearEnsWeights(self, *args, **kwargs)

    def updateEnsWeights(self, *args, **kwargs):
        return _rdcPot.RDCPot1_updateEnsWeights(self, *args, **kwargs)

    def useSimEnsWeights(self, *args, **kwargs):
        return _rdcPot.RDCPot1_useSimEnsWeights(self, *args, **kwargs)

    def setUseSimEnsWeights(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setUseSimEnsWeights(self, *args, **kwargs)

    def calcWDerivs(self, *args, **kwargs):
        return _rdcPot.RDCPot1_calcWDerivs(self, *args, **kwargs)

    def setCalcWDerivs(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setCalcWDerivs(self, *args, **kwargs)

    def ensWeightsInfo(self, *args, **kwargs):
        return _rdcPot.RDCPot1_ensWeightsInfo(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _rdcPot.RDCPot1_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _rdcPot.RDCPot1_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _rdcPot.RDCPot1_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _rdcPot.RDCPot1_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _rdcPot.RDCPot1_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _rdcPot.RDCPot1_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _rdcPot.RDCPot1_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _rdcPot.RDCPot1_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _rdcPot.RDCPot1_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_rdcPot.RDCPot1_instanceData__get, _rdcPot.RDCPot1_instanceData__set)
    instanceDataCreate = _swig_property(_rdcPot.RDCPot1_instanceDataCreate_get, _rdcPot.RDCPot1_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_rdcPot.RDCPot1_instanceDataCleanup_get, _rdcPot.RDCPot1_instanceDataCleanup_set)
    modified = _swig_property(_rdcPot.RDCPot1_modified_get, _rdcPot.RDCPot1_modified_set)
    registeredSimulations = _swig_property(_rdcPot.RDCPot1_registeredSimulations_get, _rdcPot.RDCPot1_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _rdcPot.RDCPot1_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _rdcPot.RDCPot1_unRegister(self, *args, **kwargs)

class RDCPot1Ptr(RDCPot1):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RDCPot1

RDCPot1_swigregister = _rdcPot.RDCPot1_swigregister
RDCPot1_swigregister(RDCPot1)


realRDCPot1 = RDCPot1
def RDCPot1(*args):
    from potProxy import PotProxy
    return PotProxy( realRDCPot1(*args) )

class Restraint_RDCPot1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _rdcPot.Restraint_RDCPot1_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _rdcPot.new_Restraint_RDCPot1(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _rdcPot.Restraint_RDCPot1_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _rdcPot.Restraint_RDCPot1_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _rdcPot.Restraint_RDCPot1_setName(self, *args, **kwargs)
    __swig_destroy__ = _rdcPot.delete_Restraint_RDCPot1
    __del__ = lambda self: None

class Restraint_RDCPot1Ptr(Restraint_RDCPot1):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_RDCPot1

Restraint_RDCPot1_swigregister = _rdcPot.Restraint_RDCPot1_swigregister
Restraint_RDCPot1_swigregister(Restraint_RDCPot1)

class LocalTensor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rdcPot.new_LocalTensor(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    atom1 = _swig_property(_rdcPot.LocalTensor_atom1_get, _rdcPot.LocalTensor_atom1_set)
    atom2 = _swig_property(_rdcPot.LocalTensor_atom2_get, _rdcPot.LocalTensor_atom2_set)
    atom3 = _swig_property(_rdcPot.LocalTensor_atom3_get, _rdcPot.LocalTensor_atom3_set)
    uMat = _swig_property(_rdcPot.LocalTensor_uMat_get, _rdcPot.LocalTensor_uMat_set)
    U = _swig_property(_rdcPot.LocalTensor_U_get, _rdcPot.LocalTensor_U_set)
    dUp_dq2 = _swig_property(_rdcPot.LocalTensor_dUp_dq2_get, _rdcPot.LocalTensor_dUp_dq2_set)
    dUp_dq3 = _swig_property(_rdcPot.LocalTensor_dUp_dq3_get, _rdcPot.LocalTensor_dUp_dq3_set)

    def update(self, *args, **kwargs):
        return _rdcPot.LocalTensor_update(self, *args, **kwargs)

    def updateGradients(self, *args, **kwargs):
        return _rdcPot.LocalTensor_updateGradients(self, *args, **kwargs)
    __swig_destroy__ = _rdcPot.delete_LocalTensor
    __del__ = lambda self: None

class LocalTensorPtr(LocalTensor):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = LocalTensor

LocalTensor_swigregister = _rdcPot.LocalTensor_swigregister
LocalTensor_swigregister(LocalTensor)

class RDCPot1_LetterClass(EnsemblePot):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    HARMONIC = _rdcPot.RDCPot1_LetterClass_HARMONIC
    SQUARE = _rdcPot.RDCPot1_LetterClass_SQUARE
    LINEAR = _rdcPot.RDCPot1_LetterClass_LINEAR
    LINEARSQUARE = _rdcPot.RDCPot1_LetterClass_LINEARSQUARE
    AVE = _rdcPot.RDCPot1_LetterClass_AVE
    SUM = _rdcPot.RDCPot1_LetterClass_SUM
    PAIRWISE = _rdcPot.RDCPot1_LetterClass_PAIRWISE

    def __init__(self, *args, **kwargs):
        this = _rdcPot.new_RDCPot1_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rdcPot.delete_RDCPot1_LetterClass
    __del__ = lambda self: None

    def addRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_addRestraints(self, *args, **kwargs)

    def energyMaybeDerivs0(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_energyMaybeDerivs0(self, *args, **kwargs)

    def energyMaybeDerivs1(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_energyMaybeDerivs1(self, *args, **kwargs)

    def energyMaybeDerivs2(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_energyMaybeDerivs2(self, *args, **kwargs)

    def energyMaybeDerivsPost(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_energyMaybeDerivsPost(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_rms(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_deviation(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_numRestraints(self, *args, **kwargs)

    def useLocalTensor(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_useLocalTensor(self, *args, **kwargs)

    def setUseLocalTensor(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setUseLocalTensor(self, *args, **kwargs)
    oTensor = _swig_property(_rdcPot.RDCPot1_LetterClass_oTensor_get, _rdcPot.RDCPot1_LetterClass_oTensor_set)
    localTensors = _swig_property(_rdcPot.RDCPot1_LetterClass_localTensors_get, _rdcPot.RDCPot1_LetterClass_localTensors_set)

    def getLocalTensors(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_getLocalTensors(self, *args, **kwargs)

    def setLocalTensors(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setLocalTensors(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_restraints(self, *args, **kwargs)

    def rawRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_rawRestraints(self, *args, **kwargs)

    def removeRestraint(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_removeRestraint(self, *args, **kwargs)

    def addRestraint(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_addRestraint(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_info(self, *args, **kwargs)

    def showRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_showRestraints(self, *args, **kwargs)

    def showViolations(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_showViolations(self, *args, **kwargs)

    def allowBadRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_allowBadRestraints(self, *args, **kwargs)

    def setAllowBadRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setAllowBadRestraints(self, *args, **kwargs)

    def deltaDFS(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_deltaDFS(self, *args, **kwargs)

    def setDeltaDFS(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setDeltaDFS(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setVerbose(self, *args, **kwargs)

    def useDistance(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_useDistance(self, *args, **kwargs)

    def setUseDistance(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setUseDistance(self, *args, **kwargs)

    def gyroA(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_gyroA(self, *args, **kwargs)

    def setGyroA(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setGyroA(self, *args, **kwargs)

    def gyroB(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_gyroB(self, *args, **kwargs)

    def setGyroB(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setGyroB(self, *args, **kwargs)

    def bondLength(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_bondLength(self, *args, **kwargs)

    def setBondLength(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setBondLength(self, *args, **kwargs)

    def showAllRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_showAllRestraints(self, *args, **kwargs)

    def setShowAllRestraints(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setShowAllRestraints(self, *args, **kwargs)

    def useSign(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_useSign(self, *args, **kwargs)

    def setUseSign(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setUseSign(self, *args, **kwargs)

    def potType(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_potType(self, *args, **kwargs)

    def setPotType(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setPotType(self, *args, **kwargs)

    def aveType(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_aveType(self, *args, **kwargs)

    def setAveType(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_setAveType(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _rdcPot.RDCPot1_LetterClass_help(self, *args, **kwargs)

class RDCPot1_LetterClassPtr(RDCPot1_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RDCPot1_LetterClass

RDCPot1_LetterClass_swigregister = _rdcPot.RDCPot1_LetterClass_swigregister
RDCPot1_LetterClass_swigregister(RDCPot1_LetterClass)

class RDCPot1_Restraint(Restraint_RDCPot1):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    verbose = _swig_property(_rdcPot.RDCPot1_Restraint_verbose_get, _rdcPot.RDCPot1_Restraint_verbose_set)

    def __init__(self, *args, **kwargs):
        this = _rdcPot.new_RDCPot1_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rdcPot.delete_RDCPot1_Restraint
    __del__ = lambda self: None

    def ok(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_ok(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_deriv(self, *args, **kwargs)

    def singleDerivContrib(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_singleDerivContrib(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_calcd(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_obs(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_setObs(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_setErr(self, *args, **kwargs)

    def aveSize(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_aveSize(self, *args, **kwargs)

    def selPairs(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_selPairs(self, *args, **kwargs)

    def plusErr(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_plusErr(self, *args, **kwargs)

    def minusErr(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_minusErr(self, *args, **kwargs)

    def useSign(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_useSign(self, *args, **kwargs)

    def setUseSign(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_setUseSign(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_setScale(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_name(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_comment(self, *args, **kwargs)

    def selectionFilter(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_selectionFilter(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_deviation(self, *args, **kwargs)

    def calcd_contrib(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_calcd_contrib(self, *args, **kwargs)

    def updateAveSize(self, *args, **kwargs):
        return _rdcPot.RDCPot1_Restraint_updateAveSize(self, *args, **kwargs)

class RDCPot1_RestraintPtr(RDCPot1_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RDCPot1_Restraint

RDCPot1_Restraint_swigregister = _rdcPot.RDCPot1_Restraint_swigregister
RDCPot1_Restraint_swigregister(RDCPot1_Restraint)

class rc_ptr_RDCPot1_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rdcPot.new_rc_ptr_RDCPot1_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rdcPot.delete_rc_ptr_RDCPot1_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_release(self, *args, **kwargs)
    verbose = _swig_property(_rdcPot.rc_ptr_RDCPot1_Restraint_verbose_get, _rdcPot.rc_ptr_RDCPot1_Restraint_verbose_set)

    def ok(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_ok(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_deriv(self, *args, **kwargs)

    def singleDerivContrib(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_singleDerivContrib(self, *args, **kwargs)

    def calcd(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_calcd(self, *args, **kwargs)

    def obs(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_obs(self, *args, **kwargs)

    def setObs(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_setObs(self, *args, **kwargs)

    def setErr(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_setErr(self, *args, **kwargs)

    def aveSize(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_aveSize(self, *args, **kwargs)

    def selPairs(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_selPairs(self, *args, **kwargs)

    def plusErr(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_plusErr(self, *args, **kwargs)

    def minusErr(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_minusErr(self, *args, **kwargs)

    def useSign(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_useSign(self, *args, **kwargs)

    def setUseSign(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_setUseSign(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_setScale(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_name(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_comment(self, *args, **kwargs)

    def selectionFilter(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_selectionFilter(self, *args, **kwargs)

    def deviation(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_deviation(self, *args, **kwargs)

    def calcd_contrib(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_calcd_contrib(self, *args, **kwargs)

    def updateAveSize(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_updateAveSize(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_violated(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _rdcPot.rc_ptr_RDCPot1_Restraint_setName(self, *args, **kwargs)

class rc_ptr_RDCPot1_RestraintPtr(rc_ptr_RDCPot1_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_RDCPot1_Restraint

rc_ptr_RDCPot1_Restraint_swigregister = _rdcPot.rc_ptr_RDCPot1_Restraint_swigregister
rc_ptr_RDCPot1_Restraint_swigregister(rc_ptr_RDCPot1_Restraint)

class CDSList_RDCPot1_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCPot1_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _rdcPot.new_CDSList_RDCPot1_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _rdcPot.CDSList_RDCPot1_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCPot1_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCPot1_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCPot1_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCPot1_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCPot1_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCPot1_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCPot1_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _rdcPot.delete_CDSList_RDCPot1_Restraint
    __del__ = lambda self: None

class CDSList_RDCPot1_RestraintPtr(CDSList_RDCPot1_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_RDCPot1_Restraint

CDSList_RDCPot1_Restraint_swigregister = _rdcPot.CDSList_RDCPot1_Restraint_swigregister
CDSList_RDCPot1_Restraint_swigregister(CDSList_RDCPot1_Restraint)

class CDSList_RDCSelPair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCSelPair___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _rdcPot.new_CDSList_RDCSelPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _rdcPot.CDSList_RDCSelPair___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCSelPair___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCSelPair_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCSelPair_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCSelPair_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCSelPair___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCSelPair___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _rdcPot.CDSList_RDCSelPair_help(self, *args, **kwargs)
    __swig_destroy__ = _rdcPot.delete_CDSList_RDCSelPair
    __del__ = lambda self: None

class CDSList_RDCSelPairPtr(CDSList_RDCSelPair):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_RDCSelPair

CDSList_RDCSelPair_swigregister = _rdcPot.CDSList_RDCSelPair_swigregister
CDSList_RDCSelPair_swigregister(CDSList_RDCSelPair)

class RDCSelPair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    a = _swig_property(_rdcPot.RDCSelPair_a_get, _rdcPot.RDCSelPair_a_set)
    b = _swig_property(_rdcPot.RDCSelPair_b_get, _rdcPot.RDCSelPair_b_set)

    def __init__(self, *args):
        this = _rdcPot.new_RDCSelPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args, **kwargs):
        return _rdcPot.RDCSelPair___eq__(self, *args, **kwargs)
    __swig_destroy__ = _rdcPot.delete_RDCSelPair
    __del__ = lambda self: None

class RDCSelPairPtr(RDCSelPair):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RDCSelPair

RDCSelPair_swigregister = _rdcPot.RDCSelPair_swigregister
RDCSelPair_swigregister(RDCSelPair)


import mat3
def rdcrestraint_aSel(self):
  return self.selPairs()[0].a
def rdcrestraint_bSel(self):
  return self.selPairs()[0].b

RDCPot1_Restraint.aSelection = rdcrestraint_aSel
RDCPot1_Restraint.bSelection = rdcrestraint_bSel
rc_ptr_RDCPot1_Restraint.aSelection = rdcrestraint_aSel
rc_ptr_RDCPot1_Restraint.bSelection = rdcrestraint_bSel


pyXplorHelp = help


def help(*args):
    return _rdcPot.help(*args)
help = _rdcPot.help


