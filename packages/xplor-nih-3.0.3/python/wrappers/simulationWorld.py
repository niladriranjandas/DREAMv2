# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_simulationWorld')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_simulationWorld')
    _simulationWorld = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_simulationWorld', [dirname(__file__)])
        except ImportError:
            import _simulationWorld
            return _simulationWorld
        try:
            _mod = imp.load_module('_simulationWorld', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _simulationWorld = swig_import_helper()
    del swig_import_helper
else:
    import _simulationWorld
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class RandomNum(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _simulationWorld.new_RandomNum(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setSeed(self, *args, **kwargs):
        return _simulationWorld.RandomNum_setSeed(self, *args, **kwargs)

    def seed(self, *args, **kwargs):
        return _simulationWorld.RandomNum_seed(self, *args, **kwargs)

    def uniform(self, *args, **kwargs):
        return _simulationWorld.RandomNum_uniform(self, *args, **kwargs)

    def integerInRange(self, *args, **kwargs):
        return _simulationWorld.RandomNum_integerInRange(self, *args, **kwargs)
    __swig_destroy__ = _simulationWorld.delete_RandomNum
    __del__ = lambda self: None

class RandomNumPtr(RandomNum):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RandomNum

RandomNum_swigregister = _simulationWorld.RandomNum_swigregister
RandomNum_swigregister(RandomNum)

class SimulationWorld(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def timeFactor(self, *args, **kwargs):
        return _simulationWorld.SimulationWorld_timeFactor(self, *args, **kwargs)

    def kBoltzmann(self, *args, **kwargs):
        return _simulationWorld.SimulationWorld_kBoltzmann(self, *args, **kwargs)
    random = _swig_property(_simulationWorld.SimulationWorld_random_get, _simulationWorld.SimulationWorld_random_set)

    def setRandomSeed(self, *args, **kwargs):
        return _simulationWorld.SimulationWorld_setRandomSeed(self, *args, **kwargs)

    def registerRandomSeeder(self, *args, **kwargs):
        return _simulationWorld.SimulationWorld_registerRandomSeeder(self, *args, **kwargs)
    LOG_NONE = _simulationWorld.SimulationWorld_LOG_NONE
    LOG_NORMAL = _simulationWorld.SimulationWorld_LOG_NORMAL
    LOG_ALL = _simulationWorld.SimulationWorld_LOG_ALL
    LOG_DEBUG = _simulationWorld.SimulationWorld_LOG_DEBUG

    def logLevel(self, *args, **kwargs):
        return _simulationWorld.SimulationWorld_logLevel(self, *args, **kwargs)

    def setLogLevel(self, *args, **kwargs):
        return _simulationWorld.SimulationWorld_setLogLevel(self, *args, **kwargs)
    world = staticmethod(_simulationWorld.SimulationWorld_world)
    init = staticmethod(_simulationWorld.SimulationWorld_init)
    addFinalizer = staticmethod(_simulationWorld.SimulationWorld_addFinalizer)
    finalize = staticmethod(_simulationWorld.SimulationWorld_finalize)

    def cpuTime(self, *args, **kwargs):
        return _simulationWorld.SimulationWorld_cpuTime(self, *args, **kwargs)

    def memoryUsed(self, *args, **kwargs):
        return _simulationWorld.SimulationWorld_memoryUsed(self, *args, **kwargs)
    __swig_destroy__ = _simulationWorld.delete_SimulationWorld
    __del__ = lambda self: None

class SimulationWorldPtr(SimulationWorld):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = SimulationWorld

SimulationWorld_swigregister = _simulationWorld.SimulationWorld_swigregister
SimulationWorld_swigregister(SimulationWorld)

def SimulationWorld_world(*args):
    return _simulationWorld.SimulationWorld_world(*args)
SimulationWorld_world = _simulationWorld.SimulationWorld_world

def SimulationWorld_init(*args, **kwargs):
    return _simulationWorld.SimulationWorld_init(*args, **kwargs)
SimulationWorld_init = _simulationWorld.SimulationWorld_init

def SimulationWorld_addFinalizer(*args, **kwargs):
    return _simulationWorld.SimulationWorld_addFinalizer(*args, **kwargs)
SimulationWorld_addFinalizer = _simulationWorld.SimulationWorld_addFinalizer

def SimulationWorld_finalize(*args, **kwargs):
    return _simulationWorld.SimulationWorld_finalize(*args, **kwargs)
SimulationWorld_finalize = _simulationWorld.SimulationWorld_finalize

class RandomSeeder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _simulationWorld.delete_RandomSeeder
    __del__ = lambda self: None

    def setSeed(self, *args, **kwargs):
        return _simulationWorld.RandomSeeder_setSeed(self, *args, **kwargs)

class RandomSeederPtr(RandomSeeder):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RandomSeeder

RandomSeeder_swigregister = _simulationWorld.RandomSeeder_swigregister
RandomSeeder_swigregister(RandomSeeder)


def world():
    return SimulationWorld_world()


pyXplorHelp = help


def help(*args):
    return _simulationWorld.help(*args)
help = _simulationWorld.help


