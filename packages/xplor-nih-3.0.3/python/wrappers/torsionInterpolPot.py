# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_torsionInterpolPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_torsionInterpolPot')
    _torsionInterpolPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_torsionInterpolPot', [dirname(__file__)])
        except ImportError:
            import _torsionInterpolPot
            return _torsionInterpolPot
        try:
            _mod = imp.load_module('_torsionInterpolPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _torsionInterpolPot = swig_import_helper()
    del swig_import_helper
else:
    import _torsionInterpolPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _torsionInterpolPot.Modified_MOD_SELF
    MOD_SIMULATION = _torsionInterpolPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _torsionInterpolPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _torsionInterpolPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _torsionInterpolPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _torsionInterpolPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _torsionInterpolPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _torsionInterpolPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_torsionInterpolPot.ModifiedBase_modified_get, _torsionInterpolPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_torsionInterpolPot.ModifiedBase_registeredSimulations_get, _torsionInterpolPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _torsionInterpolPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _torsionInterpolPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _torsionInterpolPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _torsionInterpolPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _torsionInterpolPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class TorsionInterpolPot1D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_TorsionInterpolPot1D(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _torsionInterpolPot.delete_TorsionInterpolPot1D
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_calcEnergyAndDerivs(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_addRestraints(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_violations(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_rms(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_numRestraints(self, *args, **kwargs)
    noPotSummary = _swig_property(_torsionInterpolPot.TorsionInterpolPot1D_noPotSummary_get, _torsionInterpolPot.TorsionInterpolPot1D_noPotSummary_set)

    def simulation(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_info(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_restraints(self, *args, **kwargs)

    def surf(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_surf(self, *args, **kwargs)

    def surfderiv(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_surfderiv(self, *args, **kwargs)

    def torScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_torScale(self, *args, **kwargs)

    def setTorScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_setTorScale(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_comment(self, *args, **kwargs)

    def setComment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_setComment(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_setVerbose(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_torsionInterpolPot.TorsionInterpolPot1D_instanceData__get, _torsionInterpolPot.TorsionInterpolPot1D_instanceData__set)
    instanceDataCreate = _swig_property(_torsionInterpolPot.TorsionInterpolPot1D_instanceDataCreate_get, _torsionInterpolPot.TorsionInterpolPot1D_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_torsionInterpolPot.TorsionInterpolPot1D_instanceDataCleanup_get, _torsionInterpolPot.TorsionInterpolPot1D_instanceDataCleanup_set)
    modified = _swig_property(_torsionInterpolPot.TorsionInterpolPot1D_modified_get, _torsionInterpolPot.TorsionInterpolPot1D_modified_set)
    registeredSimulations = _swig_property(_torsionInterpolPot.TorsionInterpolPot1D_registeredSimulations_get, _torsionInterpolPot.TorsionInterpolPot1D_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_unRegister(self, *args, **kwargs)

class TorsionInterpolPot1DPtr(TorsionInterpolPot1D):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = TorsionInterpolPot1D

TorsionInterpolPot1D_swigregister = _torsionInterpolPot.TorsionInterpolPot1D_swigregister
TorsionInterpolPot1D_swigregister(TorsionInterpolPot1D)


realTorsionInterpolPot1D = TorsionInterpolPot1D
def TorsionInterpolPot1D(*args):
    from potProxy import PotProxy
    return PotProxy( realTorsionInterpolPot1D(*args) )

class TorsionInterpolPot2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_TorsionInterpolPot2D(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _torsionInterpolPot.delete_TorsionInterpolPot2D
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_calcEnergyAndDerivs(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_addRestraints(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_violations(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_rms(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_numRestraints(self, *args, **kwargs)
    noPotSummary = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_noPotSummary_get, _torsionInterpolPot.TorsionInterpolPot2D_noPotSummary_set)

    def simulation(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_info(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_restraints(self, *args, **kwargs)

    def surf(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_surf(self, *args, **kwargs)

    def torScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_torScale(self, *args, **kwargs)

    def setTorScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_setTorScale(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_comment(self, *args, **kwargs)

    def setComment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_setComment(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_setVerbose(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_instanceData__get, _torsionInterpolPot.TorsionInterpolPot2D_instanceData__set)
    instanceDataCreate = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_instanceDataCreate_get, _torsionInterpolPot.TorsionInterpolPot2D_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_instanceDataCleanup_get, _torsionInterpolPot.TorsionInterpolPot2D_instanceDataCleanup_set)
    modified = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_modified_get, _torsionInterpolPot.TorsionInterpolPot2D_modified_set)
    registeredSimulations = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_registeredSimulations_get, _torsionInterpolPot.TorsionInterpolPot2D_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_unRegister(self, *args, **kwargs)

class TorsionInterpolPot2DPtr(TorsionInterpolPot2D):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = TorsionInterpolPot2D

TorsionInterpolPot2D_swigregister = _torsionInterpolPot.TorsionInterpolPot2D_swigregister
TorsionInterpolPot2D_swigregister(TorsionInterpolPot2D)


realTorsionInterpolPot2D = TorsionInterpolPot2D
def TorsionInterpolPot2D(*args):
    from potProxy import PotProxy
    return PotProxy( realTorsionInterpolPot2D(*args) )

class TorsionInterpolPot3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_TorsionInterpolPot3D(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _torsionInterpolPot.delete_TorsionInterpolPot3D
    __del__ = lambda self: None

    def calcEnergy(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_calcEnergyAndDerivs(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_addRestraints(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_violations(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_rms(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_numRestraints(self, *args, **kwargs)
    noPotSummary = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_noPotSummary_get, _torsionInterpolPot.TorsionInterpolPot3D_noPotSummary_set)

    def simulation(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_info(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_restraints(self, *args, **kwargs)

    def surf(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_surf(self, *args, **kwargs)

    def torScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_torScale(self, *args, **kwargs)

    def setTorScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_setTorScale(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_comment(self, *args, **kwargs)

    def setComment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_setComment(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_setVerbose(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_setThreshold(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_updateValues(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_instanceData__get, _torsionInterpolPot.TorsionInterpolPot3D_instanceData__set)
    instanceDataCreate = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_instanceDataCreate_get, _torsionInterpolPot.TorsionInterpolPot3D_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_instanceDataCleanup_get, _torsionInterpolPot.TorsionInterpolPot3D_instanceDataCleanup_set)
    modified = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_modified_get, _torsionInterpolPot.TorsionInterpolPot3D_modified_set)
    registeredSimulations = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_registeredSimulations_get, _torsionInterpolPot.TorsionInterpolPot3D_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_unRegister(self, *args, **kwargs)

class TorsionInterpolPot3DPtr(TorsionInterpolPot3D):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = TorsionInterpolPot3D

TorsionInterpolPot3D_swigregister = _torsionInterpolPot.TorsionInterpolPot3D_swigregister
TorsionInterpolPot3D_swigregister(TorsionInterpolPot3D)


realTorsionInterpolPot3D = TorsionInterpolPot3D
def TorsionInterpolPot3D(*args):
    from potProxy import PotProxy
    return PotProxy( realTorsionInterpolPot3D(*args) )

class Restraint_TorsionInterpolPot1D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot1D_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_Restraint_TorsionInterpolPot1D(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot1D_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot1D_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot1D_setName(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_Restraint_TorsionInterpolPot1D
    __del__ = lambda self: None

class Restraint_TorsionInterpolPot1DPtr(Restraint_TorsionInterpolPot1D):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_TorsionInterpolPot1D

Restraint_TorsionInterpolPot1D_swigregister = _torsionInterpolPot.Restraint_TorsionInterpolPot1D_swigregister
Restraint_TorsionInterpolPot1D_swigregister(Restraint_TorsionInterpolPot1D)

class Restraint_TorsionInterpolPot2D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot2D_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_Restraint_TorsionInterpolPot2D(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot2D_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot2D_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot2D_setName(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_Restraint_TorsionInterpolPot2D
    __del__ = lambda self: None

class Restraint_TorsionInterpolPot2DPtr(Restraint_TorsionInterpolPot2D):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_TorsionInterpolPot2D

Restraint_TorsionInterpolPot2D_swigregister = _torsionInterpolPot.Restraint_TorsionInterpolPot2D_swigregister
Restraint_TorsionInterpolPot2D_swigregister(Restraint_TorsionInterpolPot2D)

class Restraint_TorsionInterpolPot3D(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def diff(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot3D_diff(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_Restraint_TorsionInterpolPot3D(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def violated(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot3D_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot3D_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _torsionInterpolPot.Restraint_TorsionInterpolPot3D_setName(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_Restraint_TorsionInterpolPot3D
    __del__ = lambda self: None

class Restraint_TorsionInterpolPot3DPtr(Restraint_TorsionInterpolPot3D):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Restraint_TorsionInterpolPot3D

Restraint_TorsionInterpolPot3D_swigregister = _torsionInterpolPot.Restraint_TorsionInterpolPot3D_swigregister
Restraint_TorsionInterpolPot3D_swigregister(Restraint_TorsionInterpolPot3D)

class TorsionInterpolPot1D_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_TorsionInterpolPot1D_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calcEnergy(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_addRestraints(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_violations(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_rms(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_numRestraints(self, *args, **kwargs)
    noPotSummary = _swig_property(_torsionInterpolPot.TorsionInterpolPot1D_LetterClass_noPotSummary_get, _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_noPotSummary_set)

    def simulation(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_info(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_restraints(self, *args, **kwargs)

    def surf(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_surf(self, *args, **kwargs)

    def surfderiv(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_surfderiv(self, *args, **kwargs)

    def torScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_torScale(self, *args, **kwargs)

    def setTorScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_setTorScale(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_comment(self, *args, **kwargs)

    def setComment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_setComment(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_setVerbose(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_help(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_TorsionInterpolPot1D_LetterClass
    __del__ = lambda self: None

class TorsionInterpolPot1D_LetterClassPtr(TorsionInterpolPot1D_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = TorsionInterpolPot1D_LetterClass

TorsionInterpolPot1D_LetterClass_swigregister = _torsionInterpolPot.TorsionInterpolPot1D_LetterClass_swigregister
TorsionInterpolPot1D_LetterClass_swigregister(TorsionInterpolPot1D_LetterClass)

class TorsionInterpolPot1D_Restraint(Restraint_TorsionInterpolPot1D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_TorsionInterpolPot1D_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def energy(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot1D_Restraint_deriv(self, *args, **kwargs)
    angle1 = _swig_property(_torsionInterpolPot.TorsionInterpolPot1D_Restraint_angle1_get, _torsionInterpolPot.TorsionInterpolPot1D_Restraint_angle1_set)
    angle1val = _swig_property(_torsionInterpolPot.TorsionInterpolPot1D_Restraint_angle1val_get, _torsionInterpolPot.TorsionInterpolPot1D_Restraint_angle1val_set)
    __swig_destroy__ = _torsionInterpolPot.delete_TorsionInterpolPot1D_Restraint
    __del__ = lambda self: None

class TorsionInterpolPot1D_RestraintPtr(TorsionInterpolPot1D_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = TorsionInterpolPot1D_Restraint

TorsionInterpolPot1D_Restraint_swigregister = _torsionInterpolPot.TorsionInterpolPot1D_Restraint_swigregister
TorsionInterpolPot1D_Restraint_swigregister(TorsionInterpolPot1D_Restraint)

class TorsionInterpolPot2D_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_TorsionInterpolPot2D_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calcEnergy(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_addRestraints(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_violations(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_rms(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_numRestraints(self, *args, **kwargs)
    noPotSummary = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_LetterClass_noPotSummary_get, _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_noPotSummary_set)

    def simulation(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_info(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_restraints(self, *args, **kwargs)

    def surf(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_surf(self, *args, **kwargs)

    def torScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_torScale(self, *args, **kwargs)

    def setTorScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_setTorScale(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_comment(self, *args, **kwargs)

    def setComment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_setComment(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_setVerbose(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_help(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_TorsionInterpolPot2D_LetterClass
    __del__ = lambda self: None

class TorsionInterpolPot2D_LetterClassPtr(TorsionInterpolPot2D_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = TorsionInterpolPot2D_LetterClass

TorsionInterpolPot2D_LetterClass_swigregister = _torsionInterpolPot.TorsionInterpolPot2D_LetterClass_swigregister
TorsionInterpolPot2D_LetterClass_swigregister(TorsionInterpolPot2D_LetterClass)

class TorsionInterpolPot2D_Restraint(Restraint_TorsionInterpolPot2D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_TorsionInterpolPot2D_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def energy(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot2D_Restraint_deriv(self, *args, **kwargs)
    angle1 = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_Restraint_angle1_get, _torsionInterpolPot.TorsionInterpolPot2D_Restraint_angle1_set)
    angle2 = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_Restraint_angle2_get, _torsionInterpolPot.TorsionInterpolPot2D_Restraint_angle2_set)
    angle1val = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_Restraint_angle1val_get, _torsionInterpolPot.TorsionInterpolPot2D_Restraint_angle1val_set)
    angle2val = _swig_property(_torsionInterpolPot.TorsionInterpolPot2D_Restraint_angle2val_get, _torsionInterpolPot.TorsionInterpolPot2D_Restraint_angle2val_set)
    __swig_destroy__ = _torsionInterpolPot.delete_TorsionInterpolPot2D_Restraint
    __del__ = lambda self: None

class TorsionInterpolPot2D_RestraintPtr(TorsionInterpolPot2D_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = TorsionInterpolPot2D_Restraint

TorsionInterpolPot2D_Restraint_swigregister = _torsionInterpolPot.TorsionInterpolPot2D_Restraint_swigregister
TorsionInterpolPot2D_Restraint_swigregister(TorsionInterpolPot2D_Restraint)

class TorsionInterpolPot3D_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_TorsionInterpolPot3D_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def calcEnergy(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def addRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_addRestraints(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_violations(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_rms(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_numRestraints(self, *args, **kwargs)
    noPotSummary = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_LetterClass_noPotSummary_get, _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_noPotSummary_set)

    def simulation(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_simulation(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_info(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_restraints(self, *args, **kwargs)

    def surf(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_surf(self, *args, **kwargs)

    def torScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_torScale(self, *args, **kwargs)

    def setTorScale(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_setTorScale(self, *args, **kwargs)

    def comment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_comment(self, *args, **kwargs)

    def setComment(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_setComment(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_setVerbose(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_help(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_TorsionInterpolPot3D_LetterClass
    __del__ = lambda self: None

class TorsionInterpolPot3D_LetterClassPtr(TorsionInterpolPot3D_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = TorsionInterpolPot3D_LetterClass

TorsionInterpolPot3D_LetterClass_swigregister = _torsionInterpolPot.TorsionInterpolPot3D_LetterClass_swigregister
TorsionInterpolPot3D_LetterClass_swigregister(TorsionInterpolPot3D_LetterClass)

class TorsionInterpolPot3D_Restraint(Restraint_TorsionInterpolPot3D):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _torsionInterpolPot.new_TorsionInterpolPot3D_Restraint(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def energy(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _torsionInterpolPot.TorsionInterpolPot3D_Restraint_deriv(self, *args, **kwargs)
    angle1 = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle1_get, _torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle1_set)
    angle2 = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle2_get, _torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle2_set)
    angle3 = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle3_get, _torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle3_set)
    angle1val = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle1val_get, _torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle1val_set)
    angle2val = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle2val_get, _torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle2val_set)
    angle3val = _swig_property(_torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle3val_get, _torsionInterpolPot.TorsionInterpolPot3D_Restraint_angle3val_set)
    __swig_destroy__ = _torsionInterpolPot.delete_TorsionInterpolPot3D_Restraint
    __del__ = lambda self: None

class TorsionInterpolPot3D_RestraintPtr(TorsionInterpolPot3D_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = TorsionInterpolPot3D_Restraint

TorsionInterpolPot3D_Restraint_swigregister = _torsionInterpolPot.TorsionInterpolPot3D_Restraint_swigregister
TorsionInterpolPot3D_Restraint_swigregister(TorsionInterpolPot3D_Restraint)


def split(*args, **kwargs):
    return _torsionInterpolPot.split(*args, **kwargs)
split = _torsionInterpolPot.split
class rc_ptr_TorsionInterpolPot1D_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _torsionInterpolPot.new_rc_ptr_TorsionInterpolPot1D_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _torsionInterpolPot.delete_rc_ptr_TorsionInterpolPot1D_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_release(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_deriv(self, *args, **kwargs)
    angle1 = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_angle1_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_angle1_set)
    angle1val = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_angle1val_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_angle1val_set)

    def diff(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_setName(self, *args, **kwargs)

class rc_ptr_TorsionInterpolPot1D_RestraintPtr(rc_ptr_TorsionInterpolPot1D_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_TorsionInterpolPot1D_Restraint

rc_ptr_TorsionInterpolPot1D_Restraint_swigregister = _torsionInterpolPot.rc_ptr_TorsionInterpolPot1D_Restraint_swigregister
rc_ptr_TorsionInterpolPot1D_Restraint_swigregister(rc_ptr_TorsionInterpolPot1D_Restraint)

class rc_ptr_TorsionInterpolPot2D_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _torsionInterpolPot.new_rc_ptr_TorsionInterpolPot2D_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _torsionInterpolPot.delete_rc_ptr_TorsionInterpolPot2D_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_release(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_deriv(self, *args, **kwargs)
    angle1 = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_angle1_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_angle1_set)
    angle2 = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_angle2_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_angle2_set)
    angle1val = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_angle1val_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_angle1val_set)
    angle2val = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_angle2val_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_angle2val_set)

    def diff(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_setName(self, *args, **kwargs)

class rc_ptr_TorsionInterpolPot2D_RestraintPtr(rc_ptr_TorsionInterpolPot2D_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_TorsionInterpolPot2D_Restraint

rc_ptr_TorsionInterpolPot2D_Restraint_swigregister = _torsionInterpolPot.rc_ptr_TorsionInterpolPot2D_Restraint_swigregister
rc_ptr_TorsionInterpolPot2D_Restraint_swigregister(rc_ptr_TorsionInterpolPot2D_Restraint)

class rc_ptr_TorsionInterpolPot3D_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _torsionInterpolPot.new_rc_ptr_TorsionInterpolPot3D_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _torsionInterpolPot.delete_rc_ptr_TorsionInterpolPot3D_Restraint
    __del__ = lambda self: None

    def __deref__(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint___ref__(self, *args, **kwargs)

    def ptr(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_ptr(self, *args, **kwargs)

    def incr(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_incr(self, *args, **kwargs)

    def decr(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_decr(self, *args, **kwargs)

    def count(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_count(self, *args, **kwargs)

    def forceDelete(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_forceDelete(self, *args, **kwargs)

    def reset(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_reset(self, *args, **kwargs)

    def release(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_release(self, *args, **kwargs)

    def energy(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_energy(self, *args, **kwargs)

    def deriv(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_deriv(self, *args, **kwargs)
    angle1 = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle1_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle1_set)
    angle2 = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle2_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle2_set)
    angle3 = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle3_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle3_set)
    angle1val = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle1val_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle1val_set)
    angle2val = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle2val_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle2val_set)
    angle3val = _swig_property(_torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle3val_get, _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_angle3val_set)

    def diff(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_violated(self, *args, **kwargs)

    def name(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_name(self, *args, **kwargs)

    def setName(self, *args, **kwargs):
        return _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_setName(self, *args, **kwargs)

class rc_ptr_TorsionInterpolPot3D_RestraintPtr(rc_ptr_TorsionInterpolPot3D_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = rc_ptr_TorsionInterpolPot3D_Restraint

rc_ptr_TorsionInterpolPot3D_Restraint_swigregister = _torsionInterpolPot.rc_ptr_TorsionInterpolPot3D_Restraint_swigregister
rc_ptr_TorsionInterpolPot3D_Restraint_swigregister(rc_ptr_TorsionInterpolPot3D_Restraint)

class CDSList_TorsionInterpolPot1D_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _torsionInterpolPot.new_CDSList_TorsionInterpolPot1D_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_CDSList_TorsionInterpolPot1D_Restraint
    __del__ = lambda self: None

class CDSList_TorsionInterpolPot1D_RestraintPtr(CDSList_TorsionInterpolPot1D_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_TorsionInterpolPot1D_Restraint

CDSList_TorsionInterpolPot1D_Restraint_swigregister = _torsionInterpolPot.CDSList_TorsionInterpolPot1D_Restraint_swigregister
CDSList_TorsionInterpolPot1D_Restraint_swigregister(CDSList_TorsionInterpolPot1D_Restraint)

class CDSList_TorsionInterpolPot2D_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _torsionInterpolPot.new_CDSList_TorsionInterpolPot2D_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_CDSList_TorsionInterpolPot2D_Restraint
    __del__ = lambda self: None

class CDSList_TorsionInterpolPot2D_RestraintPtr(CDSList_TorsionInterpolPot2D_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_TorsionInterpolPot2D_Restraint

CDSList_TorsionInterpolPot2D_Restraint_swigregister = _torsionInterpolPot.CDSList_TorsionInterpolPot2D_Restraint_swigregister
CDSList_TorsionInterpolPot2D_Restraint_swigregister(CDSList_TorsionInterpolPot2D_Restraint)

class CDSList_TorsionInterpolPot3D_Restraint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _torsionInterpolPot.new_CDSList_TorsionInterpolPot3D_Restraint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint_help(self, *args, **kwargs)
    __swig_destroy__ = _torsionInterpolPot.delete_CDSList_TorsionInterpolPot3D_Restraint
    __del__ = lambda self: None

class CDSList_TorsionInterpolPot3D_RestraintPtr(CDSList_TorsionInterpolPot3D_Restraint):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_TorsionInterpolPot3D_Restraint

CDSList_TorsionInterpolPot3D_Restraint_swigregister = _torsionInterpolPot.CDSList_TorsionInterpolPot3D_Restraint_swigregister
CDSList_TorsionInterpolPot3D_Restraint_swigregister(CDSList_TorsionInterpolPot3D_Restraint)


import spline
import spline3D 


pyXplorHelp = help


def help(*args):
    return _torsionInterpolPot.help(*args)
help = _torsionInterpolPot.help


