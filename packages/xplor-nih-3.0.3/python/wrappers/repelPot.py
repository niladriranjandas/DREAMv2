# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_repelPot')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_repelPot')
    _repelPot = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_repelPot', [dirname(__file__)])
        except ImportError:
            import _repelPot
            return _repelPot
        try:
            _mod = imp.load_module('_repelPot', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _repelPot = swig_import_helper()
    del swig_import_helper
else:
    import _repelPot
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class Modified(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    MOD_SELF = _repelPot.Modified_MOD_SELF
    MOD_SIMULATION = _repelPot.Modified_MOD_SIMULATION

    def __init__(self, *args, **kwargs):
        this = _repelPot.new_Modified(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set(self, *args, **kwargs):
        return _repelPot.Modified_set(self, *args, **kwargs)

    def clear(self, *args, **kwargs):
        return _repelPot.Modified_clear(self, *args, **kwargs)

    def update(self, *args, **kwargs):
        return _repelPot.Modified_update(self, *args, **kwargs)

    def value(self, *args, **kwargs):
        return _repelPot.Modified_value(self, *args, **kwargs)

    def __call__(self, *args, **kwargs):
        return _repelPot.Modified___call__(self, *args, **kwargs)
    __swig_destroy__ = _repelPot.delete_Modified
    __del__ = lambda self: None

class ModifiedPtr(Modified):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Modified

Modified_swigregister = _repelPot.Modified_swigregister
Modified_swigregister(Modified)

class ModifiedBase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    modified = _swig_property(_repelPot.ModifiedBase_modified_get, _repelPot.ModifiedBase_modified_set)
    registeredSimulations = _swig_property(_repelPot.ModifiedBase_registeredSimulations_get, _repelPot.ModifiedBase_registeredSimulations_set)
    __swig_destroy__ = _repelPot.delete_ModifiedBase
    __del__ = lambda self: None

    def registerTo(self, *args, **kwargs):
        return _repelPot.ModifiedBase_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _repelPot.ModifiedBase_unRegister(self, *args, **kwargs)

    def updateValues(self, *args, **kwargs):
        return _repelPot.ModifiedBase_updateValues(self, *args, **kwargs)

class ModifiedBasePtr(ModifiedBase):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = ModifiedBase

ModifiedBase_swigregister = _repelPot.ModifiedBase_swigregister
ModifiedBase_swigregister(ModifiedBase)

class RepelPot(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        this = _repelPot.new_RepelPot(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self, *args, **kwargs):
        return _repelPot.RepelPot___deref__(self, *args, **kwargs)

    def __ref__(self, *args, **kwargs):
        return _repelPot.RepelPot___ref__(self, *args, **kwargs)

    def registerInstanceData(self, *args, **kwargs):
        return _repelPot.RepelPot_registerInstanceData(self, *args, **kwargs)

    def decrRefCnt(self, *args, **kwargs):
        return _repelPot.RepelPot_decrRefCnt(self, *args, **kwargs)

    def incrRefCnt(self, *args, **kwargs):
        return _repelPot.RepelPot_incrRefCnt(self, *args, **kwargs)

    def refCnt(self, *args, **kwargs):
        return _repelPot.RepelPot_refCnt(self, *args, **kwargs)

    def instanceData(self, *args, **kwargs):
        return _repelPot.RepelPot_instanceData(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _repelPot.RepelPot_help(self, *args, **kwargs)

    __oldinit__=__init__
    def __init__(self, *args):
        self.__oldinit__(*args)
        self.registerInstanceData(self)

    __swig_destroy__ = _repelPot.delete_RepelPot
    __del__ = lambda self: None

    def updateValues(self, *args, **kwargs):
        return _repelPot.RepelPot_updateValues(self, *args, **kwargs)
    numAtoms = _swig_property(_repelPot.RepelPot_numAtoms_get)
    staleGradient = _swig_property(_repelPot.RepelPot_staleGradient_get, _repelPot.RepelPot_staleGradient_set)

    def calcEnergy(self, *args, **kwargs):
        return _repelPot.RepelPot_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _repelPot.RepelPot_calcEnergyAndDerivs(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _repelPot.RepelPot_simulation(self, *args, **kwargs)

    def defaultSelection(self, *args, **kwargs):
        return _repelPot.RepelPot_defaultSelection(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _repelPot.RepelPot_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _repelPot.RepelPot_setVerbose(self, *args, **kwargs)

    def moveTol(self, *args, **kwargs):
        return _repelPot.RepelPot_moveTol(self, *args, **kwargs)

    def setMoveTol(self, *args, **kwargs):
        return _repelPot.RepelPot_setMoveTol(self, *args, **kwargs)

    def e14Factor(self, *args, **kwargs):
        return _repelPot.RepelPot_e14Factor(self, *args, **kwargs)

    def setE14Factor(self, *args, **kwargs):
        return _repelPot.RepelPot_setE14Factor(self, *args, **kwargs)

    def repel(self, *args, **kwargs):
        return _repelPot.RepelPot_repel(self, *args, **kwargs)

    def setRepel(self, *args, **kwargs):
        return _repelPot.RepelPot_setRepel(self, *args, **kwargs)

    def use14(self, *args, **kwargs):
        return _repelPot.RepelPot_use14(self, *args, **kwargs)

    def setUse14(self, *args, **kwargs):
        return _repelPot.RepelPot_setUse14(self, *args, **kwargs)

    def rMin(self, *args, **kwargs):
        return _repelPot.RepelPot_rMin(self, *args, **kwargs)

    def setRMin(self, *args, **kwargs):
        return _repelPot.RepelPot_setRMin(self, *args, **kwargs)

    def eMax(self, *args, **kwargs):
        return _repelPot.RepelPot_eMax(self, *args, **kwargs)

    def setEMax(self, *args, **kwargs):
        return _repelPot.RepelPot_setEMax(self, *args, **kwargs)

    def calcSelPairDerivs(self, *args, **kwargs):
        return _repelPot.RepelPot_calcSelPairDerivs(self, *args, **kwargs)

    def setCalcSelPairDerivs(self, *args, **kwargs):
        return _repelPot.RepelPot_setCalcSelPairDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _repelPot.RepelPot_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _repelPot.RepelPot_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _repelPot.RepelPot_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _repelPot.RepelPot_info(self, *args, **kwargs)

    def atomEnergies(self, *args, **kwargs):
        return _repelPot.RepelPot_atomEnergies(self, *args, **kwargs)

    def nbExclusions(self, *args, **kwargs):
        return _repelPot.RepelPot_nbExclusions(self, *args, **kwargs)

    def neighborInfo(self, *args, **kwargs):
        return _repelPot.RepelPot_neighborInfo(self, *args, **kwargs)
    selPairs = _swig_property(_repelPot.RepelPot_selPairs_get, _repelPot.RepelPot_selPairs_set)
    selPairWeights = _swig_property(_repelPot.RepelPot_selPairWeights_get, _repelPot.RepelPot_selPairWeights_set)
    selPairEnergies = _swig_property(_repelPot.RepelPot_selPairEnergies_get, _repelPot.RepelPot_selPairEnergies_set)
    selPairDerivs = _swig_property(_repelPot.RepelPot_selPairDerivs_get, _repelPot.RepelPot_selPairDerivs_set)
    selPairIncludeA = _swig_property(_repelPot.RepelPot_selPairIncludeA_get, _repelPot.RepelPot_selPairIncludeA_set)
    selPairIncludeB = _swig_property(_repelPot.RepelPot_selPairIncludeB_get, _repelPot.RepelPot_selPairIncludeB_set)

    def selectionPairs(self, *args, **kwargs):
        return _repelPot.RepelPot_selectionPairs(self, *args, **kwargs)

    def numSelectionPairs(self, *args, **kwargs):
        return _repelPot.RepelPot_numSelectionPairs(self, *args, **kwargs)

    def addSelectionPair(self, *args, **kwargs):
        return _repelPot.RepelPot_addSelectionPair(self, *args, **kwargs)

    def setSelectionPairWeight(self, *args, **kwargs):
        return _repelPot.RepelPot_setSelectionPairWeight(self, *args, **kwargs)

    def selectionPairWeight(self, *args, **kwargs):
        return _repelPot.RepelPot_selectionPairWeight(self, *args, **kwargs)

    def selectionPairEnergy(self, *args, **kwargs):
        return _repelPot.RepelPot_selectionPairEnergy(self, *args, **kwargs)

    def selectionPairDerivs(self, *args, **kwargs):
        return _repelPot.RepelPot_selectionPairDerivs(self, *args, **kwargs)

    def maxRadius(self, *args, **kwargs):
        return _repelPot.RepelPot_maxRadius(self, *args, **kwargs)

    def deleteSelectionPair(self, *args, **kwargs):
        return _repelPot.RepelPot_deleteSelectionPair(self, *args, **kwargs)

    def resetSelectionPairs(self, *args, **kwargs):
        return _repelPot.RepelPot_resetSelectionPairs(self, *args, **kwargs)

    def findAtomBumps(self, *args, **kwargs):
        return _repelPot.RepelPot_findAtomBumps(self, *args, **kwargs)

    def bumps(self, *args, **kwargs):
        return _repelPot.RepelPot_bumps(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _repelPot.RepelPot_restraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _repelPot.RepelPot_help(self, *args, **kwargs)

    def potName(self, *args, **kwargs):
        return _repelPot.RepelPot_potName(self, *args, **kwargs)

    def instanceName(self, *args, **kwargs):
        return _repelPot.RepelPot_instanceName(self, *args, **kwargs)

    def resetPotName(self, *args, **kwargs):
        return _repelPot.RepelPot_resetPotName(self, *args, **kwargs)

    def resetInstanceName(self, *args, **kwargs):
        return _repelPot.RepelPot_resetInstanceName(self, *args, **kwargs)

    def scale(self, *args, **kwargs):
        return _repelPot.RepelPot_scale(self, *args, **kwargs)

    def setScale(self, *args, **kwargs):
        return _repelPot.RepelPot_setScale(self, *args, **kwargs)

    def threshold(self, *args, **kwargs):
        return _repelPot.RepelPot_threshold(self, *args, **kwargs)

    def setThreshold(self, *args, **kwargs):
        return _repelPot.RepelPot_setThreshold(self, *args, **kwargs)

    def updateDelta(self, *args, **kwargs):
        return _repelPot.RepelPot_updateDelta(self, *args, **kwargs)
    instanceData_ = _swig_property(_repelPot.RepelPot_instanceData__get, _repelPot.RepelPot_instanceData__set)
    instanceDataCreate = _swig_property(_repelPot.RepelPot_instanceDataCreate_get, _repelPot.RepelPot_instanceDataCreate_set)
    instanceDataCleanup = _swig_property(_repelPot.RepelPot_instanceDataCleanup_get, _repelPot.RepelPot_instanceDataCleanup_set)
    modified = _swig_property(_repelPot.RepelPot_modified_get, _repelPot.RepelPot_modified_set)
    registeredSimulations = _swig_property(_repelPot.RepelPot_registeredSimulations_get, _repelPot.RepelPot_registeredSimulations_set)

    def registerTo(self, *args, **kwargs):
        return _repelPot.RepelPot_registerTo(self, *args, **kwargs)

    def unRegister(self, *args, **kwargs):
        return _repelPot.RepelPot_unRegister(self, *args, **kwargs)

class RepelPotPtr(RepelPot):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RepelPot

RepelPot_swigregister = _repelPot.RepelPot_swigregister
RepelPot_swigregister(RepelPot)


realRepelPot = RepelPot
def RepelPot(*args):
    from potProxy import PotProxy
    return PotProxy( realRepelPot(*args) )

class CDSList_SelectionPair(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _repelPot.CDSList_SelectionPair___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _repelPot.new_CDSList_SelectionPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _repelPot.CDSList_SelectionPair___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _repelPot.CDSList_SelectionPair___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _repelPot.CDSList_SelectionPair_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _repelPot.CDSList_SelectionPair_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _repelPot.CDSList_SelectionPair_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _repelPot.CDSList_SelectionPair___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _repelPot.CDSList_SelectionPair___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _repelPot.CDSList_SelectionPair_help(self, *args, **kwargs)
    __swig_destroy__ = _repelPot.delete_CDSList_SelectionPair
    __del__ = lambda self: None

class CDSList_SelectionPairPtr(CDSList_SelectionPair):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_SelectionPair

CDSList_SelectionPair_swigregister = _repelPot.CDSList_SelectionPair_swigregister
CDSList_SelectionPair_swigregister(CDSList_SelectionPair)

class Pair_AtomSel_AtomSel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    a = _swig_property(_repelPot.Pair_AtomSel_AtomSel_a_get, _repelPot.Pair_AtomSel_AtomSel_a_set)
    b = _swig_property(_repelPot.Pair_AtomSel_AtomSel_b_get, _repelPot.Pair_AtomSel_AtomSel_b_set)

    def __init__(self, *args):
        this = _repelPot.new_Pair_AtomSel_AtomSel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, *args, **kwargs):
        return _repelPot.Pair_AtomSel_AtomSel___eq__(self, *args, **kwargs)
    __swig_destroy__ = _repelPot.delete_Pair_AtomSel_AtomSel
    __del__ = lambda self: None

class Pair_AtomSel_AtomSelPtr(Pair_AtomSel_AtomSel):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = Pair_AtomSel_AtomSel

Pair_AtomSel_AtomSel_swigregister = _repelPot.Pair_AtomSel_AtomSel_swigregister
Pair_AtomSel_AtomSel_swigregister(Pair_AtomSel_AtomSel)

class CDSList_Bump(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __len__(self, *args, **kwargs):
        return _repelPot.CDSList_Bump___len__(self, *args, **kwargs)

    def __init__(self, *args):
        this = _repelPot.new_CDSList_Bump(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __getitem__(self, *args):
        return _repelPot.CDSList_Bump___getitem__(self, *args)

    def __delitem__(self, *args, **kwargs):
        return _repelPot.CDSList_Bump___delitem__(self, *args, **kwargs)

    def append(self, *args, **kwargs):
        return _repelPot.CDSList_Bump_append(self, *args, **kwargs)

    def remove(self, *args, **kwargs):
        return _repelPot.CDSList_Bump_remove(self, *args, **kwargs)

    def removeAll(self, *args, **kwargs):
        return _repelPot.CDSList_Bump_removeAll(self, *args, **kwargs)

    def __setitem__(self, *args, **kwargs):
        return _repelPot.CDSList_Bump___setitem__(self, *args, **kwargs)

    def __getslice__(self, *args, **kwargs):
        return _repelPot.CDSList_Bump___getslice__(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _repelPot.CDSList_Bump_help(self, *args, **kwargs)
    __swig_destroy__ = _repelPot.delete_CDSList_Bump
    __del__ = lambda self: None

class CDSList_BumpPtr(CDSList_Bump):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = CDSList_Bump

CDSList_Bump_swigregister = _repelPot.CDSList_Bump_swigregister
CDSList_Bump_swigregister(CDSList_Bump)

class RepelBump(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    atomi = _swig_property(_repelPot.RepelBump_atomi_get, _repelPot.RepelBump_atomi_set)
    atomj = _swig_property(_repelPot.RepelBump_atomj_get, _repelPot.RepelBump_atomj_set)
    dist = _swig_property(_repelPot.RepelBump_dist_get, _repelPot.RepelBump_dist_set)
    dist0 = _swig_property(_repelPot.RepelBump_dist0_get, _repelPot.RepelBump_dist0_set)
    energy = _swig_property(_repelPot.RepelBump_energy_get, _repelPot.RepelBump_energy_set)

    def __init__(self, *args):
        this = _repelPot.new_RepelBump(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def name(self, *args, **kwargs):
        return _repelPot.RepelBump_name(self, *args, **kwargs)

    def diff(self, *args, **kwargs):
        return _repelPot.RepelBump_diff(self, *args, **kwargs)

    def violated(self, *args, **kwargs):
        return _repelPot.RepelBump_violated(self, *args, **kwargs)
    __swig_destroy__ = _repelPot.delete_RepelBump
    __del__ = lambda self: None

class RepelBumpPtr(RepelBump):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RepelBump

RepelBump_swigregister = _repelPot.RepelBump_swigregister
RepelBump_swigregister(RepelBump)

class RepelPot_LetterClass(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def updateValues(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_updateValues(self, *args, **kwargs)

    def __init__(self, *args, **kwargs):
        this = _repelPot.new_RepelPot_LetterClass(*args, **kwargs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _repelPot.delete_RepelPot_LetterClass
    __del__ = lambda self: None
    numAtoms = _swig_property(_repelPot.RepelPot_LetterClass_numAtoms_get)
    staleGradient = _swig_property(_repelPot.RepelPot_LetterClass_staleGradient_get, _repelPot.RepelPot_LetterClass_staleGradient_set)

    def calcEnergy(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_calcEnergy(self, *args, **kwargs)

    def calcEnergyAndDerivs(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_calcEnergyAndDerivs(self, *args, **kwargs)

    def simulation(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_simulation(self, *args, **kwargs)

    def defaultSelection(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_defaultSelection(self, *args, **kwargs)

    def verbose(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_verbose(self, *args, **kwargs)

    def setVerbose(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_setVerbose(self, *args, **kwargs)

    def moveTol(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_moveTol(self, *args, **kwargs)

    def setMoveTol(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_setMoveTol(self, *args, **kwargs)

    def e14Factor(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_e14Factor(self, *args, **kwargs)

    def setE14Factor(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_setE14Factor(self, *args, **kwargs)

    def repel(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_repel(self, *args, **kwargs)

    def setRepel(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_setRepel(self, *args, **kwargs)

    def use14(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_use14(self, *args, **kwargs)

    def setUse14(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_setUse14(self, *args, **kwargs)

    def rMin(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_rMin(self, *args, **kwargs)

    def setRMin(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_setRMin(self, *args, **kwargs)

    def eMax(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_eMax(self, *args, **kwargs)

    def setEMax(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_setEMax(self, *args, **kwargs)

    def calcSelPairDerivs(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_calcSelPairDerivs(self, *args, **kwargs)

    def setCalcSelPairDerivs(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_setCalcSelPairDerivs(self, *args, **kwargs)

    def rms(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_rms(self, *args, **kwargs)

    def violations(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_violations(self, *args, **kwargs)

    def numRestraints(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_numRestraints(self, *args, **kwargs)

    def info(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_info(self, *args, **kwargs)

    def atomEnergies(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_atomEnergies(self, *args, **kwargs)

    def nbExclusions(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_nbExclusions(self, *args, **kwargs)

    def neighborInfo(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_neighborInfo(self, *args, **kwargs)
    selPairs = _swig_property(_repelPot.RepelPot_LetterClass_selPairs_get, _repelPot.RepelPot_LetterClass_selPairs_set)
    selPairWeights = _swig_property(_repelPot.RepelPot_LetterClass_selPairWeights_get, _repelPot.RepelPot_LetterClass_selPairWeights_set)
    selPairEnergies = _swig_property(_repelPot.RepelPot_LetterClass_selPairEnergies_get, _repelPot.RepelPot_LetterClass_selPairEnergies_set)
    selPairDerivs = _swig_property(_repelPot.RepelPot_LetterClass_selPairDerivs_get, _repelPot.RepelPot_LetterClass_selPairDerivs_set)
    selPairIncludeA = _swig_property(_repelPot.RepelPot_LetterClass_selPairIncludeA_get, _repelPot.RepelPot_LetterClass_selPairIncludeA_set)
    selPairIncludeB = _swig_property(_repelPot.RepelPot_LetterClass_selPairIncludeB_get, _repelPot.RepelPot_LetterClass_selPairIncludeB_set)

    def selectionPairs(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_selectionPairs(self, *args, **kwargs)

    def numSelectionPairs(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_numSelectionPairs(self, *args, **kwargs)

    def addSelectionPair(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_addSelectionPair(self, *args, **kwargs)

    def setSelectionPairWeight(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_setSelectionPairWeight(self, *args, **kwargs)

    def selectionPairWeight(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_selectionPairWeight(self, *args, **kwargs)

    def selectionPairEnergy(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_selectionPairEnergy(self, *args, **kwargs)

    def selectionPairDerivs(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_selectionPairDerivs(self, *args, **kwargs)

    def maxRadius(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_maxRadius(self, *args, **kwargs)

    def deleteSelectionPair(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_deleteSelectionPair(self, *args, **kwargs)

    def resetSelectionPairs(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_resetSelectionPairs(self, *args, **kwargs)

    def findAtomBumps(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_findAtomBumps(self, *args, **kwargs)

    def bumps(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_bumps(self, *args, **kwargs)

    def restraints(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_restraints(self, *args, **kwargs)

    def help(self, *args, **kwargs):
        return _repelPot.RepelPot_LetterClass_help(self, *args, **kwargs)

class RepelPot_LetterClassPtr(RepelPot_LetterClass):
    def __init__(self, this):
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
        self.this.own(0)
        self.__class__ = RepelPot_LetterClass

RepelPot_LetterClass_swigregister = _repelPot.RepelPot_LetterClass_swigregister
RepelPot_LetterClass_swigregister(RepelPot_LetterClass)


pyXplorHelp = help


def help(*args):
    return _repelPot.help(*args)
help = _repelPot.help


