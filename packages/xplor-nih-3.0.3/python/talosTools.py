"""
 Tools to help with configuration and analysis of TALOS +/N output
 """

def convertTalosN(predFile="pred.tab",
                  predAllFile="predAll.tab",
                  widthPadding= 5, # degrees
                  minWidth = 20, # degrees
                  useWeights=True,
                  segName=None,
                  omitResids=[],
                 ):
    """
    Given names of Talos-N input files, generate XPLOR-style dihedral restraints.
    
    return a string containing phi and psi restraints.

    If useWeights is False, hits with zero weight are omitted from the
    torsion angle range calculation.

    Specify resids to omit in the omitResids argument.
    """
    from sparta import GDB
    omitResids=[int(m) for m in omitResids]
    
    pred=GDB(predFile)
    predAll=GDB(predAllFile)
    
    if pred.data()['SEQUENCE'] != predAll.data()['SEQUENCE']:
        raise Exception("Error: the sequences in %s and %s do not match" %
                        (predTab,predAllTab))
    
    talosN = True if 'RESID_Q_CENTER' in predAll.getVars() else False
    
    
    def getMeanWidth(angleName):
        """
        return a list containin tuples of
          (resid, meanAngle, width)
    
        for the given angleName ("PHI" or "PSI")
        """
        
        ret=[]
        residField = 'RESID_Q_CENTER' if talosN else 'RESID'
        
        resids = [int(m) for m in pred.getValues('RESID')]

        for resid in sorted(resids):
            if resid in omitResids:
                continue
            resid=str(resid)
            predEnt = pred.getEntry('RESID',resid)
    
            if predEnt['CLASS'] != "Good" and not talosN:
                continue
            if predEnt['CLASS'] != "Strong" and talosN:
                continue
            
            predAllEntries = predAll.getEntries(residField,resid)
    
            ang0 = float(predAllEntries[0][angleName])
    
            angles = []
            for entry in predAllEntries:
                if useWeights:
                    weight = float(entry['W'])
                    if weight==0.:
                        continue
                    pass
                
                ang = float(entry[angleName])
                #choose the wrapped value w/in 180 degrees of first hit
                ang = min([ang-360,ang,ang+360],
                          key=lambda angle:abs(angle-ang0))
                angles.append(ang)
    
                pass
    
            if not angles:
                continue
            angMin = min(angles)
            angMax = max(angles)
            angMean  = 0.5 * (angMin + angMax)
            angWidth = max(minWidth,
                           0.5 * (angMax - angMin) + widthPadding)
            ret.append(( int(resid),angMean,angWidth) )
            pass
    
        return ret
    
    
    phis=sorted(getMeanWidth('PHI'),
                key=lambda x: x[0])
    psis=sorted(getMeanWidth('PSI'),
                key=lambda x: x[0])
    
    segStr = 'segid "'+segName+'" and' if segName else ""

    import time
    timeStr=time.strftime("%Y/%m/%d %T")
    restraintString="! generated by convertToTalos\n"
    import xplor
    restraintString+="! Xplor-NIH version " + xplor.version + '\n'
    restraintString+="! date: " + timeStr + '\n'

    restraintString+='\n! PHI restraints\n'
    from torsionTools import genXplorRestraint
    for (resid,ave,width) in phis:
        restraintString += genXplorRestraint("Phi",resid,ave,width,segName)
        pass
    
    restraintString+='\n! PSI restraints\n'
    for (resid,ave,width) in psis:
        restraintString += genXplorRestraint("Psi",resid,ave,width,segName)
        pass

    return restraintString


