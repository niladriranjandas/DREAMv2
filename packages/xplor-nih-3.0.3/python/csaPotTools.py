"""Tools to aid with the Chemical Shift Anisotropy potential term

The following functions aid in creating, manipulating and analyzing
<m csaPot>.CSAPot potential terms.

Some clarifying remarks on CSA tensor parameters can be found <l
csa-methods-marvin.pdf here>.

"""

from csaPot import CSAPot
from atomSel import AtomSel
from varTensorTools import create_VarTensor

#DaScale: please see note in csaPot module docs.

# The units of sigma here should be ppm. However, when calling setSigma
# directly the units should be ppb (multiply the ppm value by 1000).
#
# Type C and N parameters defined by: C(i-1)-O(i-1)-N(i) or C(i-1)-N(i)-HN(i)
# Taken from solution NMR measurements:
#    -Cornilescu & Bax (2000) J. Am. Chem. Soc. 122:10143.
# Note Fig. 7 of this paper is confusing: the axes which point
# straight up lie perpendicular to the atom plane definitions.
# For clarification see:
#    -Lipsitz & Tjandra (2003) J. Magn. Reson. 164:171.
#    -Lipsitz & Tjandra (2001) J. Am. Chem. Soc. 123:11065.

# Type Nss parameters defined by: N(i)-HN(i)-CA(i).
# Taken from: average values measured in crystalline GB1 for various amino acids, including Gly and Thr:
#   -Wylie et al. (2011) Proc. Natl. Acad. Sci. U. S. A. 108:16974-16979 (GB1 crystal).
# For tensor parameters measured by solid-state NMR experiments see also:
#   -Harbison et al. (1984) J. Magn. Reson. 60:79-82.
#   -Oas et al. (1987) J. Am. Chem. Soc. 109:5962-5966 [for Gly].
#   -Teng & Cross (1989) J. Magn. Reson. 85:439-447.
#   -Mai & Cross (1993) Protein Sci. 2:532-542.
#   -Wu et al. (1995) J. Am. Chem. Soc. 117:6148-6149.
#   -Wylie et al. (2011) Proc. Natl. Acad. Sci. U. S. A. 108:16974-16979 (GB1 crystal).

# Type NCA parameters defined by: N(i)-C(i-1)-CA(i).
# Taken from average of literature values available in 2003:
#    -Straus et al. (2003) J. Biomol. NMR 26:283.
# These were not experimentally measured. They were generated by averaging
# all available N CSA parameters in the literature as of 2003.
#

# Note: the Nss-gly or N-thr types require separate input files that
# collect only Gly or only Thr csa data.

# DaScale = Dabs / r_nhn**3
# Dabs = 24350.71 (this is the value at r_nhn=1)
# Note: r_nhn=1.042 is the default in rdcPotTools. This converts to DaScale = 21523.28
#
#                                                    sigma33   sigma11   sigma22
#    type     tensorClass  atomOrder  beta   gamma   sigmaX    sigmaY    sigmaZ     DaScale
#                                    (deg)   (deg)   (ppm)     (ppm)     (ppm)   (Dabs/rNH**3)
csaData = \
    [("C"        ,"bond"  , "132" ,  -40.0,   0.0, ( 23.30,    71.20,   -94.50),  21652.10),
     ("P"        ,"bisect", "123" ,    0.0,   0.0, (-99.33,    19.67,    79.67),  47965.10),
     ("N"        ,"bond"  , "231" ,  -20.0,  11.0, ( 62.80,  -108.50,    45.70),  21652.10),

     ("Nss"      ,"bond"  , "123" ,   17.5,  20.0, ( 68.22,  -110.00,    41.79), -21523.28),
     ("Nss-gly"  ,"bond"  , "123" ,   21.5,  20.0, ( 64.80,  -103.78,    38.98), -21523.28),
     ("Nss-thr"  ,"bond"  , "123" ,   19.0,  20.0, ( 66.34,  -107.59,    41.25), -21523.28),

     ("NCA"      ,"bond"  , "123" ,  103.3,   0.0, ( 63.50,  -104.20,    40.80),  21652.10),
     ("NCA-gly"  ,"bond"  , "123" ,   98.4,   0.0, ( 62.20,  -103.80,    41.50),  21652.10)]

def create_CSAPot(name,file=0,string=None,oTensor=0,sim=0):
    """create a <m csaPot>.CSAPot with the given name.
    the optional arguments are
      file:    the filename of an csa assignment table.
      string:  a string containing a csa assignment table.
      oTensor: a <m varTensor>.VarTensor representing the orientational
               tensor. If this argument is omitted a a new one is created.
      sim:     the associated <m simulation>.Simulation. It defaults to the
               current Simulation.
    """
    import re
    from simulation import currentSimulation
    if not sim: sim = currentSimulation()

    if not oTensor:
        oTensor = create_VarTensor("CSA-default")
    
    csa = CSAPot(name,oTensor,"",sim)

    from varTensorTools import registerExptToVarTensor
    registerExptToVarTensor(oTensor,csa)
    
    restraints = ""
    if file:
        restraints = open(file).read()
    if string:
        restraints += string
        pass

    if restraints:
        #determine type

        sel=re.search(r'assign\s*\([^)]+\)\s*'+                 # OO
                      r'\([^)]+\)\s*\([^)]+\)\s*\([^)]+\)\s*'+  # Z X Y
                      r'\(([^)]+)\)\s*' +   #m
                      r'\(([^)]+)\)\s*' +   #n
                      r'\(([^)]+)\)\s*',    #o
                      restraints,re.IGNORECASE)
        name=''
        mName = re.search(r'name\s+(\S+)',
                          sel.group(1),re.IGNORECASE).group(1)
        nName = re.search(r'name\s+(\S+)',
                          sel.group(2),re.IGNORECASE).group(1)
        oName = re.search(r'name\s+(\S+)',
                          sel.group(3),re.IGNORECASE).group(1)
        if mName=='P':
            name = 'P'
        elif mName=='C' and nName=='O' and oName=='N':
            name='C'
        elif mName=='C' and nName=='N' and oName=='HN':
            name='N'
     
        elif mName=='N' and nName=='HN' and oName=='CA':
            nsel=AtomSel(sel.group(1),sim)
            if nsel[0].residueName()=='GLY':
                name='Nss-gly'
            elif nsel[0].residueName()=='THR':
                name='Nss-thr'
            else:
                name='Nss'
                pass

        elif mName=='N' and nName=='C' and oName=='CA':
            nsel=AtomSel(sel.group(1),sim)
            if nsel[0].residueName()=='GLY':
                name='NCA-gly'
            else:
                name='NCA'
                pass
            pass
        else:
            print("create_CSAPot: WARNING: could not determe CSA type from "+\
                  "restraint file: " + file)
            pass
        
        from simulationWorld import SimulationWorld_world as simWorld
        if simWorld().logLevel()!='none':
            print('create_CSAPot: detected CSA restraints of type: %s' %\
                  name)
            pass
        supported=0
        for (entry,type,order,beta,gamma,sigma,scale) in csaData:
            if name==entry:
                sigma = [1000*x for x in sigma]
                csa.setSigma(sigma)
                csa.setDaScale(scale)
                csa.setTensorClass(type)
                csa.setAtomOrder(order)
                csa.setBeta(beta)
                csa.setGamma(gamma)
                supported=1
                break
            pass
        if not supported:
            print("create_CSAPot: WARNING: no support for atom type", name)
            pass
        pass
        csa.setThreshold(0.) #FIX: this should be changed
        csa.addRestraints(restraints)
        
        
    return csa

def makeTable(pot):
    """given a <m csaPot>.CSAPot, generate the associated assignment 
    table. Return this as a string.
    """
    ret=""
    t = pot.oTensor
    for restraint in pot.restraints():
        ret += "assign "
        ret += "( resid %4d and name OO)\n" % t.oAtom().residueNum()
        ret += "\t( resid %4d and name Z )\n"  % t.zAtom().residueNum()
        ret += "\t( resid %4d and name X )\n"  % t.xAtom().residueNum()
        ret += "\t( resid %4d and name Y )\n"  % t.yAtom().residueNum()
        ret += "\t( %s )\n"  % restraint.Selection1().string()
        ret += "\t( %s )\n"  % restraint.Selection2().string()
        ret += "\t( %s )  "  % restraint.Selection3().string()
        ret += "%7.4f %7.4f %7.4f\n\n" % (restraint.obs(),
                                          restraint.minusErr(),
                                          restraint.plusErr())
        pass
    return ret
        
        
from potList import PotListPtr

def CSA_analyze(potList):
    """perform analysis of <m csaPot>.CSAPot terms and return nicely formatted
    summary"""

    ret = ""

    from simulationTools import getPotTerms
    potList = getPotTerms(potList,'CSAPot')

    if not potList: return ret

    instanceNames = [x.instanceName() for x in potList]
    instanceNames.sort()

    ret+= "%9s  %6s  %6s  %5s  %7s  %5s  %6s %4s\n" % \
          (" " , "RMS", "R-fac", "Devia", "Da", "Rh", "R-inf", "Viols")

    csas = []
    for name in instanceNames:
        csa = [x for x in potList if x.instanceName()==name][0]
        csas.append(csa)
        print(csa.showViolations())

        print(csa.info())

        varTensor = csa.oTensor
        ret += "%-9s  %6.3f  %6.3f  %5.3f  %7.3f  %5.3f  %6.3f %4d\n" % \
               (name , csa.rms(), -1, -1,
                varTensor.Da(), varTensor.Rh(),
                -1, csa.violations() )
#               (name , csa.rms(), Rfactor(csa), deviation_percent(csa),
#                varTensor.Da(), varTensor.Rh(),
#                Rfactor_infinite(csa), csa.violations() )
        pass
    
    return ret

from simulationTools import registerTerm
registerTerm(CSA_analyze,"CSA Analysis","CSA",
r"""
For each CSA term, print the root mean square deviation between calculated and
observed value, and Da and Rh of the associate <m varTensor>.VarTensor
objects describing the alignment tensor, and the number of violated restraints.
The R-fac, devia and R-inf columns are currently placeholders not containing
useful information. 
""")
