#!/bin/bash

proteinname="$1"
pdbfile="$2"
seqfile="$3"
stage1data="$4"
upl_file="$5"

xplornoe="$6"
xplordihed="$7"

forlogpath=`pwd`
LOG_MASTER=$forlogpath"/"$proteinname"_minimal_log.txt"
#xplorcmd="/data2/nmr/our_algo/packages/xplor-nih-3.0.3/bin/xplor -py"
xplorcmd="../../packages/xplor-nih-3.0.3/bin/xplor -py"

MOD20_path=gap_correct/MOD20
MODMULTI_path=gap_correct/MODMULTI
RESIDUAL_path=gap_correct/RESIDUAL_FILES

gapfile=$proteinname"_gaps.txt"


# --- get the gaps ---
getgapfile=$proteinname"_getgap.m"
givegaptimefile=$proteinname"_givegaps_time.txt"
echo "cd .." > $getgapfile
echo "addpath(genpath(pwd));" >> $getgapfile
echo "cd code;" >> $getgapfile
echo "time_giveGaps=tic;" >> $getgapfile
echo "giveGaps('$pdbfile', '$stage1data', '$gapfile')" >> $getgapfile
echo "tottime = toc(time_giveGaps);" >> $getgapfile
echo "fid = fopen('$givegaptimefile','w');" >> $getgapfile
echo "fprintf(fid,'%d',tottime);" >> $getgapfile
echo "fclose(fid);" >> $getgapfile

if [ -f $getgapfile ]; then
	matlab -nodesktop -nosplash < $getgapfile
fi

# --- modeller-20 ---
#createModellerScript.sh 
#protname="$1"
#seqfile="$2"
#pdbfile="$3"
#gaps="$4"
#beginresi="$5"

tmpfirstreis=$proteinname"_firstresi.m"
firstresifile=$proteinname"_firstresi.txt"

echo "cd .." > $tmpfirstreis
echo "addpath(genpath(pwd));" >> $tmpfirstreis
echo "cd code;" >> $tmpfirstreis
echo "giveFirstResi('$gapfile','$seqfile','$firstresifile')" >> $tmpfirstreis
matlab -nodesktop -nosplash < $tmpfirstreis

detectedgaps=`cat $gapfile`
firstresi=`cat $firstresifile`

timemod20=$proteinname"_mod20_time.txt"
date > $timemod20
gap_correct/createModellerScript.sh "$proteinname" "$seqfile" "$pdbfile" "$detectedgaps" "$firstresi"
date >> $timemod20

modellergappdb_=`echo $pdbfile | awk -F'pdb' '{print $1}'`
modellergappdb=$modellergappdb_"gap.pdb"
alifile=$proteinname"_20.ali"
modelfile=$proteinname"_model20.py"

mkdir "$MOD20_path/$proteinname"
#cp $modellergappdb $MOD20_path/$proteinname/.
#cp $alifile $MOD20_path/$proteinname/.
#cp $modelfile $MOD20_path/$proteinname/.

[ -f "$modellergappdb" ] && mv $modellergappdb $MOD20_path/$proteinname/.
[ -f "$alifile" ] && mv $alifile $MOD20_path/$proteinname/.
[ -f "$modelfile" ] && mv $modelfile $MOD20_path/$proteinname/.

curr_path=`pwd`
cd $MOD20_path/$proteinname
#mod9.23 $modelfile
#mod10.0 $modelfile
mod10.4 $modelfile
echo "Gap-correct modeller $modelfile: $?" >> $LOG_MASTER
cd $curr_path

# ---- gather the files generated by modeller ---- #
pdbfilearr_="{"  
mod20_prot_fill=$proteinname"_fill"
mkdir $MODMULTI_path/$proteinname
for mod20file in `ls $MOD20_path/$proteinname/$mod20_prot_fill*pdb`
do
cp $mod20file $MODMULTI_path/$proteinname/.
modmulti_tmp=`echo $mod20file | awk -F'/' '{print $NF}'`
pdbfilearr_=$pdbfilearr_"'$MODMULTI_path/$proteinname/$modmulti_tmp',"
done
pdbfilearr=${pdbfilearr_::-1}
pdbfilearr=$pdbfilearr"}"
# ---- run multialign ----- #
op_multialign=$proteinname"_multi_align.txt"
op_multialign_core=$proteinname"_multi_align_core.txt"
op_gaps=$proteinname"_multi_gaps.txt"
multi_ali=$proteinname"_multi.ali"
multi_py=$proteinname"_multi.py"

tmp_multi=$proteinname"_multi.m"
gapfile_pairs=$proteinname"_gaps"

time_multiprep=$proteinname"_time.multiprep.txt"
echo "cd .." > $tmp_multi
echo "addpath(genpath(pwd));" >> $tmp_multi
echo "cd code;" >> $tmp_multi
echo "pdbfilearr=$pdbfilearr;" >> $tmp_multi
echo "gapstruct = makeGapStruct('$gapfile_pairs')" >> $tmp_multi
echo " time_req = tic;" >> $tmp_multi 
echo "chooseGapsGiveMultialignfile(pdbfilearr, '$seqfile', gapstruct, '$op_multialign', '$op_gaps')" >> $tmp_multi
echo "includeCore('$op_multialign','$op_gaps','$seqfile','$pdbfile','$op_multialign_core')" >> $tmp_multi
echo " tottime = toc(time_req);" >> $tmp_multi
echo "fid = fopen('$time_multiprep','w');" >> $tmp_multi
echo "fprintf(fid,'%d',tottime);" >> $tmp_multi
echo "fclose(fid);" >> $tmp_multi

matlab -nodesktop -nosplash < $tmp_multi
echo "Gap-correct choosing gaps $tmp_multi: $?" >> $LOG_MASTER

gapstomodel=`cat $op_gaps`
creatMultiModllerlog=$proteinname"_createMultiModellerScript.txt"
date > $creatMultiModllerlog
gap_correct/createMultiModellerScript.sh $proteinname $seqfile $op_multialign_core $multi_ali $multi_py "$gapstomodel"
date >> $creatMultiModllerlog

curr_path=`pwd`
mkdir $MODMULTI_path/$proteinname
#cp $multi_ali $MODMULTI_path/$proteinname/.
#cp $multi_py $MODMULTI_path/$proteinname/.
[ -f "$multi_ali" ] && mv $multi_ali $MODMULTI_path/$proteinname/.
[ -f "$multi_py" ] && mv $multi_py $MODMULTI_path/$proteinname/.

tmp_multi_count=0
for i in `cat $op_multialign_core | awk '{print $1}' | awk -F'/' '{print $NF}' | awk -F'pdb' '{print $1}'`
do
tmp_multi_count=$((tmp_multi_count+1))
name=$i"gap_"$tmp_multi_count".pdb"
#cp $name $MODMULTI_path/$proteinname/.
[ -f "$name" ] && mv $name $MODMULTI_path/$proteinname/.
done
cd $MODMULTI_path/$proteinname
#mod9.23 $multi_py
#mod10.0 $multi_py
mod10.4 $multi_py
echo "Gap-correct put together chosen gaps $multi_py: $?" >> $LOG_MASTER
cd $curr_path
# ---------------------------------- #
modmulti_prot_fill=$proteinname"_multifill"
files_after_multiref=""
for modmulti_file in `ls $MODMULTI_path/$proteinname/$modmulti_prot_fill*pdb`
do
	files_after_multiref=$files_after_multiref",'"$modmulti_file"'"
done

files_after_multiref_=${files_after_multiref:1}
files_after_multiref_all="{"$files_after_multiref_"}"


opfile=$proteinname"_after_multiref.txt"
opfilemat=$proteinname"_findWhichToChoose.m"

time_findwhichchoose=$proteinname"_time.findwhichchoose.txt"
echo "cd .." > $opfilemat
echo "addpath(genpath(pwd));" >> $opfilemat
echo "cd code;" >> $opfilemat
echo "files_after_multiref_all=$files_after_multiref_all;" >> $opfilemat
echo " time_req = tic;" >> $opfilemat
echo "gapstruct = findWhichToChoose(files_after_multiref_all,'$opfile')" >> $opfilemat
echo " tottime = toc(time_req);" >> $opfilemat
echo " fid = fopen('$time_findwhichchoose','w');" >> $opfilemat
echo " fprintf(fid,'%d',tottime);">> $opfilemat
echo "fclose(fid);" >> $opfilemat

matlab -nodesktop -nosplash < $opfilemat
echo "Gap-correct putting togther geometric refinement $opfilemat: $?" >> $LOG_MASTER
# ---------------------------------- #
pdbfiletorun=`head -1 $opfile`
#echo "./genEMscripts_afterGapCorrect.sh $pdbfiletorun $upl_file $proteinname"
#./genEMscripts_afterGapCorrect.sh $pdbfiletorun $upl_file $proteinname
mdlogfile=$proteinname"_em_afterGapCorrect.txt"
mdtimefile=$proteinname"_em_afterGapCorreect.time.txt"
date > $mdtimefile
./genEMscripts_afterGapCorrect_v2.sh $pdbfiletorun $upl_file $proteinname > $mdlogfile
echo "EM $proteinname: $?" >> $LOG_MASTER
date >> $mdtimefile

path_for_emfile=`dirname $pdbfiletorun`
name_for_emfile=`basename $pdbfiletorun | awk -F'pdb' '{print $1}'`
#pdbfile_after_em=`ls md_related_gapcorrect/$proteinname/1/*nosol.pdb`
pdbfile_after_em=`ls md_related_gapcorrect_v2/$proteinname/1/*nosol.pdb`

mkdir waterrefine/$proteinname
prot_convert=$name_for_emfile"map.pdb"
./call_convertPDBformatFromEM.sh $pdbfile_after_em waterrefine/$proteinname/$prot_convert
echo "water-refine Convert file $pdbfile_after_em: $?" >> $LOG_MASTER

cp $xplornoe waterrefine/$proteinname/.
xplornoe_name=`basename $xplornoe`
if [ ! -z "$xplordihed" ]; then
	cp $xplordihed waterrefine/$proteinname/.
	xplordihed_name=`basename $xplordihed`
fi
cd waterrefine
if [ ! -z "$xplordihed" ]; then
	./createRunFile.sh $proteinname $proteinname/$prot_convert $proteinname/$xplornoe_name $proteinname/$xplordihed_name
else
	./createRunFile.sh $proteinname $proteinname/$prot_convert $proteinname/$xplornoe_name
fi	
#run xplor
xplorlogfile=$proteinname"_xplox_wref.txt"
$xplorcmd $proteinname"_wref.py" > $xplorlogfile
echo "water-refine running $proteinname\ _wref.py: $?" >> $LOG_MASTER
mv $proteinname"_"* $proteinname/.
[ -f "$xplorlogfile" ] && mv $xplorlogfile $proteinname/.
cd ..

### clean up ###
mkdir $RESIDUAL_path/$proteinname
[ -f "$gapfile" ] && mv $gapfile $RESIDUAL_path/$proteinname/.
[ -f "$getgapfile" ] && mv $getgapfile $RESIDUAL_path/$proteinname/. 
[ -f "$tmpfirstreis" ] && mv $tmpfirstreis  $RESIDUAL_path/$proteinname/. 
[ -f "$firstresifile" ] && mv $firstresifile $RESIDUAL_path/$proteinname/. 
[ -f "$gapfile_pairs" ] && mv $gapfile_pairs $RESIDUAL_path/$proteinname/. 
[ -f "$op_multialign" ] && mv $op_multialign $RESIDUAL_path/$proteinname/. 
[ -f "$op_multialign_core" ] && mv $op_multialign_core $RESIDUAL_path/$proteinname/. 
[ -f "$op_gaps" ] && mv $op_gaps $RESIDUAL_path/$proteinname/. 
[ -f "$tmp_multi" ] && mv $tmp_multi $RESIDUAL_path/$proteinname/. 
[ -f "$gapfile_pairs" ] && mv $gapfile_pairs $RESIDUAL_path/$proteinname/. 
[ -f "$modmulti_prot_fill" ] && mv $modmulti_prot_fill $RESIDUAL_path/$proteinname/. 
[ -f "$opfile" ] && mv $opfile $RESIDUAL_path/$proteinname/. 
[ -f "$opfilemat" ] && mv $opfilemat $RESIDUAL_path/$proteinname/. 

[ -f "$mdlogfile" ] && mv $mdlogfile $RESIDUAL_path/$proteinname/.
[ -f "$creatMultiModllerlog" ] && mv $creatMultiModllerlog $RESIDUAL_path/$proteinname/.
[ -f "$givegaptimefile" ] && mv $givegaptimefile $RESIDUAL_path/$proteinname/.
[ -f "$givegaptimefile" ] && mv $givegaptimefile $RESIDUAL_path/$proteinname/.
[ -f "$time_multiprep" ] && mv $time_multiprep $RESIDUAL_path/$proteinname/.
[ -f "$time_findwhichchoose" ] && mv $time_findwhichchoose $RESIDUAL_path/$proteinname/.
[ -f "$mdtimefile" ] && mv $mdtimefile $RESIDUAL_path/$proteinname/.
[ -f "$timemod20" ] && mv $timemod20 $RESIDUAL_path/$proteinname/.

movefile=$proteinname"_gaps_multi"
[ -f "$movefile" ] && mv $movefile $RESIDUAL_path/$proteinname/.

dssp_file_=`basename $pdbfile | awk -F'pdb' '{print $1}'`
dssp_file_name=${dssp_file_::-1}
dssp_file=$dssp_file_name"_dssp.txt"
[ -f "$dssp_file" ] && mv $dssp_file $RESIDUAL_path/$proteinname/.

for modmulti_dssp_file in `ls $modmulti_prot_fill*_dssp.txt`
do
        [ -f "$modmulti_dssp_file" ] && mv $modmulti_dssp_file $RESIDUAL_path/$proteinname/.
done

